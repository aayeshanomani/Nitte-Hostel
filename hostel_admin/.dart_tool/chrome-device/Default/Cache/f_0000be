define(['dart_sdk', 'packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart', 'packages/charts_common/src/chart/cartesian/axis/draw_strategy/gridline_draw_strategy.dart', 'packages/charts_common/src/chart/cartesian/axis/draw_strategy/none_draw_strategy.dart', 'packages/charts_common/src/chart/common/behavior/chart_behavior.dart', 'packages/charts_common/src/chart/common/series_datum.dart', 'packages/charts_common/src/chart/common/selection_model/selection_model.dart', 'packages/charts_common/src/chart/layout/layout_config.dart', 'packages/charts_common/src/chart/bar/base_bar_renderer_element.dart', 'packages/charts_common/src/common/math.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart', 'packages/charts_common/src/chart/bar/base_bar_renderer_config.dart', 'packages/charts_common/src/common/typed_registry.dart', 'packages/charts_common/src/common/color.dart'], (function load__packages__charts_common__src__chart__cartesian__cartesian_chart_dart(dart_sdk, packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart, packages__charts_common__src__chart__cartesian__axis__draw_strategy__gridline_draw_strategy$46dart, packages__charts_common__src__chart__cartesian__axis__draw_strategy__none_draw_strategy$46dart, packages__charts_common__src__chart__common__behavior__chart_behavior$46dart, packages__charts_common__src__chart__common__series_datum$46dart, packages__charts_common__src__chart__common__selection_model__selection_model$46dart, packages__charts_common__src__chart__layout__layout_config$46dart, packages__charts_common__src__chart__bar__base_bar_renderer_element$46dart, packages__charts_common__src__common__math$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart, packages__charts_common__src__chart__bar__base_bar_renderer_config$46dart, packages__charts_common__src__common__typed_registry$46dart, packages__charts_common__src__common__color$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const axis$ = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__axis;
  const small_tick_draw_strategy = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__draw_strategy__small_tick_draw_strategy;
  const axis_spec = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__spec__axis_spec;
  const series = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__data__series;
  const processed_series = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__common__processed_series;
  const datum_details = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__common__datum_details;
  const symbol_renderer = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__common__symbol_renderer;
  const scale = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__scale;
  const gridline_draw_strategy = packages__charts_common__src__chart__cartesian__axis__draw_strategy__gridline_draw_strategy$46dart.src__chart__cartesian__axis__draw_strategy__gridline_draw_strategy;
  const none_draw_strategy = packages__charts_common__src__chart__cartesian__axis__draw_strategy__none_draw_strategy$46dart.src__chart__cartesian__axis__draw_strategy__none_draw_strategy;
  const series_renderer = packages__charts_common__src__chart__common__behavior__chart_behavior$46dart.src__chart__common__series_renderer;
  const base_chart = packages__charts_common__src__chart__common__behavior__chart_behavior$46dart.src__chart__common__base_chart;
  const series_datum = packages__charts_common__src__chart__common__series_datum$46dart.src__chart__common__series_datum;
  const selection_model = packages__charts_common__src__chart__common__selection_model__selection_model$46dart.src__chart__common__selection_model__selection_model;
  const layout_config = packages__charts_common__src__chart__layout__layout_config$46dart.src__chart__layout__layout_config;
  const base_bar_renderer_element = packages__charts_common__src__chart__bar__base_bar_renderer_element$46dart.src__chart__bar__base_bar_renderer_element;
  const math$ = packages__charts_common__src__common__math$46dart.src__common__math;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  const canvas_shapes = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__canvas_shapes;
  const base_bar_renderer_config = packages__charts_common__src__chart__bar__base_bar_renderer_config$46dart.src__chart__bar__base_bar_renderer_config;
  const typed_registry = packages__charts_common__src__common__typed_registry$46dart.src__common__typed_registry;
  const color = packages__charts_common__src__common__color$46dart.src__common__color;
  var cartesian_chart = Object.create(dart.library);
  var cartesian_renderer = Object.create(dart.library);
  var base_bar_renderer = Object.create(dart.library);
  var bar_renderer_decorator = Object.create(dart.library);
  var bar_renderer_config = Object.create(dart.library);
  var bar_renderer = Object.create(dart.library);
  var $forEach = dartx.forEach;
  var $_get = dartx._get;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $floor = dartx.floor;
  var $_set = dartx._set;
  var $toDouble = dartx.toDouble;
  var $putIfAbsent = dartx.putIfAbsent;
  var $isNotEmpty = dartx.isNotEmpty;
  var $getRange = dartx.getRange;
  var $reduce = dartx.reduce;
  var $first = dartx.first;
  var $clear = dartx.clear;
  var $toString = dartx.toString;
  var $firstWhere = dartx.firstWhere;
  var $round = dartx.round;
  var $contains = dartx.contains;
  var $retainWhere = dartx.retainWhere;
  var $remove = dartx.remove;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $values = dartx.values;
  var $where = dartx.where;
  var $addAll = dartx.addAll;
  var $left = dartx.left;
  var $right = dartx.right;
  var $top = dartx.top;
  var $bottom = dartx.bottom;
  var $reversed = dartx.reversed;
  var $iterator = dartx.iterator;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $width = dartx.width;
  var $height = dartx.height;
  var $last = dartx.last;
  var $abs = dartx.abs;
  var $indexOf = dartx.indexOf;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    SmallTickRendererSpecOfnumL: () => (T.SmallTickRendererSpecOfnumL = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(T.numL())))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    NumericAxisL: () => (T.NumericAxisL = dart.constFn(dart.legacy(axis$.NumericAxis)))(),
    IdentityMapOfStringL$NumericAxisL: () => (T.IdentityMapOfStringL$NumericAxisL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.NumericAxisL())))(),
    LinkedHashMapOfStringL$NumericAxisL: () => (T.LinkedHashMapOfStringL$NumericAxisL = dart.constFn(collection.LinkedHashMap$(T.StringL(), T.NumericAxisL())))(),
    LinkedHashMapLOfStringL$NumericAxisL: () => (T.LinkedHashMapLOfStringL$NumericAxisL = dart.constFn(dart.legacy(T.LinkedHashMapOfStringL$NumericAxisL())))(),
    StringLAndNumericAxisLToNull: () => (T.StringLAndNumericAxisLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.NumericAxisL()])))(),
    GridlineRendererSpecOfnumL: () => (T.GridlineRendererSpecOfnumL = dart.constFn(gridline_draw_strategy.GridlineRendererSpec$(T.numL())))(),
    NoneDrawStrategyOfnumL: () => (T.NoneDrawStrategyOfnumL = dart.constFn(none_draw_strategy.NoneDrawStrategy$(T.numL())))(),
    AxisSpecL: () => (T.AxisSpecL = dart.constFn(dart.legacy(axis_spec.AxisSpec)))(),
    StringLAndAxisSpecLToNull: () => (T.StringLAndAxisSpecLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), T.AxisSpecL()])))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    intLTointL: () => (T.intLTointL = dart.constFn(dart.fnType(T.intL(), [T.intL()])))(),
    AxisL: () => (T.AxisL = dart.constFn(dart.legacy(axis$.Axis)))(),
    SmallTickRendererSpecOfStringL: () => (T.SmallTickRendererSpecOfStringL = dart.constFn(small_tick_draw_strategy.SmallTickRendererSpec$(T.StringL())))(),
    CartesianChartL: () => (T.CartesianChartL = dart.constFn(dart.legacy(cartesian_chart.CartesianChart)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    SetOfStringL: () => (T.SetOfStringL = dart.constFn(core.Set$(T.StringL())))(),
    SetLOfStringL: () => (T.SetLOfStringL = dart.constFn(dart.legacy(T.SetOfStringL())))(),
    BaseBarRendererElementL: () => (T.BaseBarRendererElementL = dart.constFn(dart.legacy(base_bar_renderer_element.BaseBarRendererElement)))(),
    JSArrayOfBaseBarRendererElementL: () => (T.JSArrayOfBaseBarRendererElementL = dart.constFn(_interceptors.JSArray$(T.BaseBarRendererElementL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    intLToListLOfintL: () => (T.intLToListLOfintL = dart.constFn(dart.fnType(T.ListLOfintL(), [T.intL()])))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    VoidToMapL: () => (T.VoidToMapL = dart.constFn(dart.fnType(T.MapL(), [])))(),
    intLTonumL: () => (T.intLTonumL = dart.constFn(dart.fnType(T.numL(), [T.intL()])))(),
    ListOfBaseBarRendererElementL: () => (T.ListOfBaseBarRendererElementL = dart.constFn(core.List$(T.BaseBarRendererElementL())))(),
    ListLOfBaseBarRendererElementL: () => (T.ListLOfBaseBarRendererElementL = dart.constFn(dart.legacy(T.ListOfBaseBarRendererElementL())))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    doubleLAnddoubleLTodoubleL: () => (T.doubleLAnddoubleLTodoubleL = dart.constFn(dart.fnType(T.doubleL(), [T.doubleL(), T.doubleL()])))(),
    JSArrayOfdoubleL: () => (T.JSArrayOfdoubleL = dart.constFn(_interceptors.JSArray$(T.doubleL())))(),
    ImmutableAxisOfnumL: () => (T.ImmutableAxisOfnumL = dart.constFn(axis$.ImmutableAxis$(T.numL())))(),
    ImmutableAxisLOfnumL: () => (T.ImmutableAxisLOfnumL = dart.constFn(dart.legacy(T.ImmutableAxisOfnumL())))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    _IdentityHashSetOfStringL: () => (T._IdentityHashSetOfStringL = dart.constFn(collection._IdentityHashSet$(T.StringL())))(),
    VoidToSetLOfStringL: () => (T.VoidToSetLOfStringL = dart.constFn(dart.fnType(T.SetLOfStringL(), [])))(),
    OrdinalAxisL: () => (T.OrdinalAxisL = dart.constFn(dart.legacy(axis$.OrdinalAxis)))(),
    SetLOfStringLAndSetLOfStringLToSetLOfStringL: () => (T.SetLOfStringLAndSetLOfStringLToSetLOfStringL = dart.constFn(dart.fnType(T.SetLOfStringL(), [T.SetLOfStringL(), T.SetLOfStringL()])))(),
    StringLToNull: () => (T.StringLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL()])))(),
    PointOfdoubleL: () => (T.PointOfdoubleL = dart.constFn(math.Point$(T.doubleL())))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    IdentityMapOfStringL$ListLOfintL: () => (T.IdentityMapOfStringL$ListLOfintL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ListLOfintL())))(),
    VoidToListLOfintL: () => (T.VoidToListLOfintL = dart.constFn(dart.fnType(T.ListLOfintL(), [])))(),
    StringLAndListLOfintLTovoid: () => (T.StringLAndListLOfintLTovoid = dart.constFn(dart.fnType(dart.void, [T.StringL(), T.ListLOfintL()])))(),
    AttributeKeyOfintL: () => (T.AttributeKeyOfintL = dart.constFn(series.AttributeKey$(T.intL())))(),
    AttributeKeyOfdoubleL: () => (T.AttributeKeyOfdoubleL = dart.constFn(series.AttributeKey$(T.doubleL())))(),
    AttributeKeyOfStringL: () => (T.AttributeKeyOfStringL = dart.constFn(series.AttributeKey$(T.StringL())))(),
    AttributeKeyOfListLOfBaseBarRendererElementL: () => (T.AttributeKeyOfListLOfBaseBarRendererElementL = dart.constFn(series.AttributeKey$(T.ListLOfBaseBarRendererElementL())))(),
    BarRendererConfigL: () => (T.BarRendererConfigL = dart.constFn(dart.legacy(bar_renderer_config.BarRendererConfig)))(),
    ConstCornerStrategyL: () => (T.ConstCornerStrategyL = dart.constFn(dart.legacy(bar_renderer_config.ConstCornerStrategy)))(),
    NoCornerStrategyL: () => (T.NoCornerStrategyL = dart.constFn(dart.legacy(bar_renderer_config.NoCornerStrategy)))(),
    CanvasRectL: () => (T.CanvasRectL = dart.constFn(dart.legacy(canvas_shapes.CanvasRect)))(),
    JSArrayOfCanvasRectL: () => (T.JSArrayOfCanvasRectL = dart.constFn(_interceptors.JSArray$(T.CanvasRectL())))(),
    RectangleOfintL: () => (T.RectangleOfintL = dart.constFn(math.Rectangle$(T.intL())))(),
    BarRendererElementL: () => (T.BarRendererElementL = dart.constFn(dart.legacy(bar_renderer.BarRendererElement)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: T.AttributeKeyOfintL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupIndex"
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: T.AttributeKeyOfintL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupCount"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: T.AttributeKeyOfdoubleL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.barGroupWeight"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: T.AttributeKeyOfdoubleL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.previousBarGroupWeight"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: T.AttributeKeyOfStringL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.stackKey"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: T.AttributeKeyOfListLOfBaseBarRendererElementL().prototype,
        [TypedKey_uniqueKey]: "BarRenderer.elements"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: bar_renderer_config.ConstCornerStrategy.prototype,
        [ConstCornerStrategy_radius]: 2
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "package:charts_common/src/chart/cartesian/cartesian_chart.dart",
    "package:charts_common/src/chart/cartesian/cartesian_renderer.dart",
    "package:charts_common/src/chart/bar/base_bar_renderer.dart",
    "package:charts_common/src/chart/bar/bar_renderer_decorator.dart",
    "package:charts_common/src/chart/bar/bar_renderer_config.dart",
    "package:charts_common/src/chart/bar/bar_renderer.dart"
  ];
  var _domainAxis = dart.privateName(cartesian_chart, "_domainAxis");
  var vertical$ = dart.privateName(cartesian_chart, "CartesianChart.vertical");
  var flipVerticalAxisOutput = dart.privateName(cartesian_chart, "CartesianChart.flipVerticalAxisOutput");
  var _domainAxisSpec = dart.privateName(cartesian_chart, "_domainAxisSpec");
  var _newDomainAxisSpec = dart.privateName(cartesian_chart, "_newDomainAxisSpec");
  var _usePrimaryMeasureAxis = dart.privateName(cartesian_chart, "_usePrimaryMeasureAxis");
  var _useSecondaryMeasureAxis = dart.privateName(cartesian_chart, "_useSecondaryMeasureAxis");
  var _newDomainAxis = dart.privateName(cartesian_chart, "_newDomainAxis");
  var _primaryMeasureAxis = dart.privateName(cartesian_chart, "_primaryMeasureAxis");
  var _secondaryMeasureAxis = dart.privateName(cartesian_chart, "_secondaryMeasureAxis");
  var _disjointMeasureAxes = dart.privateName(cartesian_chart, "_disjointMeasureAxes");
  const _is_CartesianChart_default = Symbol('_is_CartesianChart_default');
  cartesian_chart.CartesianChart$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var AxisSpecOfDL = () => (AxisSpecOfDL = dart.constFn(axis_spec.AxisSpec$(DL())))();
    var AxisSpecLOfDL = () => (AxisSpecLOfDL = dart.constFn(dart.legacy(AxisSpecOfDL())))();
    var SeriesOfdynamic$DL = () => (SeriesOfdynamic$DL = dart.constFn(series.Series$(dart.dynamic, DL())))();
    var SeriesLOfdynamic$DL = () => (SeriesLOfdynamic$DL = dart.constFn(dart.legacy(SeriesOfdynamic$DL())))();
    var BarRendererOfDL = () => (BarRendererOfDL = dart.constFn(bar_renderer.BarRenderer$(DL())))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var StringLAndListLOfMutableSeriesLOfDLToNull = () => (StringLAndListLOfMutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), ListLOfMutableSeriesLOfDL()])))();
    var MapOfStringL$ListLOfMutableSeriesLOfDL = () => (MapOfStringL$ListLOfMutableSeriesLOfDL = dart.constFn(core.Map$(T.StringL(), ListLOfMutableSeriesLOfDL())))();
    var MapLOfStringL$ListLOfMutableSeriesLOfDL = () => (MapLOfStringL$ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(MapOfStringL$ListLOfMutableSeriesLOfDL())))();
    var DatumDetailsOfDL = () => (DatumDetailsOfDL = dart.constFn(datum_details.DatumDetails$(DL())))();
    var DatumDetailsLOfDL = () => (DatumDetailsLOfDL = dart.constFn(dart.legacy(DatumDetailsOfDL())))();
    var JSArrayOfDatumDetailsLOfDL = () => (JSArrayOfDatumDetailsLOfDL = dart.constFn(_interceptors.JSArray$(DatumDetailsLOfDL())))();
    var DLToStringL = () => (DLToStringL = dart.constFn(dart.fnType(T.StringL(), [DL()])))();
    var DLToLStringL = () => (DLToLStringL = dart.constFn(dart.legacy(DLToStringL())))();
    var intLToFn = () => (intLToFn = dart.constFn(dart.fnType(DLToLStringL(), [T.intL()])))();
    var intLToLFn = () => (intLToLFn = dart.constFn(dart.legacy(intLToFn())))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var SeriesDatumLOfDL = () => (SeriesDatumLOfDL = dart.constFn(dart.legacy(SeriesDatumOfDL())))();
    var SeriesDatumLOfDLToNull = () => (SeriesDatumLOfDLToNull = dart.constFn(dart.fnType(core.Null, [SeriesDatumLOfDL()])))();
    class CartesianChart extends base_chart.BaseChart$(dart.legacy(D)) {
      get vertical() {
        return this[vertical$];
      }
      set vertical(value) {
        this[vertical$] = value;
      }
      get flipVerticalAxisOutput() {
        return this[flipVerticalAxisOutput];
      }
      set flipVerticalAxisOutput(value) {
        this[flipVerticalAxisOutput] = value;
      }
      init(context, graphicsFactory) {
        super.init(context, graphicsFactory);
        this[_primaryMeasureAxis].context = context;
        this[_primaryMeasureAxis].tickDrawStrategy = new (T.GridlineRendererSpecOfnumL()).new().createDrawStrategy(context, graphicsFactory);
        this[_secondaryMeasureAxis].context = context;
        this[_secondaryMeasureAxis].tickDrawStrategy = new (T.GridlineRendererSpecOfnumL()).new().createDrawStrategy(context, graphicsFactory);
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.context = context;
          axis.tickDrawStrategy = new (T.NoneDrawStrategyOfnumL()).new(context, graphicsFactory);
        }, T.StringLAndNumericAxisLToNull()));
      }
      get domainAxis() {
        return this[_domainAxis];
      }
      set domainAxisSpec(axisSpec) {
        if (!dart.equals(this[_domainAxisSpec], axisSpec)) {
          this[_newDomainAxis] = this.createDomainAxisFromSpec(AxisSpecLOfDL().as(axisSpec));
          this[_newDomainAxisSpec] = AxisSpecLOfDL().as(axisSpec);
        }
      }
      createDomainAxisFromSpec(axisSpec) {
        AxisSpecLOfDL().as(axisSpec);
        return axisSpec.createAxis();
      }
      configurationChanged() {
        let t0;
        if (this[_newDomainAxis] != null) {
          if (this[_domainAxis] != null) {
            this.removeView(this[_domainAxis]);
          }
          this[_domainAxis] = this[_newDomainAxis];
          t0 = this[_domainAxis];
          (() => {
            t0.context = this.context;
            t0.layoutPaintOrder = 5;
            return t0;
          })();
          this.initDomainAxis();
          this.addView(this[_domainAxis]);
          this[_newDomainAxis] = null;
        }
        if (this[_newDomainAxisSpec] != null) {
          this[_domainAxisSpec] = this[_newDomainAxisSpec];
          this[_newDomainAxisSpec].configure(this[_domainAxis], this.context, this.graphicsFactory);
          this[_newDomainAxisSpec] = null;
        }
      }
      getMeasureAxis(opts) {
        let axisId = opts && 'axisId' in opts ? opts.axisId : null;
        let axis = null;
        if (axisId === "secondaryMeasureAxisId") {
          axis = this[_secondaryMeasureAxis];
        } else if (axisId === "primaryMeasureAxisId") {
          axis = this[_primaryMeasureAxis];
        } else if (this[_disjointMeasureAxes][$_get](axisId) != null) {
          axis = this[_disjointMeasureAxes][$_get](axisId);
        }
        axis == null ? axis = this[_primaryMeasureAxis] : null;
        return axis;
      }
      set primaryMeasureAxisSpec(axisSpec) {
        axisSpec.configure(this[_primaryMeasureAxis], this.context, this.graphicsFactory);
      }
      set secondaryMeasureAxisSpec(axisSpec) {
        axisSpec.configure(this[_secondaryMeasureAxis], this.context, this.graphicsFactory);
      }
      set disjointMeasureAxisSpecs(axisSpecs) {
        axisSpecs[$forEach](dart.fn((axisId, axisSpec) => {
          axisSpec.configure(this[_disjointMeasureAxes][$_get](axisId), this.context, this.graphicsFactory);
        }, T.StringLAndAxisSpecLToNull()));
      }
      makeSeries(series) {
        let t0;
        SeriesLOfdynamic$DL().as(series);
        let s = super.makeSeries(series);
        t0 = s;
        t0.measureOffsetFn == null ? t0.measureOffsetFn = dart.fn(_ => 0, T.intLTointL()) : null;
        s.setAttr(T.AxisL(), axis$.domainAxisKey, this.domainAxis);
        s.setAttr(T.AxisL(), axis$.measureAxisKey, this.getMeasureAxis({axisId: series.getAttribute(T.StringL(), axis$.measureAxisIdKey)}));
        return s;
      }
      makeDefaultRenderer() {
        let t0;
        t0 = BarRendererOfDL().new();
        return (() => {
          t0.rendererId = "default";
          return t0;
        })();
      }
      preprocessSeries(seriesList) {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3;
        ListLOfMutableSeriesLOfDL().as(seriesList);
        let rendererToSeriesList = super.preprocessSeries(seriesList);
        for (let series of seriesList) {
          let measureAxisId = series.getAttr(T.StringL(), axis$.measureAxisIdKey);
          this[_usePrimaryMeasureAxis] = dart.test(this[_usePrimaryMeasureAxis]) || measureAxisId == null || measureAxisId === "primaryMeasureAxisId";
          this[_useSecondaryMeasureAxis] = dart.test(this[_useSecondaryMeasureAxis]) || measureAxisId === "secondaryMeasureAxisId";
        }
        if (dart.test(this[_usePrimaryMeasureAxis])) {
          this.addView(this[_primaryMeasureAxis]);
        } else {
          this.removeView(this[_primaryMeasureAxis]);
        }
        if (dart.test(this[_useSecondaryMeasureAxis])) {
          this.addView(this[_secondaryMeasureAxis]);
        } else {
          this.removeView(this[_secondaryMeasureAxis]);
        }
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          this.addView(axis);
        }, T.StringLAndNumericAxisLToNull()));
        this.domainAxis.resetDomains();
        this[_primaryMeasureAxis].resetDomains();
        this[_secondaryMeasureAxis].resetDomains();
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.resetDomains();
        }, T.StringLAndNumericAxisLToNull()));
        let reverseAxisDirection = this.context != null && dart.test(this.context.isRtl);
        if (dart.test(this.vertical)) {
          t0 = this.domainAxis;
          (() => {
            t0.axisOrientation = axis$.AxisOrientation.bottom;
            t0.reverseOutputRange = reverseAxisDirection;
            return t0;
          })();
          t0$ = this[_primaryMeasureAxis];
          (() => {
            t0$.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
            t0$.reverseOutputRange = this.flipVerticalAxisOutput;
            return t0$;
          })();
          t0$0 = this[_secondaryMeasureAxis];
          (() => {
            t0$0.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
            t0$0.reverseOutputRange = this.flipVerticalAxisOutput;
            return t0$0;
          })();
          this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
            let t0;
            t0 = axis;
            (() => {
              t0.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.left : axis$.AxisOrientation.right;
              t0.reverseOutputRange = this.flipVerticalAxisOutput;
              return t0;
            })();
          }, T.StringLAndNumericAxisLToNull()));
        } else {
          t0$1 = this.domainAxis;
          (() => {
            t0$1.axisOrientation = reverseAxisDirection ? axis$.AxisOrientation.right : axis$.AxisOrientation.left;
            t0$1.reverseOutputRange = this.flipVerticalAxisOutput;
            return t0$1;
          })();
          t0$2 = this[_primaryMeasureAxis];
          (() => {
            t0$2.axisOrientation = axis$.AxisOrientation.bottom;
            t0$2.reverseOutputRange = reverseAxisDirection;
            return t0$2;
          })();
          t0$3 = this[_secondaryMeasureAxis];
          (() => {
            t0$3.axisOrientation = axis$.AxisOrientation.top;
            t0$3.reverseOutputRange = reverseAxisDirection;
            return t0$3;
          })();
          this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
            let t0;
            t0 = axis;
            (() => {
              t0.axisOrientation = axis$.AxisOrientation.top;
              t0.reverseOutputRange = reverseAxisDirection;
              return t0;
            })();
          }, T.StringLAndNumericAxisLToNull()));
        }
        rendererToSeriesList[$forEach](dart.fn((rendererId, seriesList) => {
          this.getSeriesRenderer(rendererId).configureDomainAxes(seriesList);
          this.getSeriesRenderer(rendererId).configureMeasureAxes(seriesList);
        }, StringLAndListLOfMutableSeriesLOfDLToNull()));
        return rendererToSeriesList;
      }
      onSkipLayout() {
        this.domainAxis.updateTicks();
        if (dart.test(this[_usePrimaryMeasureAxis])) {
          this[_primaryMeasureAxis].updateTicks();
        }
        if (dart.test(this[_useSecondaryMeasureAxis])) {
          this[_secondaryMeasureAxis].updateTicks();
        }
        this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
          axis.updateTicks();
        }, T.StringLAndNumericAxisLToNull()));
        super.onSkipLayout();
      }
      onPostLayout(rendererToSeriesList) {
        MapLOfStringL$ListLOfMutableSeriesLOfDL().as(rendererToSeriesList);
        this.fireOnAxisConfigured();
        super.onPostLayout(rendererToSeriesList);
      }
      getDatumDetails(type) {
        let entries = JSArrayOfDatumDetailsLOfDL().of([]);
        this.getSelectionModel(type).selectedDatum[$forEach](dart.fn(seriesDatum => {
          let t1, t0, t1$, t0$, t1$0, t0$0, t1$1, t0$1, t1$2, t0$2;
          let series = seriesDatum.series;
          let datum = seriesDatum.datum;
          let datumIndex = seriesDatum.index;
          let domain = (t0 = series, t1 = datumIndex, t0.domainFn(t1));
          let domainFormatterFn = intLToLFn().as(series.domainFormatterFn);
          let measure = (t0$ = series, t1$ = datumIndex, t0$.measureFn(t1$));
          let measureFormatterFn = series.measureFormatterFn;
          let measureOffset = (t0$0 = series, t1$0 = datumIndex, t0$0.measureOffsetFn(t1$0));
          let rawMeasure = (t0$1 = series, t1$1 = datumIndex, t0$1.rawMeasureFn(t1$1));
          let color = (t0$2 = series, t1$2 = datumIndex, t0$2.colorFn(t1$2));
          let renderer = this.getSeriesRenderer(series.getAttr(T.StringL(), series_renderer.rendererIdKey));
          let datumDetails = renderer.addPositionToDetailsForSeriesDatum(new (DatumDetailsOfDL()).new({datum: datum, domain: domain, domainFormatter: domainFormatterFn != null ? domainFormatterFn(datumIndex) : null, index: datumIndex, measure: measure, measureFormatter: measureFormatterFn != null ? measureFormatterFn(datumIndex) : null, measureOffset: measureOffset, rawMeasure: rawMeasure, series: series, color: color}), seriesDatum);
          entries[$add](datumDetails);
        }, SeriesDatumLOfDLToNull()));
        return entries;
      }
    }
    (CartesianChart.new = function(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
      let vertical = opts && 'vertical' in opts ? opts.vertical : null;
      let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
      let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
      let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
      let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
      let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
      this[_domainAxis] = null;
      this[_domainAxisSpec] = null;
      this[_newDomainAxisSpec] = null;
      this[flipVerticalAxisOutput] = false;
      this[_usePrimaryMeasureAxis] = false;
      this[_useSecondaryMeasureAxis] = false;
      this[vertical$] = (t0 = vertical, t0 == null ? true : t0);
      this[_newDomainAxis] = domainAxis;
      this[_primaryMeasureAxis] = (t0$ = primaryMeasureAxis, t0$ == null ? new axis$.NumericAxis.new() : t0$);
      this[_secondaryMeasureAxis] = (t0$0 = secondaryMeasureAxis, t0$0 == null ? new axis$.NumericAxis.new() : t0$0);
      this[_disjointMeasureAxes] = T.LinkedHashMapLOfStringL$NumericAxisL().as((t0$1 = disjointMeasureAxes, t0$1 == null ? new (T.IdentityMapOfStringL$NumericAxisL()).new() : t0$1));
      CartesianChart.__proto__.new.call(this, {layoutConfig: (t0$2 = layoutConfig, t0$2 == null ? cartesian_chart.CartesianChart._defaultLayoutConfig : t0$2)});
      t0$3 = this[_primaryMeasureAxis];
      t0$3.layoutPaintOrder == null ? t0$3.layoutPaintOrder = 0 : null;
      t0$4 = this[_secondaryMeasureAxis];
      t0$4.layoutPaintOrder == null ? t0$4.layoutPaintOrder = 0 : null;
      this[_disjointMeasureAxes][$forEach](dart.fn((axisId, axis) => {
        let t0;
        t0 = axis;
        t0.layoutPaintOrder == null ? t0.layoutPaintOrder = 0 : null;
      }, T.StringLAndNumericAxisLToNull()));
    }).prototype = CartesianChart.prototype;
    dart.addTypeTests(CartesianChart);
    CartesianChart.prototype[_is_CartesianChart_default] = true;
    dart.addTypeCaches(CartesianChart);
    dart.setMethodSignature(CartesianChart, () => ({
      __proto__: dart.getMethods(CartesianChart.__proto__),
      createDomainAxisFromSpec: dart.fnType(dart.legacy(axis$.Axis$(dart.legacy(D))), [dart.legacy(core.Object)]),
      getMeasureAxis: dart.fnType(dart.legacy(axis$.Axis), [], {axisId: dart.legacy(core.String)}, {}),
      makeDefaultRenderer: dart.fnType(dart.legacy(series_renderer.SeriesRenderer$(dart.legacy(D))), []),
      getDatumDetails: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(selection_model.SelectionModelType)])
    }));
    dart.setGetterSignature(CartesianChart, () => ({
      __proto__: dart.getGetters(CartesianChart.__proto__),
      domainAxis: dart.legacy(axis$.Axis)
    }));
    dart.setSetterSignature(CartesianChart, () => ({
      __proto__: dart.getSetters(CartesianChart.__proto__),
      domainAxisSpec: dart.legacy(axis_spec.AxisSpec),
      primaryMeasureAxisSpec: dart.legacy(axis_spec.AxisSpec),
      secondaryMeasureAxisSpec: dart.legacy(axis_spec.AxisSpec),
      disjointMeasureAxisSpecs: dart.legacy(collection.LinkedHashMap$(dart.legacy(core.String), dart.legacy(axis_spec.AxisSpec)))
    }));
    dart.setLibraryUri(CartesianChart, I[0]);
    dart.setFieldSignature(CartesianChart, () => ({
      __proto__: dart.getFields(CartesianChart.__proto__),
      vertical: dart.fieldType(dart.legacy(core.bool)),
      [_domainAxis]: dart.fieldType(dart.legacy(axis$.Axis$(dart.legacy(D)))),
      [_newDomainAxis]: dart.fieldType(dart.legacy(axis$.Axis$(dart.legacy(D)))),
      [_domainAxisSpec]: dart.fieldType(dart.legacy(axis_spec.AxisSpec$(dart.legacy(D)))),
      [_newDomainAxisSpec]: dart.fieldType(dart.legacy(axis_spec.AxisSpec$(dart.legacy(D)))),
      [_primaryMeasureAxis]: dart.finalFieldType(dart.legacy(axis$.Axis$(dart.legacy(core.num)))),
      [_secondaryMeasureAxis]: dart.finalFieldType(dart.legacy(axis$.Axis$(dart.legacy(core.num)))),
      [_disjointMeasureAxes]: dart.finalFieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(core.String), dart.legacy(axis$.NumericAxis)))),
      flipVerticalAxisOutput: dart.fieldType(dart.legacy(core.bool)),
      [_usePrimaryMeasureAxis]: dart.fieldType(dart.legacy(core.bool)),
      [_useSecondaryMeasureAxis]: dart.fieldType(dart.legacy(core.bool))
    }));
    return CartesianChart;
  });
  cartesian_chart.CartesianChart = cartesian_chart.CartesianChart$();
  dart.defineLazy(cartesian_chart.CartesianChart, {
    /*cartesian_chart.CartesianChart._defaultLayoutConfig*/get _defaultLayoutConfig() {
      return new layout_config.LayoutConfig.new({topSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), bottomSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), leftSpec: layout_config.MarginSpec.fromPixel({minPixel: 20}), rightSpec: layout_config.MarginSpec.fromPixel({minPixel: 20})});
    }
  }, true);
  dart.addTypeTests(cartesian_chart.CartesianChart, _is_CartesianChart_default);
  cartesian_chart.NumericCartesianChart = class NumericCartesianChart extends cartesian_chart.CartesianChart$(dart.legacy(core.num)) {
    initDomainAxis() {
      this[_domainAxis].tickDrawStrategy = new (T.SmallTickRendererSpecOfnumL()).new().createDrawStrategy(this.context, this.graphicsFactory);
    }
  };
  (cartesian_chart.NumericCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.NumericCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.NumericAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.NumericCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.NumericCartesianChart);
  dart.addTypeCaches(cartesian_chart.NumericCartesianChart);
  dart.setMethodSignature(cartesian_chart.NumericCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.NumericCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.NumericCartesianChart, I[0]);
  cartesian_chart.OrdinalCartesianChart = class OrdinalCartesianChart extends cartesian_chart.CartesianChart$(dart.legacy(core.String)) {
    initDomainAxis() {
      let t0;
      t0 = this[_domainAxis];
      (() => {
        t0.tickDrawStrategy = new (T.SmallTickRendererSpecOfStringL()).new().createDrawStrategy(this.context, this.graphicsFactory);
        return t0;
      })();
    }
  };
  (cartesian_chart.OrdinalCartesianChart.new = function(opts) {
    let vertical = opts && 'vertical' in opts ? opts.vertical : null;
    let layoutConfig = opts && 'layoutConfig' in opts ? opts.layoutConfig : null;
    let primaryMeasureAxis = opts && 'primaryMeasureAxis' in opts ? opts.primaryMeasureAxis : null;
    let secondaryMeasureAxis = opts && 'secondaryMeasureAxis' in opts ? opts.secondaryMeasureAxis : null;
    let disjointMeasureAxes = opts && 'disjointMeasureAxes' in opts ? opts.disjointMeasureAxes : null;
    cartesian_chart.OrdinalCartesianChart.__proto__.new.call(this, {vertical: vertical, layoutConfig: layoutConfig, domainAxis: new axis$.OrdinalAxis.new(), primaryMeasureAxis: primaryMeasureAxis, secondaryMeasureAxis: secondaryMeasureAxis, disjointMeasureAxes: disjointMeasureAxes});
    ;
  }).prototype = cartesian_chart.OrdinalCartesianChart.prototype;
  dart.addTypeTests(cartesian_chart.OrdinalCartesianChart);
  dart.addTypeCaches(cartesian_chart.OrdinalCartesianChart);
  dart.setMethodSignature(cartesian_chart.OrdinalCartesianChart, () => ({
    __proto__: dart.getMethods(cartesian_chart.OrdinalCartesianChart.__proto__),
    initDomainAxis: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(cartesian_chart.OrdinalCartesianChart, I[0]);
  const _is_CartesianRenderer_default = Symbol('_is_CartesianRenderer_default');
  cartesian_renderer.CartesianRenderer$ = dart.generic(D => {
    class CartesianRenderer extends series_renderer.SeriesRenderer$(dart.legacy(D)) {}
    (CartesianRenderer.new = function() {
      ;
    }).prototype = CartesianRenderer.prototype;
    dart.addTypeTests(CartesianRenderer);
    CartesianRenderer.prototype[_is_CartesianRenderer_default] = true;
    dart.addTypeCaches(CartesianRenderer);
    dart.setLibraryUri(CartesianRenderer, I[1]);
    return CartesianRenderer;
  });
  cartesian_renderer.CartesianRenderer = cartesian_renderer.CartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.CartesianRenderer, _is_CartesianRenderer_default);
  var _renderingVertically = dart.privateName(cartesian_renderer, "_renderingVertically");
  const _is_BaseCartesianRenderer_default = Symbol('_is_BaseCartesianRenderer_default');
  cartesian_renderer.BaseCartesianRenderer$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var BaseChartOfDL = () => (BaseChartOfDL = dart.constFn(base_chart.BaseChart$(DL())))();
    var BaseChartLOfDL = () => (BaseChartLOfDL = dart.constFn(dart.legacy(BaseChartOfDL())))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var MutableSeriesLOfDLToNull = () => (MutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesLOfDL()])))();
    var intLToDL = () => (intLToDL = dart.constFn(dart.fnType(DL(), [T.intL()])))();
    var intLToLDL = () => (intLToLDL = dart.constFn(dart.legacy(intLToDL())))();
    class BaseCartesianRenderer extends series_renderer.BaseSeriesRenderer$(dart.legacy(D)) {
      onAttach(chart) {
        BaseChartLOfDL().as(chart);
        super.onAttach(chart);
        this[_renderingVertically] = T.CartesianChartL().as(chart).vertical;
      }
      get renderingVertically() {
        return this[_renderingVertically];
      }
      configureDomainAxes(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        seriesList[$forEach](dart.fn(series => {
          if (dart.test(series.data[$isEmpty])) {
            return;
          }
          let domainAxis = series.getAttr(T.AxisL(), axis$.domainAxisKey);
          let domainFn = series.domainFn;
          let domainLowerBoundFn = series.domainLowerBoundFn;
          let domainUpperBoundFn = series.domainUpperBoundFn;
          if (domainAxis == null) {
            return;
          }
          if (dart.test(this.renderingVertically)) {
            for (let i = 0; i < dart.notNull(series.data[$length]); i = i + 1) {
              domainAxis.addDomainValue(domainFn(i));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          } else {
            for (let i = dart.notNull(series.data[$length]) - 1; i >= 0; i = i - 1) {
              domainAxis.addDomainValue(domainFn(i));
              if (domainLowerBoundFn != null && domainUpperBoundFn != null) {
                let domainLowerBound = domainLowerBoundFn(i);
                let domainUpperBound = domainUpperBoundFn(i);
                if (domainLowerBound != null && domainUpperBound != null) {
                  domainAxis.addDomainValue(domainLowerBound);
                  domainAxis.addDomainValue(domainUpperBound);
                }
              }
            }
          }
        }, MutableSeriesLOfDLToNull()));
      }
      configureMeasureAxes(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        seriesList[$forEach](dart.fn(series => {
          if (dart.test(series.data[$isEmpty])) {
            return;
          }
          let domainAxis = series.getAttr(T.AxisL(), axis$.domainAxisKey);
          let domainFn = series.domainFn;
          if (domainAxis == null) {
            return;
          }
          let measureAxis = series.getAttr(T.AxisL(), axis$.measureAxisKey);
          if (measureAxis == null) {
            return;
          }
          let startIndex = this.findNearestViewportStart(domainAxis, domainFn, series.data);
          let endIndex = this.findNearestViewportEnd(domainAxis, domainFn, series.data);
          this.addMeasureValuesFor(series, measureAxis, startIndex, endIndex);
        }, MutableSeriesLOfDLToNull()));
      }
      addMeasureValuesFor(series, measureAxis, startIndex, endIndex) {
        MutableSeriesLOfDL().as(series);
        let measureFn = series.measureFn;
        let measureOffsetFn = series.measureOffsetFn;
        let measureLowerBoundFn = series.measureLowerBoundFn;
        let measureUpperBoundFn = series.measureUpperBoundFn;
        for (let i = startIndex; dart.notNull(i) <= dart.notNull(endIndex); i = dart.notNull(i) + 1) {
          let measure = measureFn(i);
          let measureOffset = measureOffsetFn(i);
          if (measure != null && measureOffset != null) {
            measureAxis.addDomainValue(dart.notNull(measure) + dart.notNull(measureOffset));
            if (measureLowerBoundFn != null && measureUpperBoundFn != null) {
              measureAxis.addDomainValue(dart.notNull(measureLowerBoundFn(i)) + dart.notNull(measureOffset));
              measureAxis.addDomainValue(dart.notNull(measureUpperBoundFn(i)) + dart.notNull(measureOffset));
            }
          }
        }
      }
      findNearestViewportStart(domainAxis, domainFn, data) {
        intLToLDL().as(domainFn);
        if (dart.test(data[$isEmpty])) {
          return null;
        }
        if (domainAxis.compareDomainValueToViewport(domainFn(0)) === 0) {
          return 0;
        }
        let start = 1;
        let end = dart.notNull(data[$length]) - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === -1 && comparisonValue === 0) {
            return searchIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex - 1;
          }
          if (comparisonValue === -1) {
            start = searchIndex + 1;
          } else {
            end = searchIndex - 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(dart.notNull(data[$length]) - 1));
        return lastComparison === 1 ? dart.notNull(data[$length]) - 1 : 0;
      }
      findNearestViewportEnd(domainAxis, domainFn, data) {
        intLToLDL().as(domainFn);
        if (dart.test(data[$isEmpty])) {
          return null;
        }
        let start = 1;
        let end = dart.notNull(data[$length]) - 1;
        if (domainAxis.compareDomainValueToViewport(domainFn(end)) === 0) {
          return end;
        }
        end = end - 1;
        while (end >= start) {
          let searchIndex = ((end - start) / 2)[$floor]() + start;
          let prevIndex = searchIndex - 1;
          let comparisonValue = domainAxis.compareDomainValueToViewport(domainFn(searchIndex));
          let prevComparisonValue = domainAxis.compareDomainValueToViewport(domainFn(prevIndex));
          if (prevComparisonValue === 0 && comparisonValue === 1) {
            return prevIndex;
          }
          if (comparisonValue === 1 && prevComparisonValue === -1) {
            return searchIndex;
          }
          if (comparisonValue === 1) {
            end = searchIndex - 1;
          } else {
            start = searchIndex + 1;
          }
        }
        let lastComparison = domainAxis.compareDomainValueToViewport(domainFn(dart.notNull(data[$length]) - 1));
        return lastComparison === 1 ? dart.notNull(data[$length]) - 1 : 0;
      }
    }
    (BaseCartesianRenderer.new = function(opts) {
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_renderingVertically] = true;
      BaseCartesianRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: symbolRenderer});
      ;
    }).prototype = BaseCartesianRenderer.prototype;
    dart.addTypeTests(BaseCartesianRenderer);
    BaseCartesianRenderer.prototype[_is_BaseCartesianRenderer_default] = true;
    dart.addTypeCaches(BaseCartesianRenderer);
    BaseCartesianRenderer[dart.implements] = () => [cartesian_renderer.CartesianRenderer$(dart.legacy(D))];
    dart.setMethodSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getMethods(BaseCartesianRenderer.__proto__),
      addMeasureValuesFor: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(axis$.Axis), dart.legacy(core.int), dart.legacy(core.int)]),
      findNearestViewportStart: dart.fnType(dart.legacy(core.int), [dart.legacy(axis$.Axis), dart.legacy(core.Object), dart.legacy(core.List)]),
      findNearestViewportEnd: dart.fnType(dart.legacy(core.int), [dart.legacy(axis$.Axis), dart.legacy(core.Object), dart.legacy(core.List)])
    }));
    dart.setGetterSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getGetters(BaseCartesianRenderer.__proto__),
      renderingVertically: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(BaseCartesianRenderer, I[1]);
    dart.setFieldSignature(BaseCartesianRenderer, () => ({
      __proto__: dart.getFields(BaseCartesianRenderer.__proto__),
      [_renderingVertically]: dart.fieldType(dart.legacy(core.bool))
    }));
    return BaseCartesianRenderer;
  });
  cartesian_renderer.BaseCartesianRenderer = cartesian_renderer.BaseCartesianRenderer$();
  dart.addTypeTests(cartesian_renderer.BaseCartesianRenderer, _is_BaseCartesianRenderer_default);
  var config$ = dart.privateName(base_bar_renderer, "BaseBarRenderer.config");
  var chart = dart.privateName(base_bar_renderer, "BaseBarRenderer.chart");
  var _barStackMap = dart.privateName(base_bar_renderer, "_barStackMap");
  var _currentKeys = dart.privateName(base_bar_renderer, "_currentKeys");
  var _currentGroupsStackKeys = dart.privateName(base_bar_renderer, "_currentGroupsStackKeys");
  var _prevDomainAxis = dart.privateName(base_bar_renderer, "_prevDomainAxis");
  var _calculateBarWeights = dart.privateName(base_bar_renderer, "_calculateBarWeights");
  var _getVerticalDetailsForDomainValue = dart.privateName(base_bar_renderer, "_getVerticalDetailsForDomainValue");
  var _getHorizontalDetailsForDomainValue = dart.privateName(base_bar_renderer, "_getHorizontalDetailsForDomainValue");
  var _getSegmentsForDomainValue = dart.privateName(base_bar_renderer, "_getSegmentsForDomainValue");
  var _getDistance = dart.privateName(base_bar_renderer, "_getDistance");
  const _is_BaseBarRenderer_default = Symbol('_is_BaseBarRenderer_default');
  base_bar_renderer.BaseBarRenderer$ = dart.generic((D, R, B) => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var LinkedMapOfDL$SetLOfStringL = () => (LinkedMapOfDL$SetLOfStringL = dart.constFn(_js_helper.LinkedMap$(DL(), T.SetLOfStringL())))();
    var BaseChartOfDL = () => (BaseChartOfDL = dart.constFn(base_chart.BaseChart$(DL())))();
    var BaseChartLOfDL = () => (BaseChartLOfDL = dart.constFn(dart.legacy(BaseChartOfDL())))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var MutableSeriesLOfDLToNull = () => (MutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [MutableSeriesLOfDL()])))();
    var ImmutableSeriesOfDL = () => (ImmutableSeriesOfDL = dart.constFn(processed_series.ImmutableSeries$(DL())))();
    var ImmutableSeriesLOfDL = () => (ImmutableSeriesLOfDL = dart.constFn(dart.legacy(ImmutableSeriesOfDL())))();
    var ListOfImmutableSeriesLOfDL = () => (ListOfImmutableSeriesLOfDL = dart.constFn(core.List$(ImmutableSeriesLOfDL())))();
    var ListLOfImmutableSeriesLOfDL = () => (ListLOfImmutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfImmutableSeriesLOfDL())))();
    var ImmutableAxisOfDL = () => (ImmutableAxisOfDL = dart.constFn(axis$.ImmutableAxis$(DL())))();
    var ImmutableAxisLOfDL = () => (ImmutableAxisLOfDL = dart.constFn(dart.legacy(ImmutableAxisOfDL())))();
    var ImmutableSeriesLOfDLToNull = () => (ImmutableSeriesLOfDLToNull = dart.constFn(dart.fnType(core.Null, [ImmutableSeriesLOfDL()])))();
    var DLAndSetLOfStringLToNull = () => (DLAndSetLOfStringLToNull = dart.constFn(dart.fnType(core.Null, [DL(), T.SetLOfStringL()])))();
    var DatumDetailsOfDL = () => (DatumDetailsOfDL = dart.constFn(datum_details.DatumDetails$(DL())))();
    var DatumDetailsLOfDL = () => (DatumDetailsLOfDL = dart.constFn(dart.legacy(DatumDetailsOfDL())))();
    var JSArrayOfDatumDetailsLOfDL = () => (JSArrayOfDatumDetailsLOfDL = dart.constFn(_interceptors.JSArray$(DatumDetailsLOfDL())))();
    var DatumDetailsLOfDLToboolL = () => (DatumDetailsLOfDLToboolL = dart.constFn(dart.fnType(T.boolL(), [DatumDetailsLOfDL()])))();
    var BaseAnimatedBarOfDL$RL = () => (BaseAnimatedBarOfDL$RL = dart.constFn(base_bar_renderer_element.BaseAnimatedBar$(DL(), RL())))();
    var BaseAnimatedBarLOfDL$RL = () => (BaseAnimatedBarLOfDL$RL = dart.constFn(dart.legacy(BaseAnimatedBarOfDL$RL())))();
    var JSArrayOfBaseAnimatedBarLOfDL$RL = () => (JSArrayOfBaseAnimatedBarLOfDL$RL = dart.constFn(_interceptors.JSArray$(BaseAnimatedBarLOfDL$RL())))();
    var ListOfDatumDetailsLOfDL = () => (ListOfDatumDetailsLOfDL = dart.constFn(core.List$(DatumDetailsLOfDL())))();
    var BaseAnimatedBarLOfDL$RLToboolL = () => (BaseAnimatedBarLOfDL$RLToboolL = dart.constFn(dart.fnType(T.boolL(), [BaseAnimatedBarLOfDL$RL()])))();
    var BaseAnimatedBarLOfDL$RLToDatumDetailsLOfDL = () => (BaseAnimatedBarLOfDL$RLToDatumDetailsLOfDL = dart.constFn(dart.fnType(DatumDetailsLOfDL(), [BaseAnimatedBarLOfDL$RL()])))();
    var RL = () => (RL = dart.constFn(dart.legacy(R)))();
    var BLToRL = () => (BLToRL = dart.constFn(dart.fnType(RL(), [BL()])))();
    var BL = () => (BL = dart.constFn(dart.legacy(B)))();
    var ListOfBL = () => (ListOfBL = dart.constFn(core.List$(BL())))();
    var ListLOfBL = () => (ListLOfBL = dart.constFn(dart.legacy(ListOfBL())))();
    var IdentityMapOfStringL$ListLOfBL = () => (IdentityMapOfStringL$ListLOfBL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), ListLOfBL())))();
    var JSArrayOfBL = () => (JSArrayOfBL = dart.constFn(_interceptors.JSArray$(BL())))();
    var VoidToListLOfBL = () => (VoidToListLOfBL = dart.constFn(dart.fnType(ListLOfBL(), [])))();
    var BLToboolL = () => (BLToboolL = dart.constFn(dart.fnType(T.boolL(), [BL()])))();
    var StringLAndListLOfBLToNull = () => (StringLAndListLOfBLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), ListLOfBL()])))();
    class BaseBarRenderer extends cartesian_renderer.BaseCartesianRenderer$(dart.legacy(D)) {
      get config() {
        return this[config$];
      }
      set config(value) {
        super.config = value;
      }
      get chart() {
        return this[chart];
      }
      set chart(value) {
        this[chart] = BaseChartLOfDL().as(value);
      }
      preprocessSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        let barGroupIndex = 0;
        let posDomainToStackKeyToDetailsMap = new _js_helper.LinkedMap.new();
        let negDomainToStackKeyToDetailsMap = new _js_helper.LinkedMap.new();
        let categoryToIndexMap = new _js_helper.LinkedMap.new();
        let maxBarStackSize = 0;
        let orderedSeriesList = this.getOrderedSeriesList(MutableSeriesLOfDL(), seriesList);
        orderedSeriesList[$forEach](dart.fn(series => {
          let t0;
          let elements = T.JSArrayOfBaseBarRendererElementL().of([]);
          let domainFn = series.domainFn;
          let measureFn = series.measureFn;
          let measureOffsetFn = series.measureOffsetFn;
          let fillPatternFn = series.fillPatternFn;
          let strokeWidthPxFn = series.strokeWidthPxFn;
          t0 = series;
          t0.dashPatternFn == null ? t0.dashPatternFn = dart.fn(_ => this.config.dashPattern, T.intLToListLOfintL()) : null;
          let stackKey = "__defaultKey__";
          if (dart.test(this.config.grouped) && dart.test(this.config.stacked)) {
            if (series.seriesCategory != null) {
              stackKey = series.seriesCategory;
            }
            barGroupIndex = T.intL().as(categoryToIndexMap[$_get](stackKey));
            if (barGroupIndex == null) {
              barGroupIndex = categoryToIndexMap[$length];
              categoryToIndexMap[$_set](stackKey, barGroupIndex);
            }
          }
          let needsMeasureOffset = false;
          for (let barIndex = 0; barIndex < dart.notNull(series.data[$length]); barIndex = barIndex + 1) {
            let datum = series.data[$_get](barIndex);
            let details = this.getBaseDetails(datum, barIndex);
            details.barStackIndex = 0;
            details.measureOffset = measureOffsetFn(barIndex);
            if (fillPatternFn != null) {
              details.fillPattern = fillPatternFn(barIndex);
            } else {
              details.fillPattern = this.config.fillPattern;
            }
            if (strokeWidthPxFn != null) {
              details.strokeWidthPx = strokeWidthPxFn(barIndex)[$toDouble]();
            } else {
              details.strokeWidthPx = this.config.strokeWidthPx;
            }
            if (dart.test(this.config.stacked)) {
              needsMeasureOffset = true;
              let domain = domainFn(barIndex);
              let measure = measureFn(barIndex);
              let domainToCategoryToDetailsMap = measure == null || dart.notNull(measure) >= 0 ? posDomainToStackKeyToDetailsMap : negDomainToStackKeyToDetailsMap;
              let categoryToDetailsMap = domainToCategoryToDetailsMap[$putIfAbsent](domain, dart.fn(() => new _js_helper.LinkedMap.new(), T.VoidToMapL()));
              let prevDetail = dart.dsend(categoryToDetailsMap, '_get', [stackKey]);
              if (prevDetail != null) {
                details.barStackIndex = T.intL().as(dart.dsend(dart.dload(prevDetail, 'barStackIndex'), '+', [1]));
              }
              details.cumulativeTotal = measure != null ? measure : 0;
              let measureOffset = measureOffsetFn(barIndex);
              if (prevDetail != null) {
                measureOffset = dart.notNull(measureOffset) + dart.notNull(T.numL().as(dart.dload(prevDetail, 'measureOffsetPlusMeasure')));
                details.cumulativeTotal = dart.notNull(details.cumulativeTotal) + dart.notNull(T.numL().as(dart.dload(prevDetail, 'cumulativeTotal')));
              }
              details.measureOffset = measureOffset;
              let measureValue = measure != null ? measure : 0;
              details.measureOffsetPlusMeasure = dart.notNull(measureOffset) + dart.notNull(measureValue);
              dart.dsend(categoryToDetailsMap, '_set', [stackKey, details]);
            }
            maxBarStackSize = math.max(T.intL(), maxBarStackSize, dart.notNull(details.barStackIndex) + 1);
            elements[$add](details);
          }
          if (needsMeasureOffset) {
            series.measureOffsetFn = dart.fn(index => elements[$_get](index).measureOffset, T.intLTonumL());
          }
          series.setAttr(T.intL(), base_bar_renderer.barGroupIndexKey, barGroupIndex);
          series.setAttr(T.StringL(), base_bar_renderer.stackKeyKey, stackKey);
          series.setAttr(T.ListLOfBaseBarRendererElementL(), base_bar_renderer.barElementsKey, elements);
          if (dart.test(this.config.grouped)) {
            barGroupIndex = dart.notNull(barGroupIndex) + 1;
          }
        }, MutableSeriesLOfDLToNull()));
        let numBarGroups = 0;
        if (dart.test(this.config.grouped) && dart.test(this.config.stacked)) {
          numBarGroups = categoryToIndexMap[$length];
        } else if (dart.test(this.config.stacked)) {
          numBarGroups = 1;
        } else {
          numBarGroups = seriesList[$length];
        }
        let barWeights = this[_calculateBarWeights](numBarGroups);
        seriesList[$forEach](dart.fn(series => {
          series.setAttr(T.intL(), base_bar_renderer.barGroupCountKey, numBarGroups);
          if (dart.test(barWeights[$isNotEmpty])) {
            let barGroupIndex = series.getAttr(T.intL(), base_bar_renderer.barGroupIndexKey);
            let barWeight = barWeights[$_get](barGroupIndex);
            let previousBarWeights = dart.test(this.isRtl) ? barWeights[$getRange](dart.notNull(barGroupIndex) + 1, numBarGroups) : barWeights[$getRange](0, barGroupIndex);
            let previousBarWeight = dart.test(previousBarWeights[$isNotEmpty]) ? previousBarWeights[$reduce](dart.fn((a, b) => dart.notNull(a) + dart.notNull(b), T.doubleLAnddoubleLTodoubleL())) : 0.0;
            series.setAttr(T.doubleL(), base_bar_renderer.barGroupWeightKey, barWeight);
            series.setAttr(T.doubleL(), base_bar_renderer.previousBarGroupWeightKey, previousBarWeight);
          }
        }, MutableSeriesLOfDLToNull()));
      }
      [_calculateBarWeights](numBarGroups) {
        let weights = T.JSArrayOfdoubleL().of([]);
        if (this.config.weightPattern != null) {
          if (dart.notNull(numBarGroups) > dart.notNull(this.config.weightPattern[$length])) {
            dart.throw(new core.ArgumentError.new("Number of series exceeds length of weight " + "pattern " + dart.str(this.config.weightPattern)));
          }
          let totalBarWeight = 0;
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            totalBarWeight = totalBarWeight + dart.notNull(this.config.weightPattern[$_get](i));
          }
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            weights[$add](dart.notNull(this.config.weightPattern[$_get](i)) / totalBarWeight);
          }
        } else {
          for (let i = 0; i < dart.notNull(numBarGroups); i = i + 1) {
            weights[$add](1 / dart.notNull(numBarGroups));
          }
        }
        return weights;
      }
      configureDomainAxes(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        super.configureDomainAxes(seriesList);
        if (dart.test(seriesList[$isNotEmpty])) {
          let domainAxis = seriesList[$first].getAttr(T.AxisL(), axis$.domainAxisKey);
          if (!dart.test(domainAxis.hasValidBarChartRangeBandConfig)) {
            domainAxis.setRangeBandConfig(new scale.RangeBandConfig.styleAssignedPercent());
          }
        }
      }
      update(seriesList, isAnimatingThisDraw) {
        ListLOfImmutableSeriesLOfDL().as(seriesList);
        this[_currentKeys][$clear]();
        this[_currentGroupsStackKeys][$clear]();
        let orderedSeriesList = this.getOrderedSeriesList(ImmutableSeriesLOfDL(), seriesList);
        orderedSeriesList[$forEach](dart.fn(series => {
          let t0;
          let domainAxis = ImmutableAxisLOfDL().as(series.getAttr(T.AxisL(), axis$.domainAxisKey));
          let domainFn = series.domainFn;
          let measureAxis = T.ImmutableAxisLOfnumL().as(series.getAttr(T.AxisL(), axis$.measureAxisKey));
          let measureFn = series.measureFn;
          let colorFn = series.colorFn;
          let dashPatternFn = series.dashPatternFn;
          let fillColorFn = series.fillColorFn;
          let seriesStackKey = series.getAttr(T.StringL(), base_bar_renderer.stackKeyKey);
          let barGroupCount = series.getAttr(T.intL(), base_bar_renderer.barGroupCountKey);
          let barGroupIndex = series.getAttr(T.intL(), base_bar_renderer.barGroupIndexKey);
          let previousBarGroupWeight = series.getAttr(T.doubleL(), base_bar_renderer.previousBarGroupWeightKey);
          let barGroupWeight = series.getAttr(T.doubleL(), base_bar_renderer.barGroupWeightKey);
          let measureAxisPosition = measureAxis.getLocation(0.0);
          let elementsList = series.getAttr(T.ListLOfBaseBarRendererElementL(), base_bar_renderer.barElementsKey);
          this[_prevDomainAxis] = domainAxis;
          for (let barIndex = 0; barIndex < dart.notNull(series.data[$length]); barIndex = barIndex + 1) {
            let datum = series.data[$_get](barIndex);
            let details = elementsList[$_get](barIndex);
            let domainValue = domainFn(barIndex);
            let measureValue = measureFn(barIndex);
            let measureIsNull = measureValue == null;
            let measureIsNegative = !measureIsNull && dart.notNull(measureValue) < 0;
            let barStackMapKey = dart.notNull(dart.toString(domainValue)) + "__" + dart.notNull(seriesStackKey) + "__" + (measureIsNegative ? "pos" : "neg") + "__" + dart.toString(barGroupIndex);
            let barKey = barStackMapKey + dart.toString(details.barStackIndex);
            let barStackList = this[_barStackMap][$putIfAbsent](barStackMapKey, dart.fn(() => JSArrayOfBL().of([]), VoidToListLOfBL()));
            let animatingBar = barStackList[$firstWhere](dart.fn(bar => bar.key === barKey, BLToboolL()), {orElse: dart.fn(() => null, T.VoidToNull())});
            if (animatingBar == null) {
              if (!measureIsNull) {
                animatingBar = this.makeAnimatedBar({key: barKey, series: series, datum: datum, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: colorFn(barIndex), dashPattern: dashPatternFn(barIndex), details: RL().as(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: fillColorFn(barIndex), fillPattern: details.fillPattern, measureValue: 0.0, measureOffsetValue: 0.0, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
                barStackList[$add](animatingBar);
              }
            } else {
              t0 = animatingBar;
              (() => {
                t0.datum = datum;
                t0.series = series;
                t0.domainValue = domainValue;
                return t0;
              })();
            }
            if (animatingBar == null) {
              continue;
            }
            this[_currentKeys][$add](barKey);
            this[_currentGroupsStackKeys][$putIfAbsent](domainValue, dart.fn(() => new (T._IdentityHashSetOfStringL()).new(), T.VoidToSetLOfStringL())).add(barStackMapKey);
            let barElement = this.makeBarRendererElement({barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, color: colorFn(barIndex), dashPattern: dashPatternFn(barIndex), details: RL().as(details), domainValue: domainFn(barIndex), domainAxis: domainAxis, domainWidth: domainAxis.rangeBand[$round](), fillColor: fillColorFn(barIndex), fillPattern: details.fillPattern, measureValue: measureValue, measureOffsetValue: details.measureOffset, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, numBarGroups: barGroupCount, strokeWidthPx: details.strokeWidthPx, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative});
            animatingBar.setNewTarget(RL().as(barElement));
          }
        }, ImmutableSeriesLOfDLToNull()));
        this[_barStackMap][$forEach](dart.fn((key, barStackList) => {
          for (let barIndex = 0; barIndex < dart.notNull(barStackList[$length]); barIndex = barIndex + 1) {
            let bar = barStackList[$_get](barIndex);
            if (this[_currentKeys][$contains](bar.key) !== true) {
              bar.animateOut();
            }
          }
        }, StringLAndListLOfBLToNull()));
      }
      onAttach(chart) {
        BaseChartLOfDL().as(chart);
        super.onAttach(chart);
        this.chart = chart;
      }
      paint(canvas, animationPercent) {
        if (animationPercent === 1.0) {
          let keysToRemove = new (T._IdentityHashSetOfStringL()).new();
          this[_barStackMap][$forEach](dart.fn((key, barStackList) => {
            barStackList[$retainWhere](dart.fn(bar => !dart.test(bar.animatingOut) && !dart.test(bar.targetBar.measureIsNull), BLToboolL()));
            if (dart.test(barStackList[$isEmpty])) {
              keysToRemove.add(key);
            }
          }, StringLAndListLOfBLToNull()));
          for (let key of keysToRemove) {
            this[_barStackMap][$remove](key);
            this[_currentKeys][$remove](key);
          }
          this[_currentGroupsStackKeys][$forEach](dart.fn((domain, keys) => {
            keys.removeWhere(dart.bind(keysToRemove, 'contains'));
          }, DLAndSetLOfStringLToNull()));
        }
        this[_barStackMap][$forEach](dart.fn((stackKey, barStack) => {
          let barElements = barStack[$map](RL(), dart.fn(animatingBar => animatingBar.getCurrentBar(animationPercent), BLToRL()))[$toList]();
          if (dart.test(barElements[$isNotEmpty])) {
            this.paintBar(canvas, animationPercent, barElements);
          }
        }, StringLAndListLOfBLToNull()));
      }
      getNearestDatumDetailPerSeries(chartPoint, byDomain, boundsOverride) {
        let nearest = JSArrayOfDatumDetailsLOfDL().of([]);
        if (!dart.test(this.isPointWithinBounds(chartPoint, boundsOverride))) {
          return nearest;
        }
        if (T.OrdinalAxisL().is(this[_prevDomainAxis])) {
          let domainValue = this[_prevDomainAxis].getDomain(dart.test(this.renderingVertically) ? chartPoint.x : chartPoint.y);
          if (domainValue != null) {
            if (dart.test(this.renderingVertically)) {
              nearest = this[_getVerticalDetailsForDomainValue](domainValue, chartPoint);
            } else {
              nearest = this[_getHorizontalDetailsForDomainValue](domainValue, chartPoint);
            }
          }
        } else {
          if (dart.test(this.renderingVertically)) {
            nearest = this[_getVerticalDetailsForDomainValue](null, chartPoint);
          } else {
            nearest = this[_getHorizontalDetailsForDomainValue](null, chartPoint);
          }
          let minRelativeDistance = 1.7976931348623157e+308;
          let minDomainDistance = 1.7976931348623157e+308;
          let minMeasureDistance = 1.7976931348623157e+308;
          let nearestDomain = null;
          for (let detail of nearest) {
            if (dart.test(byDomain)) {
              if (dart.notNull(detail.domainDistance) < dart.notNull(minDomainDistance) || detail.domainDistance == minDomainDistance && dart.notNull(detail.measureDistance) < dart.notNull(minMeasureDistance)) {
                minDomainDistance = detail.domainDistance;
                minMeasureDistance = detail.measureDistance;
                nearestDomain = detail.domain;
              }
            } else {
              if (dart.notNull(detail.relativeDistance) < dart.notNull(minRelativeDistance)) {
                minRelativeDistance = detail.relativeDistance;
                nearestDomain = detail.domain;
              }
            }
          }
          nearest[$retainWhere](dart.fn(d => dart.equals(d.domain, nearestDomain), DatumDetailsLOfDLToboolL()));
        }
        nearest == null ? nearest = JSArrayOfDatumDetailsLOfDL().of([]) : null;
        return nearest;
      }
      [_getSegmentsForDomainValue](domainValue, opts) {
        let t0;
        let where = opts && 'where' in opts ? opts.where : null;
        let matchingSegments = JSArrayOfBaseAnimatedBarLOfDL$RL().of([]);
        let stackKeys = domainValue != null ? this[_currentGroupsStackKeys][$_get](domainValue) : this[_currentGroupsStackKeys][$values][$reduce](dart.fn((allKeys, keys) => {
          let t0;
          t0 = allKeys;
          return (() => {
            t0.addAll(keys);
            return t0;
          })();
        }, T.SetLOfStringLAndSetLOfStringLToSetLOfStringL()));
        t0 = stackKeys;
        t0 == null ? null : t0[$forEach](dart.fn(stackKey => {
          if (where != null) {
            matchingSegments[$addAll](this[_barStackMap][$_get](stackKey)[$where](where));
          } else {
            matchingSegments[$addAll](this[_barStackMap][$_get](stackKey));
          }
        }, T.StringLToNull()));
        return matchingSegments;
      }
      [_getVerticalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsLOfDL().from(this[_getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !dart.test(bar.series.overlaySeries), BaseAnimatedBarLOfDL$RLToboolL())})[$map](DatumDetailsLOfDL(), dart.fn(bar => {
          let barBounds = this.getBoundsForBar(bar.currentBar);
          let segmentDomainDistance = this[_getDistance](chartPoint.x[$round](), barBounds[$left], barBounds[$right]);
          let segmentMeasureDistance = this[_getDistance](chartPoint.y[$round](), barBounds[$top], barBounds[$bottom]);
          let nearestPoint = new (T.PointOfdoubleL()).new(math$.clamp(chartPoint.x, barBounds[$left], barBounds[$right])[$toDouble](), math$.clamp(chartPoint.y, barBounds[$top], barBounds[$bottom])[$toDouble]());
          let relativeDistance = chartPoint.distanceTo(nearestPoint);
          return new (DatumDetailsOfDL()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance, relativeDistance: relativeDistance});
        }, BaseAnimatedBarLOfDL$RLToDatumDetailsLOfDL())));
      }
      [_getHorizontalDetailsForDomainValue](domainValue, chartPoint) {
        return ListOfDatumDetailsLOfDL().from(this[_getSegmentsForDomainValue](domainValue, {where: dart.fn(bar => !dart.test(bar.series.overlaySeries), BaseAnimatedBarLOfDL$RLToboolL())})[$map](dart.dynamic, dart.fn(bar => {
          let barBounds = this.getBoundsForBar(bar.currentBar);
          let segmentDomainDistance = this[_getDistance](chartPoint.y[$round](), barBounds[$top], barBounds[$bottom]);
          let segmentMeasureDistance = this[_getDistance](chartPoint.x[$round](), barBounds[$left], barBounds[$right]);
          return new (DatumDetailsOfDL()).new({series: bar.series, datum: bar.datum, domain: bar.domainValue, domainDistance: segmentDomainDistance, measureDistance: segmentMeasureDistance});
        }, BaseAnimatedBarLOfDL$RLToDatumDetailsLOfDL())));
      }
      [_getDistance](point, min, max) {
        if (dart.notNull(max) >= dart.notNull(point) && dart.notNull(min) <= dart.notNull(point)) {
          return 0.0;
        }
        return (dart.notNull(point) > dart.notNull(max) ? dart.notNull(point) - dart.notNull(max) : dart.notNull(min) - dart.notNull(point))[$toDouble]();
      }
      getOrderedSeriesList(S, seriesList) {
        return dart.test(this.renderingVertically) && dart.test(this.config.stacked) ? dart.test(this.config.grouped) ? new (base_bar_renderer._ReversedSeriesIterable$(dart.legacy(S))).new(seriesList) : seriesList[$reversed] : seriesList;
      }
      get isRtl() {
        return this.chart.context.isRtl;
      }
    }
    (BaseBarRenderer.new = function(opts) {
      let t0, t0$;
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      this[chart] = null;
      this[_barStackMap] = new (IdentityMapOfStringL$ListLOfBL()).new();
      this[_currentKeys] = T.JSArrayOfStringL().of([]);
      this[_currentGroupsStackKeys] = new (LinkedMapOfDL$SetLOfStringL()).new();
      this[_prevDomainAxis] = null;
      this[config$] = config;
      BaseBarRenderer.__proto__.new.call(this, {rendererId: rendererId, layoutPaintOrder: layoutPaintOrder, symbolRenderer: (t0$ = (t0 = config, t0 == null ? null : t0.symbolRenderer), t0$ == null ? new symbol_renderer.RoundedRectSymbolRenderer.new() : t0$)});
      ;
    }).prototype = BaseBarRenderer.prototype;
    dart.addTypeTests(BaseBarRenderer);
    BaseBarRenderer.prototype[_is_BaseBarRenderer_default] = true;
    dart.addTypeCaches(BaseBarRenderer);
    dart.setMethodSignature(BaseBarRenderer, () => ({
      __proto__: dart.getMethods(BaseBarRenderer.__proto__),
      [_calculateBarWeights]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(core.int)]),
      update: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.bool)]),
      paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.double)]),
      getNearestDatumDetailPerSeries: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.bool), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      [_getSegmentsForDomainValue]: dart.fnType(dart.legacy(core.List$(dart.legacy(base_bar_renderer_element.BaseAnimatedBar$(dart.legacy(D), dart.legacy(R))))), [dart.legacy(D)], {where: dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(base_bar_renderer_element.BaseAnimatedBar$(dart.legacy(D), dart.legacy(R)))]))}, {}),
      [_getVerticalDetailsForDomainValue]: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(D), dart.legacy(math.Point$(dart.legacy(core.double)))]),
      [_getHorizontalDetailsForDomainValue]: dart.fnType(dart.legacy(core.List$(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))))), [dart.legacy(D), dart.legacy(math.Point$(dart.legacy(core.double)))]),
      [_getDistance]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.int)]),
      getOrderedSeriesList: dart.gFnType(S => [dart.legacy(core.Iterable$(dart.legacy(S))), [dart.legacy(core.List$(dart.legacy(S)))]], S => [dart.legacy(processed_series.ImmutableSeries)])
    }));
    dart.setGetterSignature(BaseBarRenderer, () => ({
      __proto__: dart.getGetters(BaseBarRenderer.__proto__),
      isRtl: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(BaseBarRenderer, I[2]);
    dart.setFieldSignature(BaseBarRenderer, () => ({
      __proto__: dart.getFields(BaseBarRenderer.__proto__),
      config: dart.finalFieldType(dart.legacy(base_bar_renderer_config.BaseBarRendererConfig)),
      chart: dart.fieldType(dart.legacy(base_chart.BaseChart$(dart.legacy(D)))),
      [_barStackMap]: dart.finalFieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(B)))))),
      [_currentKeys]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
      [_currentGroupsStackKeys]: dart.finalFieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(D), dart.legacy(core.Set$(dart.legacy(core.String)))))),
      [_prevDomainAxis]: dart.fieldType(dart.legacy(axis$.ImmutableAxis$(dart.legacy(D))))
    }));
    return BaseBarRenderer;
  });
  base_bar_renderer.BaseBarRenderer = base_bar_renderer.BaseBarRenderer$();
  dart.addTypeTests(base_bar_renderer.BaseBarRenderer, _is_BaseBarRenderer_default);
  const _is__ReversedSeriesIterable_default = Symbol('_is__ReversedSeriesIterable_default');
  base_bar_renderer._ReversedSeriesIterable$ = dart.generic(S => {
    var SL = () => (SL = dart.constFn(dart.legacy(S)))();
    var _ReversedSeriesIteratorOfSL = () => (_ReversedSeriesIteratorOfSL = dart.constFn(base_bar_renderer._ReversedSeriesIterator$(SL())))();
    class _ReversedSeriesIterable extends core.Iterable$(dart.legacy(S)) {
      get iterator() {
        return new (_ReversedSeriesIteratorOfSL()).new(this.seriesList);
      }
    }
    (_ReversedSeriesIterable.new = function(seriesList) {
      this.seriesList = seriesList;
      _ReversedSeriesIterable.__proto__.new.call(this);
      ;
    }).prototype = _ReversedSeriesIterable.prototype;
    dart.addTypeTests(_ReversedSeriesIterable);
    _ReversedSeriesIterable.prototype[_is__ReversedSeriesIterable_default] = true;
    dart.addTypeCaches(_ReversedSeriesIterable);
    dart.setGetterSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterable.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(S))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(S)))
    }));
    dart.setLibraryUri(_ReversedSeriesIterable, I[2]);
    dart.setFieldSignature(_ReversedSeriesIterable, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterable.__proto__),
      seriesList: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(S))))
    }));
    dart.defineExtensionAccessors(_ReversedSeriesIterable, ['iterator']);
    return _ReversedSeriesIterable;
  });
  base_bar_renderer._ReversedSeriesIterable = base_bar_renderer._ReversedSeriesIterable$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterable, _is__ReversedSeriesIterable_default);
  var _visitIndex = dart.privateName(base_bar_renderer, "_visitIndex");
  var _current = dart.privateName(base_bar_renderer, "_current");
  var _list = dart.privateName(base_bar_renderer, "_list");
  const _is__ReversedSeriesIterator_default = Symbol('_is__ReversedSeriesIterator_default');
  base_bar_renderer._ReversedSeriesIterator$ = dart.generic(S => {
    class _ReversedSeriesIterator extends core.Iterator$(dart.legacy(S)) {
      moveNext() {
        this[_current] = this[_current] == null ? 0 : dart.notNull(this[_current]) + 1;
        return dart.notNull(this[_current]) < dart.notNull(this[_list][$length]);
      }
      get current() {
        return this[_list][$_get](this[_visitIndex][$_get](this[_current]));
      }
    }
    (_ReversedSeriesIterator.new = function(list) {
      this[_visitIndex] = T.JSArrayOfintL().of([]);
      this[_current] = null;
      this[_list] = list;
      let categoryAndSeriesIndexMap = new (T.IdentityMapOfStringL$ListLOfintL()).new();
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        categoryAndSeriesIndexMap[$putIfAbsent](list[$_get](i).seriesCategory, dart.fn(() => T.JSArrayOfintL().of([]), T.VoidToListLOfintL()))[$add](i);
      }
      categoryAndSeriesIndexMap[$forEach](dart.fn((_, indices) => this[_visitIndex][$addAll](indices[$reversed]), T.StringLAndListLOfintLTovoid()));
    }).prototype = _ReversedSeriesIterator.prototype;
    dart.addTypeTests(_ReversedSeriesIterator);
    _ReversedSeriesIterator.prototype[_is__ReversedSeriesIterator_default] = true;
    dart.addTypeCaches(_ReversedSeriesIterator);
    dart.setMethodSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getMethods(_ReversedSeriesIterator.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getGetters(_ReversedSeriesIterator.__proto__),
      current: dart.legacy(S)
    }));
    dart.setLibraryUri(_ReversedSeriesIterator, I[2]);
    dart.setFieldSignature(_ReversedSeriesIterator, () => ({
      __proto__: dart.getFields(_ReversedSeriesIterator.__proto__),
      [_list]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(S)))),
      [_visitIndex]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      [_current]: dart.fieldType(dart.legacy(core.int))
    }));
    return _ReversedSeriesIterator;
  });
  base_bar_renderer._ReversedSeriesIterator = base_bar_renderer._ReversedSeriesIterator$();
  dart.addTypeTests(base_bar_renderer._ReversedSeriesIterator, _is__ReversedSeriesIterator_default);
  var TypedKey_uniqueKey = dart.privateName(typed_registry, "TypedKey.uniqueKey");
  dart.defineLazy(base_bar_renderer, {
    /*base_bar_renderer.barGroupIndexKey*/get barGroupIndexKey() {
      return C[0] || CT.C0;
    },
    /*base_bar_renderer.barGroupCountKey*/get barGroupCountKey() {
      return C[1] || CT.C1;
    },
    /*base_bar_renderer.barGroupWeightKey*/get barGroupWeightKey() {
      return C[2] || CT.C2;
    },
    /*base_bar_renderer.previousBarGroupWeightKey*/get previousBarGroupWeightKey() {
      return C[3] || CT.C3;
    },
    /*base_bar_renderer.stackKeyKey*/get stackKeyKey() {
      return C[4] || CT.C4;
    },
    /*base_bar_renderer.barElementsKey*/get barElementsKey() {
      return C[5] || CT.C5;
    }
  }, true);
  const _is_BarRendererDecorator_default = Symbol('_is_BarRendererDecorator_default');
  bar_renderer_decorator.BarRendererDecorator$ = dart.generic(D => {
    class BarRendererDecorator extends core.Object {}
    (BarRendererDecorator.new = function() {
      ;
    }).prototype = BarRendererDecorator.prototype;
    dart.addTypeTests(BarRendererDecorator);
    BarRendererDecorator.prototype[_is_BarRendererDecorator_default] = true;
    dart.addTypeCaches(BarRendererDecorator);
    dart.setLibraryUri(BarRendererDecorator, I[3]);
    return BarRendererDecorator;
  });
  bar_renderer_decorator.BarRendererDecorator = bar_renderer_decorator.BarRendererDecorator$();
  dart.addTypeTests(bar_renderer_decorator.BarRendererDecorator, _is_BarRendererDecorator_default);
  var cornerStrategy$ = dart.privateName(bar_renderer_config, "BarRendererConfig.cornerStrategy");
  var barRendererDecorator$ = dart.privateName(bar_renderer_config, "BarRendererConfig.barRendererDecorator");
  var ConstCornerStrategy_radius = dart.privateName(bar_renderer_config, "ConstCornerStrategy.radius");
  const _is_BarRendererConfig_default = Symbol('_is_BarRendererConfig_default');
  bar_renderer_config.BarRendererConfig$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var BarRendererOfDL = () => (BarRendererOfDL = dart.constFn(bar_renderer.BarRenderer$(DL())))();
    class BarRendererConfig extends base_bar_renderer_config.BaseBarRendererConfig$(dart.legacy(D)) {
      get cornerStrategy() {
        return this[cornerStrategy$];
      }
      set cornerStrategy(value) {
        super.cornerStrategy = value;
      }
      get barRendererDecorator() {
        return this[barRendererDecorator$];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      build() {
        return BarRendererOfDL().new({config: this, rendererId: this.customRendererId});
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!T.BarRendererConfigL().is(other)) {
          return false;
        }
        return dart.equals(dart.dload(other, 'cornerStrategy'), this.cornerStrategy) && super._equals(other);
      }
      get hashCode() {
        let t0, t0$;
        let hash = super[$hashCode];
        hash = dart.notNull(hash) * 31 + dart.notNull((t0$ = (t0 = this.cornerStrategy, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$));
        return hash;
      }
    }
    (BarRendererConfig.new = function(opts) {
      let t0, t0$;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let cornerStrategy = opts && 'cornerStrategy' in opts ? opts.cornerStrategy : null;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : 10;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let stackHorizontalSeparator = opts && 'stackHorizontalSeparator' in opts ? opts.stackHorizontalSeparator : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let barRendererDecorator = opts && 'barRendererDecorator' in opts ? opts.barRendererDecorator : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[barRendererDecorator$] = barRendererDecorator;
      this[cornerStrategy$] = (t0 = cornerStrategy, t0 == null ? C[6] || CT.C6 : t0);
      BarRendererConfig.__proto__.new.call(this, {customRendererId: customRendererId, groupingType: (t0$ = groupingType, t0$ == null ? base_bar_renderer_config.BarGroupingType.grouped : t0$), layoutPaintOrder: layoutPaintOrder, minBarLengthPx: minBarLengthPx, fillPattern: fillPattern, stackHorizontalSeparator: stackHorizontalSeparator, strokeWidthPx: strokeWidthPx, symbolRenderer: symbolRenderer, weightPattern: weightPattern});
      ;
    }).prototype = BarRendererConfig.prototype;
    dart.addTypeTests(BarRendererConfig);
    BarRendererConfig.prototype[_is_BarRendererConfig_default] = true;
    dart.addTypeCaches(BarRendererConfig);
    dart.setMethodSignature(BarRendererConfig, () => ({
      __proto__: dart.getMethods(BarRendererConfig.__proto__),
      build: dart.fnType(dart.legacy(bar_renderer.BarRenderer$(dart.legacy(D))), [])
    }));
    dart.setGetterSignature(BarRendererConfig, () => ({
      __proto__: dart.getGetters(BarRendererConfig.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(BarRendererConfig, I[4]);
    dart.setFieldSignature(BarRendererConfig, () => ({
      __proto__: dart.getFields(BarRendererConfig.__proto__),
      cornerStrategy: dart.finalFieldType(dart.legacy(bar_renderer_config.CornerStrategy)),
      barRendererDecorator: dart.finalFieldType(dart.legacy(bar_renderer_decorator.BarRendererDecorator))
    }));
    dart.defineExtensionMethods(BarRendererConfig, ['_equals']);
    dart.defineExtensionAccessors(BarRendererConfig, ['hashCode']);
    return BarRendererConfig;
  });
  bar_renderer_config.BarRendererConfig = bar_renderer_config.BarRendererConfig$();
  dart.addTypeTests(bar_renderer_config.BarRendererConfig, _is_BarRendererConfig_default);
  bar_renderer_config.CornerStrategy = class CornerStrategy extends core.Object {};
  (bar_renderer_config.CornerStrategy.new = function() {
    ;
  }).prototype = bar_renderer_config.CornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.CornerStrategy);
  dart.addTypeCaches(bar_renderer_config.CornerStrategy);
  dart.setLibraryUri(bar_renderer_config.CornerStrategy, I[4]);
  const radius$ = ConstCornerStrategy_radius;
  bar_renderer_config.ConstCornerStrategy = class ConstCornerStrategy extends core.Object {
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    getRadius(_) {
      return this.radius;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!T.ConstCornerStrategyL().is(other)) {
        return false;
      }
      return dart.equals(dart.dload(other, 'radius'), this.radius);
    }
    get hashCode() {
      return dart.hashCode(this.radius);
    }
  };
  (bar_renderer_config.ConstCornerStrategy.new = function(radius) {
    this[radius$] = radius;
    ;
  }).prototype = bar_renderer_config.ConstCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.ConstCornerStrategy);
  dart.addTypeCaches(bar_renderer_config.ConstCornerStrategy);
  bar_renderer_config.ConstCornerStrategy[dart.implements] = () => [bar_renderer_config.CornerStrategy];
  dart.setMethodSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getMethods(bar_renderer_config.ConstCornerStrategy.__proto__),
    getRadius: dart.fnType(dart.legacy(core.int), [dart.legacy(core.int)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getGetters(bar_renderer_config.ConstCornerStrategy.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(bar_renderer_config.ConstCornerStrategy, I[4]);
  dart.setFieldSignature(bar_renderer_config.ConstCornerStrategy, () => ({
    __proto__: dart.getFields(bar_renderer_config.ConstCornerStrategy.__proto__),
    radius: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(bar_renderer_config.ConstCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.ConstCornerStrategy, ['hashCode']);
  bar_renderer_config.NoCornerStrategy = class NoCornerStrategy extends bar_renderer_config.ConstCornerStrategy {
    _equals(other) {
      if (other == null) return false;
      return T.NoCornerStrategyL().is(other) ? true : false;
    }
    get hashCode() {
      return 31;
    }
  };
  (bar_renderer_config.NoCornerStrategy.new = function() {
    bar_renderer_config.NoCornerStrategy.__proto__.new.call(this, 0);
    ;
  }).prototype = bar_renderer_config.NoCornerStrategy.prototype;
  dart.addTypeTests(bar_renderer_config.NoCornerStrategy);
  dart.addTypeCaches(bar_renderer_config.NoCornerStrategy);
  dart.setLibraryUri(bar_renderer_config.NoCornerStrategy, I[4]);
  dart.defineExtensionMethods(bar_renderer_config.NoCornerStrategy, ['_equals']);
  dart.defineExtensionAccessors(bar_renderer_config.NoCornerStrategy, ['hashCode']);
  var barRendererDecorator = dart.privateName(bar_renderer, "BarRenderer.barRendererDecorator");
  var _barGroupInnerPadding = dart.privateName(bar_renderer, "_barGroupInnerPadding");
  var _stackedBarPadding = dart.privateName(bar_renderer, "_stackedBarPadding");
  var _getBarBounds = dart.privateName(bar_renderer, "_getBarBounds");
  var _getBarStackBounds = dart.privateName(bar_renderer, "_getBarStackBounds");
  var series$ = dart.privateName(bar_renderer, "BarRendererElement.series");
  var bounds = dart.privateName(bar_renderer, "BarRendererElement.bounds");
  var roundPx = dart.privateName(bar_renderer, "BarRendererElement.roundPx");
  var index = dart.privateName(bar_renderer, "BarRendererElement.index");
  var _datum = dart.privateName(bar_renderer, "_datum");
  const _is_BarRendererElement_default = Symbol('_is_BarRendererElement_default');
  bar_renderer.BarRendererElement$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var ImmutableSeriesOfDL = () => (ImmutableSeriesOfDL = dart.constFn(processed_series.ImmutableSeries$(DL())))();
    var ImmutableSeriesLOfDL = () => (ImmutableSeriesLOfDL = dart.constFn(dart.legacy(ImmutableSeriesOfDL())))();
    class BarRendererElement extends base_bar_renderer_element.BaseBarRendererElement {
      get series() {
        return this[series$];
      }
      set series(value) {
        this[series$] = ImmutableSeriesLOfDL().as(value);
      }
      get bounds() {
        return this[bounds];
      }
      set bounds(value) {
        this[bounds] = value;
      }
      get roundPx() {
        return this[roundPx];
      }
      set roundPx(value) {
        this[roundPx] = value;
      }
      get index() {
        return this[index];
      }
      set index(value) {
        this[index] = value;
      }
      get datum() {
        return this[_datum];
      }
      set datum(datum) {
        let t0, t0$;
        this[_datum] = datum;
        this.index = (t0$ = (t0 = this.series, t0 == null ? null : t0.data), t0$ == null ? null : t0$[$indexOf](datum));
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let localPrevious = T.BarRendererElementL().as(previous);
        let localTarget = T.BarRendererElementL().as(target);
        let previousBounds = localPrevious.bounds;
        let targetBounds = localTarget.bounds;
        let top = (dart.notNull(targetBounds[$top]) - dart.notNull(previousBounds[$top])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$top]);
        let right = (dart.notNull(targetBounds[$right]) - dart.notNull(previousBounds[$right])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$right]);
        let bottom = (dart.notNull(targetBounds[$bottom]) - dart.notNull(previousBounds[$bottom])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$bottom]);
        let left = (dart.notNull(targetBounds[$left]) - dart.notNull(previousBounds[$left])) * dart.notNull(animationPercent) + dart.notNull(previousBounds[$left]);
        this.bounds = new (T.RectangleOfintL()).new(left[$round](), top[$round](), (right - left)[$round](), (bottom - top)[$round]());
        this.roundPx = localTarget.roundPx;
        super.updateAnimationPercent(previous, target, animationPercent);
      }
    }
    (BarRendererElement.new = function() {
      this[series$] = null;
      this[bounds] = null;
      this[roundPx] = null;
      this[index] = null;
      this[_datum] = null;
      BarRendererElement.__proto__.new.call(this);
      ;
    }).prototype = BarRendererElement.prototype;
    (BarRendererElement.clone = function(other) {
      this[series$] = null;
      this[bounds] = null;
      this[roundPx] = null;
      this[index] = null;
      this[_datum] = null;
      BarRendererElement.__proto__.clone.call(this, other);
      this.series = ImmutableSeriesLOfDL().as(other.series);
      this.bounds = other.bounds;
      this.roundPx = other.roundPx;
      this.index = other.index;
      this[_datum] = other[_datum];
    }).prototype = BarRendererElement.prototype;
    dart.addTypeTests(BarRendererElement);
    BarRendererElement.prototype[_is_BarRendererElement_default] = true;
    dart.addTypeCaches(BarRendererElement);
    BarRendererElement[dart.implements] = () => [bar_renderer.ImmutableBarRendererElement$(dart.legacy(D))];
    dart.setGetterSignature(BarRendererElement, () => ({
      __proto__: dart.getGetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setSetterSignature(BarRendererElement, () => ({
      __proto__: dart.getSetters(BarRendererElement.__proto__),
      datum: dart.dynamic
    }));
    dart.setLibraryUri(BarRendererElement, I[5]);
    dart.setFieldSignature(BarRendererElement, () => ({
      __proto__: dart.getFields(BarRendererElement.__proto__),
      series: dart.fieldType(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D)))),
      bounds: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      roundPx: dart.fieldType(dart.legacy(core.int)),
      index: dart.fieldType(dart.legacy(core.int)),
      [_datum]: dart.fieldType(dart.dynamic)
    }));
    return BarRendererElement;
  });
  bar_renderer.BarRendererElement = bar_renderer.BarRendererElement$();
  dart.addTypeTests(bar_renderer.BarRendererElement, _is_BarRendererElement_default);
  const _is_AnimatedBar_default = Symbol('_is_AnimatedBar_default');
  bar_renderer.AnimatedBar$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var BarRendererElementOfDL = () => (BarRendererElementOfDL = dart.constFn(bar_renderer.BarRendererElement$(DL())))();
    class AnimatedBar extends base_bar_renderer_element.BaseAnimatedBar$(dart.legacy(D), dart.legacy(bar_renderer.BarRendererElement$(dart.legacy(D)))) {
      animateElementToMeasureAxisPosition(target) {
        T.BaseBarRendererElementL().as(target);
        let localTarget = T.BarRendererElementL().as(target);
        localTarget.bounds = new (T.RectangleOfintL()).new(dart.notNull(localTarget.bounds[$left]) + (dart.notNull(localTarget.bounds[$width]) / 2)[$round](), localTarget.measureAxisPosition[$round](), 0, 0);
      }
      getCurrentBar(animationPercent) {
        let bar = super.getCurrentBar(animationPercent);
        bar.series = this.series;
        bar.datum = this.datum;
        return bar;
      }
      clone(bar) {
        T.BarRendererElementL().as(bar);
        return new (BarRendererElementOfDL()).clone(bar);
      }
    }
    (AnimatedBar.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
      AnimatedBar.__proto__.new.call(this, {key: key, datum: datum, series: series, domainValue: domainValue});
      ;
    }).prototype = AnimatedBar.prototype;
    dart.addTypeTests(AnimatedBar);
    AnimatedBar.prototype[_is_AnimatedBar_default] = true;
    dart.addTypeCaches(AnimatedBar);
    dart.setMethodSignature(AnimatedBar, () => ({
      __proto__: dart.getMethods(AnimatedBar.__proto__),
      animateElementToMeasureAxisPosition: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      clone: dart.fnType(dart.legacy(bar_renderer.BarRendererElement$(dart.legacy(D))), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(AnimatedBar, I[5]);
    return AnimatedBar;
  });
  bar_renderer.AnimatedBar = bar_renderer.AnimatedBar$();
  dart.addTypeTests(bar_renderer.AnimatedBar, _is_AnimatedBar_default);
  const _is_BarRenderer_default = Symbol('_is_BarRenderer_default');
  bar_renderer.BarRenderer$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var MutableSeriesOfDL = () => (MutableSeriesOfDL = dart.constFn(processed_series.MutableSeries$(DL())))();
    var MutableSeriesLOfDL = () => (MutableSeriesLOfDL = dart.constFn(dart.legacy(MutableSeriesOfDL())))();
    var ListOfMutableSeriesLOfDL = () => (ListOfMutableSeriesLOfDL = dart.constFn(core.List$(MutableSeriesLOfDL())))();
    var ListLOfMutableSeriesLOfDL = () => (ListLOfMutableSeriesLOfDL = dart.constFn(dart.legacy(ListOfMutableSeriesLOfDL())))();
    var DatumDetailsOfDL = () => (DatumDetailsOfDL = dart.constFn(datum_details.DatumDetails$(DL())))();
    var DatumDetailsLOfDL = () => (DatumDetailsLOfDL = dart.constFn(dart.legacy(DatumDetailsOfDL())))();
    var SeriesDatumOfDL = () => (SeriesDatumOfDL = dart.constFn(series_datum.SeriesDatum$(DL())))();
    var SeriesDatumLOfDL = () => (SeriesDatumLOfDL = dart.constFn(dart.legacy(SeriesDatumOfDL())))();
    var ImmutableAxisOfDL = () => (ImmutableAxisOfDL = dart.constFn(axis$.ImmutableAxis$(DL())))();
    var ImmutableAxisLOfDL = () => (ImmutableAxisLOfDL = dart.constFn(dart.legacy(ImmutableAxisOfDL())))();
    var BarRendererElementOfDL = () => (BarRendererElementOfDL = dart.constFn(bar_renderer.BarRendererElement$(DL())))();
    var ImmutableSeriesOfDL = () => (ImmutableSeriesOfDL = dart.constFn(processed_series.ImmutableSeries$(DL())))();
    var ImmutableSeriesLOfDL = () => (ImmutableSeriesLOfDL = dart.constFn(dart.legacy(ImmutableSeriesOfDL())))();
    var BarRendererElementLOfDL = () => (BarRendererElementLOfDL = dart.constFn(dart.legacy(BarRendererElementOfDL())))();
    var AnimatedBarOfDL = () => (AnimatedBarOfDL = dart.constFn(bar_renderer.AnimatedBar$(DL())))();
    var IterableOfBarRendererElementLOfDL = () => (IterableOfBarRendererElementLOfDL = dart.constFn(core.Iterable$(BarRendererElementLOfDL())))();
    var IterableLOfBarRendererElementLOfDL = () => (IterableLOfBarRendererElementLOfDL = dart.constFn(dart.legacy(IterableOfBarRendererElementLOfDL())))();
    class BarRenderer extends base_bar_renderer.BaseBarRenderer$(dart.legacy(D), dart.legacy(bar_renderer.BarRendererElement$(dart.legacy(D))), dart.legacy(bar_renderer.AnimatedBar$(dart.legacy(D)))) {
      get barRendererDecorator() {
        return this[barRendererDecorator];
      }
      set barRendererDecorator(value) {
        super.barRendererDecorator = value;
      }
      static new(opts) {
        let config = opts && 'config' in opts ? opts.config : null;
        let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
        rendererId == null ? rendererId = "bar" : null;
        config == null ? config = new bar_renderer_config.BarRendererConfig.new() : null;
        return new (bar_renderer.BarRenderer$(dart.legacy(D))).internal({config: config, rendererId: rendererId});
      }
      configureSeries(seriesList) {
        ListLOfMutableSeriesLOfDL().as(seriesList);
        this.assignMissingColors(this.getOrderedSeriesList(MutableSeriesLOfDL(), seriesList), {emptyCategoryUsesSinglePalette: true});
      }
      addPositionToDetailsForSeriesDatum(details, seriesDatum) {
        DatumDetailsLOfDL().as(details);
        SeriesDatumLOfDL().as(seriesDatum);
        let series = details.series;
        let domainAxis = ImmutableAxisLOfDL().as(series.getAttr(T.AxisL(), axis$.domainAxisKey));
        let measureAxis = T.ImmutableAxisLOfnumL().as(series.getAttr(T.AxisL(), axis$.measureAxisKey));
        let barGroupIndex = series.getAttr(T.intL(), base_bar_renderer.barGroupIndexKey);
        let previousBarGroupWeight = series.getAttr(T.doubleL(), base_bar_renderer.previousBarGroupWeightKey);
        let barGroupWeight = series.getAttr(T.doubleL(), base_bar_renderer.barGroupWeightKey);
        let numBarGroups = series.getAttr(T.intL(), base_bar_renderer.barGroupCountKey);
        let bounds = this[_getBarBounds](details.domain, domainAxis, domainAxis.rangeBand[$round](), details.measure, details.measureOffset, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
        let chartPosition = null;
        if (dart.test(this.renderingVertically)) {
          chartPosition = new (T.PointOfdoubleL()).new((dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2)[$toDouble](), bounds[$top][$toDouble]());
        } else {
          chartPosition = new (T.PointOfdoubleL()).new(dart.test(this.isRtl) ? bounds[$left][$toDouble]() : bounds[$right][$toDouble](), (dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2)[$toDouble]());
        }
        return DatumDetailsOfDL().from(details, {chartPosition: chartPosition});
      }
      getBaseDetails(datum, index) {
        return new (BarRendererElementOfDL()).new();
      }
      get cornerStrategy() {
        return T.BarRendererConfigL().as(this.config).cornerStrategy;
      }
      makeAnimatedBar(opts) {
        let t0;
        let key = opts && 'key' in opts ? opts.key : null;
        let series = opts && 'series' in opts ? opts.series : null;
        ImmutableSeriesLOfDL().as(series);
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementLOfDL().as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DL().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisLOfDL().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t0 = new (AnimatedBarOfDL()).new({key: key, datum: datum, series: series, domainValue: domainValue});
        return (() => {
          t0.setNewTarget(this.makeBarRendererElement({color: color, dashPattern: dashPattern, details: details, domainValue: domainValue, domainAxis: domainAxis, domainWidth: domainWidth, measureValue: measureValue, measureOffsetValue: measureOffsetValue, measureAxisPosition: measureAxisPosition, measureAxis: measureAxis, fillColor: fillColor, fillPattern: fillPattern, strokeWidthPx: strokeWidthPx, barGroupIndex: barGroupIndex, previousBarGroupWeight: previousBarGroupWeight, barGroupWeight: barGroupWeight, numBarGroups: numBarGroups, measureIsNull: measureIsNull, measureIsNegative: measureIsNegative}));
          return t0;
        })();
      }
      makeBarRendererElement(opts) {
        let t0;
        let color = opts && 'color' in opts ? opts.color : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let details = opts && 'details' in opts ? opts.details : null;
        BarRendererElementLOfDL().as(details);
        let domainValue = opts && 'domainValue' in opts ? opts.domainValue : null;
        DL().as(domainValue);
        let domainAxis = opts && 'domainAxis' in opts ? opts.domainAxis : null;
        ImmutableAxisLOfDL().as(domainAxis);
        let domainWidth = opts && 'domainWidth' in opts ? opts.domainWidth : null;
        let measureValue = opts && 'measureValue' in opts ? opts.measureValue : null;
        let measureOffsetValue = opts && 'measureOffsetValue' in opts ? opts.measureOffsetValue : null;
        let measureAxis = opts && 'measureAxis' in opts ? opts.measureAxis : null;
        let measureAxisPosition = opts && 'measureAxisPosition' in opts ? opts.measureAxisPosition : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        let barGroupIndex = opts && 'barGroupIndex' in opts ? opts.barGroupIndex : null;
        let previousBarGroupWeight = opts && 'previousBarGroupWeight' in opts ? opts.previousBarGroupWeight : null;
        let barGroupWeight = opts && 'barGroupWeight' in opts ? opts.barGroupWeight : null;
        let numBarGroups = opts && 'numBarGroups' in opts ? opts.numBarGroups : null;
        let measureIsNull = opts && 'measureIsNull' in opts ? opts.measureIsNull : null;
        let measureIsNegative = opts && 'measureIsNegative' in opts ? opts.measureIsNegative : null;
        t0 = new (BarRendererElementOfDL()).new();
        return (() => {
          t0.color = color;
          t0.dashPattern = dashPattern;
          t0.fillColor = fillColor;
          t0.fillPattern = fillPattern;
          t0.measureAxisPosition = measureAxisPosition;
          t0.roundPx = details.roundPx;
          t0.strokeWidthPx = strokeWidthPx;
          t0.measureIsNull = measureIsNull;
          t0.measureIsNegative = measureIsNegative;
          t0.bounds = this[_getBarBounds](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups);
          return t0;
        })();
      }
      paintBar(canvas, animationPercent, barElements) {
        let t0;
        IterableLOfBarRendererElementLOfDL().as(barElements);
        let bars = T.JSArrayOfCanvasRectL().of([]);
        let unmodifiedBar = dart.test(this.renderingVertically) ? barElements[$first] : barElements[$last];
        let maxBarWidth = 0;
        let measureIsNegative = false;
        for (let bar of barElements) {
          let bounds = bar.bounds;
          measureIsNegative = measureIsNegative || dart.test(bar.measureIsNegative);
          if (!dart.equals(bar, unmodifiedBar)) {
            bounds = dart.test(this.renderingVertically) ? new (T.RectangleOfintL()).new(bar.bounds[$left], math.max(T.intL(), 0, dart.notNull(bar.bounds[$top]) + dart.notNull(measureIsNegative ? this[_stackedBarPadding] : 0)), bar.bounds[$width], math.max(T.intL(), 0, dart.notNull(bar.bounds[$height]) - dart.notNull(this[_stackedBarPadding]))) : new (T.RectangleOfintL()).new(math.max(T.intL(), 0, dart.notNull(bar.bounds[$left]) + dart.notNull(measureIsNegative ? this[_stackedBarPadding] : 0)), bar.bounds[$top], math.max(T.intL(), 0, dart.notNull(bar.bounds[$width]) - dart.notNull(this[_stackedBarPadding])), bar.bounds[$height]);
          }
          bars[$add](new canvas_shapes.CanvasRect.new(bounds, {dashPattern: bar.dashPattern, fill: bar.fillColor, pattern: bar.fillPattern, stroke: bar.color, strokeWidthPx: bar.strokeWidthPx}));
          maxBarWidth = math.max(T.intL(), maxBarWidth, dart.test(this.renderingVertically) ? bounds[$width] : bounds[$height]);
        }
        let roundTopLeft = null;
        let roundTopRight = null;
        let roundBottomLeft = null;
        let roundBottomRight = null;
        if (measureIsNegative) {
          roundTopLeft = !dart.test(this.renderingVertically) && !dart.test(this.isRtl) ? true : false;
          roundTopRight = !dart.test(this.renderingVertically) && dart.test(this.isRtl) ? true : false;
          roundBottomLeft = dart.test(this.renderingVertically) || !dart.test(this.isRtl) ? true : false;
          roundBottomRight = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? true : false;
        } else {
          roundTopLeft = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? true : false;
          roundTopRight = dart.test(this.isRtl) ? false : true;
          roundBottomLeft = dart.test(this.isRtl) ? true : false;
          roundBottomRight = dart.test(this.renderingVertically) || dart.test(this.isRtl) ? false : true;
        }
        let barStack = canvas_shapes.CanvasBarStack.new(bars, {radius: this.cornerStrategy.getRadius(maxBarWidth), stackedBarPadding: this[_stackedBarPadding], roundTopLeft: roundTopLeft, roundTopRight: roundTopRight, roundBottomLeft: roundBottomLeft, roundBottomRight: roundBottomRight});
        let barOutsideBounds = dart.test(this.renderingVertically) ? dart.notNull(barStack.fullStackRect[$left]) < dart.notNull(this.componentBounds[$left]) || dart.notNull(barStack.fullStackRect[$right]) > dart.notNull(this.componentBounds[$right]) : dart.notNull(barStack.fullStackRect[$top]) < dart.notNull(this.componentBounds[$top]) || dart.notNull(barStack.fullStackRect[$bottom]) > dart.notNull(this.componentBounds[$bottom]);
        if (barOutsideBounds) {
          let clipBounds = this[_getBarStackBounds](barStack.fullStackRect);
          if (dart.notNull(clipBounds[$width]) <= 0 || dart.notNull(clipBounds[$height]) <= 0) {
            return;
          }
          canvas.setClipBounds(clipBounds);
        }
        canvas.drawBarStack(barStack, {drawAreaBounds: this.componentBounds});
        if (barOutsideBounds) {
          canvas.resetClipBounds();
        }
        t0 = this.barRendererDecorator;
        t0 == null ? null : t0.decorate(barElements, canvas, this.graphicsFactory, {drawBounds: this.drawBounds, animationPercent: animationPercent, renderingVertically: this.renderingVertically, rtl: this.isRtl});
      }
      [_getBarStackBounds](barStackRect) {
        let left = null;
        let right = null;
        let top = null;
        let bottom = null;
        if (dart.test(this.renderingVertically)) {
          left = math.max(T.intL(), this.componentBounds[$left], barStackRect[$left]);
          right = math.min(T.intL(), this.componentBounds[$right], barStackRect[$right]);
          top = barStackRect[$top];
          bottom = barStackRect[$bottom];
        } else {
          left = barStackRect[$left];
          right = barStackRect[$right];
          top = math.max(T.intL(), this.componentBounds[$top], barStackRect[$top]);
          bottom = math.min(T.intL(), this.componentBounds[$bottom], barStackRect[$bottom]);
        }
        let width = dart.notNull(right) - dart.notNull(left);
        let height = dart.notNull(bottom) - dart.notNull(top);
        return new (T.RectangleOfintL()).new(left, top, width, height);
      }
      [_getBarBounds](domainValue, domainAxis, domainWidth, measureValue, measureOffsetValue, measureAxis, barGroupIndex, previousBarGroupWeight, barGroupWeight, numBarGroups) {
        domainWidth = domainWidth[$abs]();
        if (barGroupWeight == null) {
          barGroupWeight = 1 / dart.notNull(numBarGroups);
          previousBarGroupWeight = dart.notNull(barGroupIndex) * dart.notNull(barGroupWeight);
        }
        let spacingLoss = dart.notNull(this[_barGroupInnerPadding]) * (dart.notNull(numBarGroups) - 1);
        let barWidth = ((dart.notNull(domainWidth) - spacingLoss) * dart.notNull(barGroupWeight))[$round]();
        barWidth = math.max(T.intL(), 1, barWidth);
        let adjustedBarGroupIndex = dart.test(this.isRtl) ? dart.notNull(numBarGroups) - dart.notNull(barGroupIndex) - 1 : barGroupIndex;
        let previousAverageWidth = dart.notNull(adjustedBarGroupIndex) > 0 ? ((dart.notNull(domainWidth) - spacingLoss) * (dart.notNull(previousBarGroupWeight) / dart.notNull(adjustedBarGroupIndex)))[$round]() : 0;
        let domainStart = (dart.notNull(domainAxis.getLocation(domainValue)) - dart.notNull(domainWidth) / 2 + (previousAverageWidth + dart.notNull(this[_barGroupInnerPadding])) * dart.notNull(adjustedBarGroupIndex))[$round]();
        let domainEnd = domainStart + barWidth;
        measureValue = measureValue != null ? measureValue : 0;
        let measureStart = null;
        let measureEnd = null;
        if (dart.notNull(measureValue) < 0) {
          measureEnd = measureAxis.getLocation(measureOffsetValue)[$round]();
          measureStart = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue))[$round]();
        } else {
          measureStart = measureAxis.getLocation(measureOffsetValue)[$round]();
          measureEnd = measureAxis.getLocation(dart.notNull(measureValue) + dart.notNull(measureOffsetValue))[$round]();
        }
        let bounds = null;
        if (dart.test(this.renderingVertically)) {
          bounds = new (T.RectangleOfintL()).new(domainStart, measureEnd, domainEnd - domainStart, dart.notNull(measureStart) - dart.notNull(measureEnd));
        } else {
          bounds = new (T.RectangleOfintL()).new(math.min(T.intL(), measureStart, measureEnd), domainStart, (dart.notNull(measureEnd) - dart.notNull(measureStart))[$abs](), domainEnd - domainStart);
        }
        return bounds;
      }
      getBoundsForBar(bar) {
        T.BarRendererElementL().as(bar);
        return bar.bounds;
      }
    }
    (BarRenderer.internal = function(opts) {
      let config = opts && 'config' in opts ? opts.config : null;
      let rendererId = opts && 'rendererId' in opts ? opts.rendererId : null;
      this[_barGroupInnerPadding] = 2;
      this[_stackedBarPadding] = 1;
      this[barRendererDecorator] = config.barRendererDecorator;
      BarRenderer.__proto__.new.call(this, {config: config, rendererId: rendererId, layoutPaintOrder: config.layoutPaintOrder});
      ;
    }).prototype = BarRenderer.prototype;
    dart.addTypeTests(BarRenderer);
    BarRenderer.prototype[_is_BarRenderer_default] = true;
    dart.addTypeCaches(BarRenderer);
    dart.setMethodSignature(BarRenderer, () => ({
      __proto__: dart.getMethods(BarRenderer.__proto__),
      addPositionToDetailsForSeriesDatum: dart.fnType(dart.legacy(datum_details.DatumDetails$(dart.legacy(D))), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      getBaseDetails: dart.fnType(dart.legacy(bar_renderer.BarRendererElement$(dart.legacy(D))), [dart.dynamic, dart.legacy(core.int)]),
      makeAnimatedBar: dart.fnType(dart.legacy(bar_renderer.AnimatedBar$(dart.legacy(D))), [], {barGroupIndex: dart.legacy(core.int), barGroupWeight: dart.legacy(core.double), color: dart.legacy(color.Color), dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), datum: dart.dynamic, details: dart.legacy(core.Object), domainAxis: dart.legacy(core.Object), domainValue: dart.legacy(core.Object), domainWidth: dart.legacy(core.int), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), key: dart.legacy(core.String), measureAxis: dart.legacy(axis$.ImmutableAxis$(dart.legacy(core.num))), measureAxisPosition: dart.legacy(core.double), measureIsNegative: dart.legacy(core.bool), measureIsNull: dart.legacy(core.bool), measureOffsetValue: dart.legacy(core.num), measureValue: dart.legacy(core.num), numBarGroups: dart.legacy(core.int), previousBarGroupWeight: dart.legacy(core.double), series: dart.legacy(core.Object), strokeWidthPx: dart.legacy(core.double)}, {}),
      makeBarRendererElement: dart.fnType(dart.legacy(bar_renderer.BarRendererElement$(dart.legacy(D))), [], {barGroupIndex: dart.legacy(core.int), barGroupWeight: dart.legacy(core.double), color: dart.legacy(color.Color), dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), details: dart.legacy(core.Object), domainAxis: dart.legacy(core.Object), domainValue: dart.legacy(core.Object), domainWidth: dart.legacy(core.int), fillColor: dart.legacy(color.Color), fillPattern: dart.legacy(chart_canvas.FillPatternType), measureAxis: dart.legacy(axis$.ImmutableAxis$(dart.legacy(core.num))), measureAxisPosition: dart.legacy(core.double), measureIsNegative: dart.legacy(core.bool), measureIsNull: dart.legacy(core.bool), measureOffsetValue: dart.legacy(core.num), measureValue: dart.legacy(core.num), numBarGroups: dart.legacy(core.int), previousBarGroupWeight: dart.legacy(core.double), strokeWidthPx: dart.legacy(core.double)}, {}),
      paintBar: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.double), dart.legacy(core.Object)]),
      [_getBarStackBounds]: dart.fnType(dart.legacy(math.Rectangle$(dart.legacy(core.int))), [dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      [_getBarBounds]: dart.fnType(dart.legacy(math.Rectangle$(dart.legacy(core.int))), [dart.legacy(D), dart.legacy(axis$.ImmutableAxis$(dart.legacy(D))), dart.legacy(core.int), dart.legacy(core.num), dart.legacy(core.num), dart.legacy(axis$.ImmutableAxis$(dart.legacy(core.num))), dart.legacy(core.int), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.int)]),
      getBoundsForBar: dart.fnType(dart.legacy(math.Rectangle$(dart.legacy(core.int))), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(BarRenderer, () => ({
      __proto__: dart.getGetters(BarRenderer.__proto__),
      cornerStrategy: dart.legacy(bar_renderer_config.CornerStrategy)
    }));
    dart.setLibraryUri(BarRenderer, I[5]);
    dart.setFieldSignature(BarRenderer, () => ({
      __proto__: dart.getFields(BarRenderer.__proto__),
      [_barGroupInnerPadding]: dart.finalFieldType(dart.legacy(core.int)),
      [_stackedBarPadding]: dart.finalFieldType(dart.legacy(core.int)),
      barRendererDecorator: dart.finalFieldType(dart.legacy(bar_renderer_decorator.BarRendererDecorator))
    }));
    return BarRenderer;
  });
  bar_renderer.BarRenderer = bar_renderer.BarRenderer$();
  dart.addTypeTests(bar_renderer.BarRenderer, _is_BarRenderer_default);
  const _is_ImmutableBarRendererElement_default = Symbol('_is_ImmutableBarRendererElement_default');
  bar_renderer.ImmutableBarRendererElement$ = dart.generic(D => {
    class ImmutableBarRendererElement extends core.Object {}
    (ImmutableBarRendererElement.new = function() {
      ;
    }).prototype = ImmutableBarRendererElement.prototype;
    dart.addTypeTests(ImmutableBarRendererElement);
    ImmutableBarRendererElement.prototype[_is_ImmutableBarRendererElement_default] = true;
    dart.addTypeCaches(ImmutableBarRendererElement);
    dart.setLibraryUri(ImmutableBarRendererElement, I[5]);
    return ImmutableBarRendererElement;
  });
  bar_renderer.ImmutableBarRendererElement = bar_renderer.ImmutableBarRendererElement$();
  dart.addTypeTests(bar_renderer.ImmutableBarRendererElement, _is_ImmutableBarRendererElement_default);
  dart.trackLibraries("packages/charts_common/src/chart/cartesian/cartesian_chart.dart", {
    "package:charts_common/src/chart/cartesian/cartesian_chart.dart": cartesian_chart,
    "package:charts_common/src/chart/cartesian/cartesian_renderer.dart": cartesian_renderer,
    "package:charts_common/src/chart/bar/base_bar_renderer.dart": base_bar_renderer,
    "package:charts_common/src/chart/bar/bar_renderer_decorator.dart": bar_renderer_decorator,
    "package:charts_common/src/chart/bar/bar_renderer_config.dart": bar_renderer_config,
    "package:charts_common/src/chart/bar/bar_renderer.dart": bar_renderer
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["cartesian_chart.dart","cartesian_renderer.dart","../bar/base_bar_renderer.dart","../bar/bar_renderer_decorator.dart","../bar/bar_renderer_config.dart","../bar/bar_renderer.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../D:/packages/charts_common/src/chart/cartesian/cartesian_chart.dart.lib.js"}');
  // Exports:
  return {
    src__chart__cartesian__cartesian_chart: cartesian_chart,
    src__chart__cartesian__cartesian_renderer: cartesian_renderer,
    src__chart__bar__base_bar_renderer: base_bar_renderer,
    src__chart__bar__bar_renderer_decorator: bar_renderer_decorator,
    src__chart__bar__bar_renderer_config: bar_renderer_config,
    src__chart__bar__bar_renderer: bar_renderer
  };
}));

//# sourceMappingURL=cartesian_chart.dart.lib.js.map
