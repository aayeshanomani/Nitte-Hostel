define(['dart_sdk', 'packages/charts_common/src/chart/cartesian/axis/tick.dart', 'packages/charts_common/src/chart/common/chart_context.dart', 'packages/charts_common/src/common/graphics_factory.dart', 'packages/charts_common/src/chart/common/unitconverter/identity_converter.dart', 'packages/charts_common/src/chart/common/unitconverter/unit_converter.dart', 'packages/charts_common/src/chart/cartesian/axis/collision_report.dart', 'packages/charts_common/src/common/text_element.dart', 'packages/charts_common/src/chart/layout/layout_view.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart', 'packages/charts_common/src/common/line_style.dart', 'packages/charts_common/src/common/text_style.dart', 'packages/charts_common/src/common/color.dart', 'packages/intl/src/intl_helpers.dart', 'packages/charts_common/src/common/material_palette.dart', 'packages/charts_common/src/common/palette.dart', 'packages/charts_common/src/common/typed_registry.dart', 'packages/charts_common/src/chart/cartesian/axis/axis_tick.dart'], (function load__packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale_dart(dart_sdk, packages__charts_common__src__chart__cartesian__axis__tick$46dart, packages__charts_common__src__chart__common__chart_context$46dart, packages__charts_common__src__common__graphics_factory$46dart, packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart, packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart, packages__charts_common__src__chart__cartesian__axis__collision_report$46dart, packages__charts_common__src__common__text_element$46dart, packages__charts_common__src__chart__layout__layout_view$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart, packages__charts_common__src__common__line_style$46dart, packages__charts_common__src__common__text_style$46dart, packages__charts_common__src__common__color$46dart, packages__intl__src__intl_helpers$46dart, packages__charts_common__src__common__material_palette$46dart, packages__charts_common__src__common__palette$46dart, packages__charts_common__src__common__typed_registry$46dart, packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const tick = packages__charts_common__src__chart__cartesian__axis__tick$46dart.src__chart__cartesian__axis__tick;
  const chart_context = packages__charts_common__src__chart__common__chart_context$46dart.src__chart__common__chart_context;
  const graphics_factory = packages__charts_common__src__common__graphics_factory$46dart.src__common__graphics_factory;
  const identity_converter = packages__charts_common__src__chart__common__unitconverter__identity_converter$46dart.src__chart__common__unitconverter__identity_converter;
  const unit_converter = packages__charts_common__src__chart__common__unitconverter__unit_converter$46dart.src__chart__common__unitconverter__unit_converter;
  const collision_report = packages__charts_common__src__chart__cartesian__axis__collision_report$46dart.src__chart__cartesian__axis__collision_report;
  const text_element = packages__charts_common__src__common__text_element$46dart.src__common__text_element;
  const layout_view = packages__charts_common__src__chart__layout__layout_view$46dart.src__chart__layout__layout_view;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  const line_style = packages__charts_common__src__common__line_style$46dart.src__common__line_style;
  const text_style = packages__charts_common__src__common__text_style$46dart.src__common__text_style;
  const color = packages__charts_common__src__common__color$46dart.src__common__color;
  const intl = packages__intl__src__intl_helpers$46dart.intl;
  const material_palette = packages__charts_common__src__common__material_palette$46dart.src__common__material_palette;
  const palette = packages__charts_common__src__common__palette$46dart.src__common__palette;
  const typed_registry = packages__charts_common__src__common__typed_registry$46dart.src__common__typed_registry;
  const axis_tick = packages__charts_common__src__chart__cartesian__axis__axis_tick$46dart.src__chart__cartesian__axis__axis_tick;
  var simple_ordinal_scale = Object.create(dart.library);
  var ordinal_extents = Object.create(dart.library);
  var ordinal_scale_domain_info = Object.create(dart.library);
  var ordinal_scale = Object.create(dart.library);
  var ordinal_tick_provider = Object.create(dart.library);
  var numeric_tick_provider = Object.create(dart.library);
  var linear_scale_viewport = Object.create(dart.library);
  var linear_scale_function = Object.create(dart.library);
  var linear_scale_domain_info = Object.create(dart.library);
  var numeric_scale = Object.create(dart.library);
  var numeric_extents = Object.create(dart.library);
  var linear_scale = Object.create(dart.library);
  var base_tick_draw_strategy = Object.create(dart.library);
  var small_tick_draw_strategy = Object.create(dart.library);
  var tick_provider = Object.create(dart.library);
  var processed_series = Object.create(dart.library);
  var symbol_renderer = Object.create(dart.library);
  var datum_details = Object.create(dart.library);
  var tick_formatter = Object.create(dart.library);
  var tick_draw_strategy = Object.create(dart.library);
  var style = Object.create(dart.library);
  var material_style = Object.create(dart.library);
  var style_factory = Object.create(dart.library);
  var scale = Object.create(dart.library);
  var axis_spec = Object.create(dart.library);
  var series$ = Object.create(dart.library);
  var axis = Object.create(dart.library);
  var $round = dartx.round;
  var $abs = dartx.abs;
  var $toInt = dartx.toInt;
  var $truncate = dartx.truncate;
  var $ceil = dartx.ceil;
  var $toDouble = dartx.toDouble;
  var $length = dartx.length;
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $indexOf = dartx.indexOf;
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $first = dartx.first;
  var $last = dartx.last;
  var $clear = dartx.clear;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $isNotEmpty = dartx.isNotEmpty;
  var $sort = dartx.sort;
  var $floor = dartx.floor;
  var $floorToDouble = dartx.floorToDouble;
  var $roundToDouble = dartx.roundToDouble;
  var $isFinite = dartx.isFinite;
  var $toString = dartx.toString;
  var $fold = dartx.fold;
  var $bottomLeft = dartx.bottomLeft;
  var $bottomRight = dartx.bottomRight;
  var $topLeft = dartx.topLeft;
  var $topRight = dartx.topRight;
  var $top = dartx.top;
  var $bottom = dartx.bottom;
  var $right = dartx.right;
  var $left = dartx.left;
  var $width = dartx.width;
  var $height = dartx.height;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $firstWhere = dartx.firstWhere;
  var $remove = dartx.remove;
  var $forEach = dartx.forEach;
  var $removeWhere = dartx.removeWhere;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    IdentityMapOfStringL$intL: () => (T$.IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.intL())))(),
    JSArrayOfStringL: () => (T$.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T$.StringL())))(),
    OrdinalScaleL: () => (T$.OrdinalScaleL = dart.constFn(dart.legacy(ordinal_scale.OrdinalScale)))(),
    TickFormatterL: () => (T$.TickFormatterL = dart.constFn(dart.legacy(tick_formatter.TickFormatter)))(),
    MapOfStringL$StringL: () => (T$.MapOfStringL$StringL = dart.constFn(core.Map$(T$.StringL(), T$.StringL())))(),
    MapLOfStringL$StringL: () => (T$.MapLOfStringL$StringL = dart.constFn(dart.legacy(T$.MapOfStringL$StringL())))(),
    TickHintOfStringL: () => (T$.TickHintOfStringL = dart.constFn(tick_provider.TickHint$(T$.StringL())))(),
    TickHintLOfStringL: () => (T$.TickHintLOfStringL = dart.constFn(dart.legacy(T$.TickHintOfStringL())))(),
    TickFormatterOfStringL: () => (T$.TickFormatterOfStringL = dart.constFn(tick_formatter.TickFormatter$(T$.StringL())))(),
    TickFormatterLOfStringL: () => (T$.TickFormatterLOfStringL = dart.constFn(dart.legacy(T$.TickFormatterOfStringL())))(),
    OrdinalTickProviderL: () => (T$.OrdinalTickProviderL = dart.constFn(dart.legacy(ordinal_tick_provider.OrdinalTickProvider)))(),
    IdentityConverterOfnumL: () => (T$.IdentityConverterOfnumL = dart.constFn(identity_converter.IdentityConverter$(T$.numL())))(),
    ListOfdoubleL: () => (T$.ListOfdoubleL = dart.constFn(core.List$(T$.doubleL())))(),
    NumericScaleL: () => (T$.NumericScaleL = dart.constFn(dart.legacy(numeric_scale.NumericScale)))(),
    TickFormatterOfnumL: () => (T$.TickFormatterOfnumL = dart.constFn(tick_formatter.TickFormatter$(T$.numL())))(),
    TickFormatterLOfnumL: () => (T$.TickFormatterLOfnumL = dart.constFn(dart.legacy(T$.TickFormatterOfnumL())))(),
    MapOfnumL$StringL: () => (T$.MapOfnumL$StringL = dart.constFn(core.Map$(T$.numL(), T$.StringL())))(),
    MapLOfnumL$StringL: () => (T$.MapLOfnumL$StringL = dart.constFn(dart.legacy(T$.MapOfnumL$StringL())))(),
    TickHintOfnumL: () => (T$.TickHintOfnumL = dart.constFn(tick_provider.TickHint$(T$.numL())))(),
    TickHintLOfnumL: () => (T$.TickHintLOfnumL = dart.constFn(dart.legacy(T$.TickHintOfnumL())))(),
    TickOfnumL: () => (T$.TickOfnumL = dart.constFn(tick.Tick$(T$.numL())))(),
    TickLOfnumL: () => (T$.TickLOfnumL = dart.constFn(dart.legacy(T$.TickOfnumL())))(),
    ListOfTickLOfnumL: () => (T$.ListOfTickLOfnumL = dart.constFn(core.List$(T$.TickLOfnumL())))(),
    ListLOfTickLOfnumL: () => (T$.ListLOfTickLOfnumL = dart.constFn(dart.legacy(T$.ListOfTickLOfnumL())))(),
    NumericExtentsL: () => (T$.NumericExtentsL = dart.constFn(dart.legacy(numeric_extents.NumericExtents)))(),
    BaseRenderSpecL: () => (T$.BaseRenderSpecL = dart.constFn(dart.legacy(base_tick_draw_strategy.BaseRenderSpec)))(),
    PointOfnumL: () => (T$.PointOfnumL = dart.constFn(math.Point$(T$.numL())))(),
    PointLOfnumL: () => (T$.PointLOfnumL = dart.constFn(dart.legacy(T$.PointOfnumL())))(),
    JSArrayOfPointLOfnumL: () => (T$.JSArrayOfPointLOfnumL = dart.constFn(_interceptors.JSArray$(T$.PointLOfnumL())))(),
    _PixelVerticalDirectionL: () => (T$._PixelVerticalDirectionL = dart.constFn(dart.legacy(base_tick_draw_strategy._PixelVerticalDirection)))(),
    SmallTickRendererSpecL: () => (T$.SmallTickRendererSpecL = dart.constFn(dart.legacy(small_tick_draw_strategy.SmallTickRendererSpec)))(),
    intLToStringL: () => (T$.intLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.intL()])))(),
    MutableSeriesL: () => (T$.MutableSeriesL = dart.constFn(dart.legacy(processed_series.MutableSeries)))(),
    SymbolRendererL: () => (T$.SymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.SymbolRenderer)))(),
    RoundedRectSymbolRendererL: () => (T$.RoundedRectSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RoundedRectSymbolRenderer)))(),
    LineSymbolRendererL: () => (T$.LineSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.LineSymbolRenderer)))(),
    CircleSymbolRendererL: () => (T$.CircleSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.CircleSymbolRenderer)))(),
    RectSymbolRendererL: () => (T$.RectSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RectSymbolRenderer)))(),
    PointOfdoubleL: () => (T$.PointOfdoubleL = dart.constFn(math.Point$(T$.doubleL())))(),
    ColorL: () => (T$.ColorL = dart.constFn(dart.legacy(color.Color)))(),
    CylinderSymbolRendererL: () => (T$.CylinderSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.CylinderSymbolRenderer)))(),
    RectangleRangeSymbolRendererL: () => (T$.RectangleRangeSymbolRendererL = dart.constFn(dart.legacy(symbol_renderer.RectangleRangeSymbolRenderer)))(),
    OrdinalTickFormatterL: () => (T$.OrdinalTickFormatterL = dart.constFn(dart.legacy(tick_formatter.OrdinalTickFormatter)))(),
    numLToStringL: () => (T$.numLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.numL()])))(),
    NumericTickFormatterL: () => (T$.NumericTickFormatterL = dart.constFn(dart.legacy(tick_formatter.NumericTickFormatter)))(),
    ScaleOutputExtentL: () => (T$.ScaleOutputExtentL = dart.constFn(dart.legacy(scale.ScaleOutputExtent)))(),
    RangeBandTypeL: () => (T$.RangeBandTypeL = dart.constFn(dart.legacy(scale.RangeBandType)))(),
    StepSizeTypeL: () => (T$.StepSizeTypeL = dart.constFn(dart.legacy(scale.StepSizeType)))(),
    AxisSpecL: () => (T$.AxisSpecL = dart.constFn(dart.legacy(axis_spec.AxisSpec)))(),
    TextStyleSpecL: () => (T$.TextStyleSpecL = dart.constFn(dart.legacy(axis_spec.TextStyleSpec)))(),
    LineStyleSpecL: () => (T$.LineStyleSpecL = dart.constFn(dart.legacy(axis_spec.LineStyleSpec)))(),
    TickLabelAnchorL: () => (T$.TickLabelAnchorL = dart.constFn(dart.legacy(axis_spec.TickLabelAnchor)))(),
    TickLabelJustificationL: () => (T$.TickLabelJustificationL = dart.constFn(dart.legacy(axis_spec.TickLabelJustification)))(),
    intLTonumL: () => (T$.intLTonumL = dart.constFn(dart.fnType(T$.numL(), [T$.intL()])))(),
    intLToColorL: () => (T$.intLToColorL = dart.constFn(dart.fnType(T$.ColorL(), [T$.intL()])))(),
    ListOfintL: () => (T$.ListOfintL = dart.constFn(core.List$(T$.intL())))(),
    ListLOfintL: () => (T$.ListLOfintL = dart.constFn(dart.legacy(T$.ListOfintL())))(),
    intLToListLOfintL: () => (T$.intLToListLOfintL = dart.constFn(dart.fnType(T$.ListLOfintL(), [T$.intL()])))(),
    FillPatternTypeL: () => (T$.FillPatternTypeL = dart.constFn(dart.legacy(chart_canvas.FillPatternType)))(),
    intLToFillPatternTypeL: () => (T$.intLToFillPatternTypeL = dart.constFn(dart.fnType(T$.FillPatternTypeL(), [T$.intL()])))(),
    intLToTextStyleSpecL: () => (T$.intLToTextStyleSpecL = dart.constFn(dart.fnType(T$.TextStyleSpecL(), [T$.intL()])))(),
    numLToLStringL: () => (T$.numLToLStringL = dart.constFn(dart.legacy(T$.numLToStringL())))(),
    intLToFn: () => (T$.intLToFn = dart.constFn(dart.fnType(T$.numLToLStringL(), [T$.intL()])))(),
    AxisOrientationL: () => (T$.AxisOrientationL = dart.constFn(dart.legacy(axis.AxisOrientation)))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    dynamicToboolL: () => (T$.dynamicToboolL = dart.constFn(dart.fnType(T$.boolL(), [dart.dynamic])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    TextElementL: () => (T$.TextElementL = dart.constFn(dart.legacy(text_element.TextElement)))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    SmallTickDrawStrategyL: () => (T$.SmallTickDrawStrategyL = dart.constFn(dart.legacy(small_tick_draw_strategy.SmallTickDrawStrategy)))(),
    TickProviderOfStringL: () => (T$.TickProviderOfStringL = dart.constFn(tick_provider.TickProvider$(T$.StringL())))(),
    TickProviderLOfStringL: () => (T$.TickProviderLOfStringL = dart.constFn(dart.legacy(T$.TickProviderOfStringL())))(),
    OrdinalViewportL: () => (T$.OrdinalViewportL = dart.constFn(dart.legacy(axis.OrdinalViewport)))(),
    AttributeKeyOfStringL: () => (T$.AttributeKeyOfStringL = dart.constFn(series$.AttributeKey$(T$.StringL())))(),
    AxisL: () => (T$.AxisL = dart.constFn(dart.legacy(axis.Axis)))(),
    AttributeKeyOfAxisL: () => (T$.AttributeKeyOfAxisL = dart.constFn(series$.AttributeKey$(T$.AxisL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPixel",
        index: 1
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPixelSpaceFromStep",
        index: 5
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.styleAssignedPercentOfStep",
        index: 4
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedPercentOfStep",
        index: 3
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.fixedDomain",
        index: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: scale.RangeBandType.prototype,
        [_name$]: "RangeBandType.none",
        index: 0
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: T$.IdentityConverterOfnumL().prototype
      });
    },
    get C7() {
      return C[7] = dart.constList([0.01, 0.02, 0.025, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1, 2, 2.5, 3, 4, 5, 6, 7, 8, 9], T$.doubleL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.autoDetect",
        index: 0
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.fixedPixels",
        index: 2
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: scale.StepSizeType.prototype,
        [_name$]: "StepSizeType.fixedDomain",
        index: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 1 / 0,
        [min$]: -1 / 0
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: numeric_extents.NumericExtents.prototype,
        [max$]: 0,
        [min$]: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: scale.RangeBandConfig.prototype,
        [RangeBandConfig_size]: 0,
        [RangeBandConfig_type]: C[5] || CT.C5
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: scale.StepSizeConfig.prototype,
        [StepSizeConfig_size]: 0,
        [StepSizeConfig_type]: C[8] || CT.C8
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 0
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 1
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: text_element.TextDirection.prototype,
        [_name]: "TextDirection.center",
        index: 2
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.top",
        index: 0
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.bottom",
        index: 2
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.right",
        index: 1
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: axis.AxisOrientation.prototype,
        [_name$0]: "AxisOrientation.left",
        index: 3
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.over",
        index: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.under",
        index: 2
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: base_tick_draw_strategy._PixelVerticalDirection.prototype,
        [_name$1]: "_PixelVerticalDirection.center",
        index: 1
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.before",
        index: 0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.after",
        index: 2
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.inside",
        index: 3
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: axis_spec.TickLabelAnchor.prototype,
        [_name$2]: "TickLabelAnchor.centered",
        index: 1
      });
    },
    get C29() {
      return C[29] = dart.constList([C[22] || CT.C22, C[24] || CT.C24, C[23] || CT.C23], T$._PixelVerticalDirectionL());
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: material_style.MaterialStyle.prototype
      });
    },
    get C31() {
      return C[31] = dart.constList([C[5] || CT.C5, C[0] || CT.C0, C[4] || CT.C4, C[3] || CT.C3, C[2] || CT.C2, C[1] || CT.C1], T$.RangeBandTypeL());
    },
    get C32() {
      return C[32] = dart.constList([C[8] || CT.C8, C[10] || CT.C10, C[9] || CT.C9], T$.StepSizeTypeL());
    },
    get C33() {
      return C[33] = dart.constList([C[25] || CT.C25, C[28] || CT.C28, C[26] || CT.C26, C[27] || CT.C27], T$.TickLabelAnchorL());
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.inside",
        index: 0
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: axis_spec.TickLabelJustification.prototype,
        [_name$2]: "TickLabelJustification.outside",
        index: 1
      });
    },
    get C36() {
      return C[36] = dart.constList([C[34] || CT.C34, C[35] || CT.C35], T$.TickLabelJustificationL());
    },
    get C37() {
      return C[37] = dart.constList([C[18] || CT.C18, C[20] || CT.C20, C[19] || CT.C19, C[21] || CT.C21], T$.AxisOrientationL());
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: ordinal_tick_provider.OrdinalTickProvider.prototype
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: tick_formatter.OrdinalTickFormatter.prototype
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: T$.AttributeKeyOfStringL().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxisId"
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: T$.AttributeKeyOfAxisL().prototype,
        [TypedKey_uniqueKey]: "Axis.measureAxis"
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: T$.AttributeKeyOfAxisL().prototype,
        [TypedKey_uniqueKey]: "Axis.domainAxis"
      });
    }
  }, false);
  var C = Array(43).fill(void 0);
  var I = [
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/cartesian/axis/ordinal_extents.dart",
    "package:charts_common/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart",
    "package:charts_common/src/chart/common/processed_series.dart",
    "package:charts_common/src/common/symbol_renderer.dart",
    "package:charts_common/src/chart/common/datum_details.dart",
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart",
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart",
    "package:charts_common/src/common/style/style.dart",
    "package:charts_common/src/common/style/material_style.dart",
    "package:charts_common/src/common/style/style_factory.dart",
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/cartesian/axis/scale.dart",
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart",
    "package:charts_common/src/data/series.dart",
    "package:charts_common/src/chart/cartesian/axis/axis.dart"
  ];
  var _stepSizeConfig = dart.privateName(simple_ordinal_scale, "_stepSizeConfig");
  var _range = dart.privateName(simple_ordinal_scale, "_range");
  var _viewportScale = dart.privateName(simple_ordinal_scale, "_viewportScale");
  var _viewportTranslatePx = dart.privateName(simple_ordinal_scale, "_viewportTranslatePx");
  var _rangeBandConfig = dart.privateName(simple_ordinal_scale, "_rangeBandConfig");
  var _scaleChanged = dart.privateName(simple_ordinal_scale, "_scaleChanged");
  var _cachedStepSizePixels = dart.privateName(simple_ordinal_scale, "_cachedStepSizePixels");
  var _cachedRangeBandShift = dart.privateName(simple_ordinal_scale, "_cachedRangeBandShift");
  var _cachedRangeBandSize = dart.privateName(simple_ordinal_scale, "_cachedRangeBandSize");
  var _viewportDataSize = dart.privateName(simple_ordinal_scale, "_viewportDataSize");
  var _viewportStartingDomain = dart.privateName(simple_ordinal_scale, "_viewportStartingDomain");
  var _domain = dart.privateName(simple_ordinal_scale, "_domain");
  var _updateScale = dart.privateName(simple_ordinal_scale, "_updateScale");
  var _recalculateScale = dart.privateName(simple_ordinal_scale, "_recalculateScale");
  var _updateViewport = dart.privateName(simple_ordinal_scale, "_updateViewport");
  var _updateCachedFields = dart.privateName(simple_ordinal_scale, "_updateCachedFields");
  var _name$ = dart.privateName(scale, "_name");
  simple_ordinal_scale.SimpleOrdinalScale = class SimpleOrdinalScale extends core.Object {
    get rangeBand() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedRangeBandSize];
    }
    get stepSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return this[_cachedStepSizePixels];
    }
    get domainStepSize() {
      return 1.0;
    }
    set rangeBandConfig(barGroupWidthConfig) {
      if (barGroupWidthConfig == null) {
        dart.throw(new core.ArgumentError.notNull("RangeBandConfig must not be null."));
      }
      if (barGroupWidthConfig.type == scale.RangeBandType.fixedDomain || barGroupWidthConfig.type == scale.RangeBandType.none) {
        dart.throw(new core.ArgumentError.new("barGroupWidthConfig must not be NONE or FIXED_DOMAIN"));
      }
      this[_rangeBandConfig] = barGroupWidthConfig;
      this[_scaleChanged] = true;
    }
    get rangeBandConfig() {
      return this[_rangeBandConfig];
    }
    set stepSizeConfig(config) {
      if (config != null && config.type != scale.StepSizeType.autoDetect) {
        dart.throw(new core.ArgumentError.new("Ordinal scales only support StepSizeConfig of type Auto"));
      }
    }
    get stepSizeConfig() {
      return this[_stepSizeConfig];
    }
    _get(domainValue) {
      T$.StringL().as(domainValue);
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      let i = this[_domain].indexOf(domainValue);
      if (i != null) {
        return dart.notNull(this.viewportTranslatePx) + dart.notNull(this[_range].start) + dart.notNull(this[_cachedRangeBandShift]) + dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(i);
      }
      return 0.0;
    }
    reverse(pixelLocation) {
      let index = (dart.notNull(pixelLocation) - dart.notNull(this.viewportTranslatePx) - dart.notNull(this[_range].start) - dart.notNull(this[_cachedRangeBandShift])) / dart.notNull(this[_cachedStepSizePixels]);
      return this[_domain].getDomainAtIndex(math.max(T$.intL(), 0, math.min(T$.intL(), index[$round](), dart.notNull(this.domain.size) - 1)));
    }
    canTranslate(domainValue) {
      T$.StringL().as(domainValue);
      return this[_domain].indexOf(domainValue) != null;
    }
    get domain() {
      return this[_domain];
    }
    addDomain(domainValue) {
      T$.StringL().as(domainValue);
      this[_domain].add(domainValue);
      this[_scaleChanged] = true;
    }
    set range(extent) {
      this[_range] = extent;
      this[_scaleChanged] = true;
    }
    get range() {
      return this[_range];
    }
    resetDomain() {
      this[_domain].clear();
      this[_scaleChanged] = true;
    }
    resetViewportSettings() {
      this[_viewportScale] = 1.0;
      this[_viewportTranslatePx] = 0.0;
      this[_scaleChanged] = true;
    }
    get rangeWidth() {
      return (dart.notNull(this.range.start) - dart.notNull(this.range.end))[$abs]()[$toInt]();
    }
    get viewportScalingFactor() {
      return this[_viewportScale];
    }
    get viewportTranslatePx() {
      return this[_viewportTranslatePx];
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      this[_viewportScale] = viewportScale;
      this[_viewportTranslatePx] = math.min(T$.doubleL(), 0.0, math.max(T$.doubleL(), dart.notNull(this.rangeWidth) * (1.0 - dart.notNull(viewportScale)), viewportTranslatePx));
      this[_scaleChanged] = true;
    }
    setViewport(viewportDataSize, startingDomain) {
      if (startingDomain != null && viewportDataSize != null && dart.notNull(viewportDataSize) <= 0) {
        dart.throw(new core.ArgumentError.new("viewportDataSize can" + "t be less than 1."));
      }
      this[_scaleChanged] = true;
      this[_viewportDataSize] = viewportDataSize;
      this[_viewportStartingDomain] = startingDomain;
    }
    [_updateViewport]() {
      this.setViewportSettings(1.0, 0.0);
      this[_recalculateScale]();
      if (dart.test(this[_domain].isEmpty)) {
        return;
      }
      this.setViewportSettings(dart.notNull(this[_domain].size) / math.min(T$.numL(), this[_viewportDataSize], this[_domain].size), 0.0);
      this[_recalculateScale]();
      let domainIndex = this[_domain].indexOf(this[_viewportStartingDomain]);
      if (domainIndex != null) {
        let viewportTranslatePx = -(dart.notNull(this[_cachedStepSizePixels]) * dart.notNull(domainIndex));
        this.setViewportSettings(this[_viewportScale], viewportTranslatePx);
      }
    }
    get viewportDataSize() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      return dart.test(this[_domain].isEmpty) ? 0 : (dart.notNull(this.rangeWidth) / dart.notNull(this[_cachedStepSizePixels]))[$truncate]();
    }
    get viewportStartingDomain() {
      if (dart.test(this[_scaleChanged])) {
        this[_updateScale]();
      }
      if (dart.test(this[_domain].isEmpty)) {
        return null;
      }
      return this[_domain].getDomainAtIndex((-dart.notNull(this[_viewportTranslatePx]) / dart.notNull(this[_cachedStepSizePixels]))[$ceil]()[$toInt]());
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range != null && dart.notNull(rangeValue) >= dart.notNull(this.range.min) && dart.notNull(rangeValue) <= dart.notNull(this.range.max);
    }
    compareDomainValueToViewport(domainValue) {
      T$.StringL().as(domainValue);
      let i = this[_domain].indexOf(domainValue);
      if (i != null && this.range != null) {
        let domainPx = this._get(domainValue);
        if (dart.notNull(domainPx) < dart.notNull(this.range.min)) {
          return -1;
        }
        if (dart.notNull(domainPx) > dart.notNull(this.range.max)) {
          return 1;
        }
        return 0;
      }
      return -1;
    }
    copy() {
      return new simple_ordinal_scale.SimpleOrdinalScale._copy(this);
    }
    [_updateCachedFields](stepSizePixels, rangeBandPixels, rangeBandShift) {
      this[_cachedStepSizePixels] = stepSizePixels;
      this[_cachedRangeBandSize] = rangeBandPixels;
      this[_cachedRangeBandShift] = rangeBandShift;
      if (dart.notNull(this.range.start) > dart.notNull(this.range.end)) {
        this[_cachedStepSizePixels] = dart.notNull(this[_cachedStepSizePixels]) * -1;
        this[_cachedRangeBandShift] = dart.notNull(this[_cachedRangeBandShift]) * -1;
      }
      this[_scaleChanged] = false;
    }
    [_updateScale]() {
      if (this[_viewportStartingDomain] != null && this[_viewportDataSize] != null) {
        this[_updateViewport]();
      }
      this[_recalculateScale]();
    }
    [_recalculateScale]() {
      let stepSizePixels = dart.test(this[_domain].isEmpty) ? 0.0 : dart.notNull(this[_viewportScale]) * (this.rangeWidth[$toDouble]() / this[_domain].size[$toDouble]());
      let rangeBandPixels = null;
      switch (this.rangeBandConfig.type) {
        case C[0] || CT.C0:
        {
          rangeBandPixels = this.rangeBandConfig.size[$toDouble]();
          break;
        }
        case C[1] || CT.C1:
        {
          let spaceInPixels = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = math.max(T$.doubleL(), 0.0, stepSizePixels - spaceInPixels);
          break;
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          let percent = this.rangeBandConfig.size[$toDouble]();
          rangeBandPixels = stepSizePixels * percent;
          break;
        }
        case C[4] || CT.C4:
        case C[5] || CT.C5:
        default:
        {
          dart.throw(new core.StateError.new("RangeBandType must not be NONE or FIXED_DOMAIN"));
          break;
        }
      }
      this[_updateCachedFields](stepSizePixels, rangeBandPixels, stepSizePixels / 2.0);
    }
  };
  (simple_ordinal_scale.SimpleOrdinalScale.new = function() {
    this[_stepSizeConfig] = new scale.StepSizeConfig.auto();
    this[_range] = new scale.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  (simple_ordinal_scale.SimpleOrdinalScale._copy = function(other) {
    this[_stepSizeConfig] = new scale.StepSizeConfig.auto();
    this[_range] = new scale.ScaleOutputExtent.new(0, 1);
    this[_viewportScale] = 1.0;
    this[_viewportTranslatePx] = 0.0;
    this[_rangeBandConfig] = new scale.RangeBandConfig.styleAssignedPercent();
    this[_scaleChanged] = true;
    this[_cachedStepSizePixels] = null;
    this[_cachedRangeBandShift] = null;
    this[_cachedRangeBandSize] = null;
    this[_viewportDataSize] = null;
    this[_viewportStartingDomain] = null;
    this[_domain] = other[_domain].copy();
    this[_range] = new scale.ScaleOutputExtent.new(other[_range].start, other[_range].end);
    this[_viewportScale] = other[_viewportScale];
    this[_viewportTranslatePx] = other[_viewportTranslatePx];
    this[_rangeBandConfig] = other[_rangeBandConfig];
    ;
  }).prototype = simple_ordinal_scale.SimpleOrdinalScale.prototype;
  dart.addTypeTests(simple_ordinal_scale.SimpleOrdinalScale);
  dart.addTypeCaches(simple_ordinal_scale.SimpleOrdinalScale);
  simple_ordinal_scale.SimpleOrdinalScale[dart.implements] = () => [ordinal_scale.OrdinalScale];
  dart.setMethodSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getMethods(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    _get: dart.fnType(dart.legacy(core.num), [dart.legacy(core.Object)]),
    reverse: dart.fnType(dart.legacy(core.String), [dart.legacy(core.double)]),
    canTranslate: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    addDomain: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    setViewport: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.String)]),
    [_updateViewport]: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    copy: dart.fnType(dart.legacy(simple_ordinal_scale.SimpleOrdinalScale), []),
    [_updateCachedFields]: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)]),
    [_updateScale]: dart.fnType(dart.void, []),
    [_recalculateScale]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getGetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    rangeBand: dart.legacy(core.double),
    stepSize: dart.legacy(core.double),
    domainStepSize: dart.legacy(core.double),
    rangeBandConfig: dart.legacy(scale.RangeBandConfig),
    stepSizeConfig: dart.legacy(scale.StepSizeConfig),
    domain: dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo),
    range: dart.legacy(scale.ScaleOutputExtent),
    rangeWidth: dart.legacy(core.int),
    viewportScalingFactor: dart.legacy(core.double),
    viewportTranslatePx: dart.legacy(core.double),
    viewportDataSize: dart.legacy(core.int),
    viewportStartingDomain: dart.legacy(core.String)
  }));
  dart.setSetterSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getSetters(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    rangeBandConfig: dart.legacy(scale.RangeBandConfig),
    stepSizeConfig: dart.legacy(scale.StepSizeConfig),
    range: dart.legacy(scale.ScaleOutputExtent)
  }));
  dart.setLibraryUri(simple_ordinal_scale.SimpleOrdinalScale, I[0]);
  dart.setFieldSignature(simple_ordinal_scale.SimpleOrdinalScale, () => ({
    __proto__: dart.getFields(simple_ordinal_scale.SimpleOrdinalScale.__proto__),
    [_stepSizeConfig]: dart.finalFieldType(dart.legacy(scale.StepSizeConfig)),
    [_domain]: dart.fieldType(dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo)),
    [_range]: dart.fieldType(dart.legacy(scale.ScaleOutputExtent)),
    [_viewportScale]: dart.fieldType(dart.legacy(core.double)),
    [_viewportTranslatePx]: dart.fieldType(dart.legacy(core.double)),
    [_rangeBandConfig]: dart.fieldType(dart.legacy(scale.RangeBandConfig)),
    [_scaleChanged]: dart.fieldType(dart.legacy(core.bool)),
    [_cachedStepSizePixels]: dart.fieldType(dart.legacy(core.double)),
    [_cachedRangeBandShift]: dart.fieldType(dart.legacy(core.double)),
    [_cachedRangeBandSize]: dart.fieldType(dart.legacy(core.double)),
    [_viewportDataSize]: dart.fieldType(dart.legacy(core.int)),
    [_viewportStartingDomain]: dart.fieldType(dart.legacy(core.String))
  }));
  var _range$ = dart.privateName(ordinal_extents, "_range");
  const _is_Extents_default = Symbol('_is_Extents_default');
  scale.Extents$ = dart.generic(D => {
    class Extents extends core.Object {}
    (Extents.new = function() {
      ;
    }).prototype = Extents.prototype;
    dart.addTypeTests(Extents);
    Extents.prototype[_is_Extents_default] = true;
    dart.addTypeCaches(Extents);
    dart.setLibraryUri(Extents, I[2]);
    return Extents;
  });
  scale.Extents = scale.Extents$();
  dart.addTypeTests(scale.Extents, _is_Extents_default);
  ordinal_extents.OrdinalExtents = class OrdinalExtents extends scale.Extents$(dart.legacy(core.String)) {
    static all(range) {
      return new ordinal_extents.OrdinalExtents.new(range);
    }
    get isEmpty() {
      return this[_range$][$isEmpty];
    }
    get length() {
      return this[_range$][$length];
    }
    _get(index) {
      return this[_range$][$_get](index);
    }
    indexOf(value) {
      return this[_range$][$indexOf](value);
    }
  };
  (ordinal_extents.OrdinalExtents.new = function(range) {
    this[_range$] = range;
    let uniqueValueCount = collection.HashSet.from(this[_range$])[$length];
    if (!(uniqueValueCount == range[$length])) dart.assertFailed(null, I[1], 31, 12, "uniqueValueCount == range.length");
  }).prototype = ordinal_extents.OrdinalExtents.prototype;
  dart.addTypeTests(ordinal_extents.OrdinalExtents);
  dart.addTypeCaches(ordinal_extents.OrdinalExtents);
  dart.setMethodSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getMethods(ordinal_extents.OrdinalExtents.__proto__),
    _get: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getGetters(ordinal_extents.OrdinalExtents.__proto__),
    isEmpty: dart.legacy(core.bool),
    length: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_extents.OrdinalExtents, I[3]);
  dart.setFieldSignature(ordinal_extents.OrdinalExtents, () => ({
    __proto__: dart.getFields(ordinal_extents.OrdinalExtents.__proto__),
    [_range$]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var _index = dart.privateName(ordinal_scale_domain_info, "_index");
  var _domainsToOrder = dart.privateName(ordinal_scale_domain_info, "_domainsToOrder");
  var _domainList = dart.privateName(ordinal_scale_domain_info, "_domainList");
  ordinal_scale_domain_info.OrdinalScaleDomainInfo = class OrdinalScaleDomainInfo extends core.Object {
    copy() {
      let t0;
      t0 = new ordinal_scale_domain_info.OrdinalScaleDomainInfo.new();
      return (() => {
        t0[_domainsToOrder][$addAll](this[_domainsToOrder]);
        t0[_index] = this[_index];
        t0[_domainList][$addAll](this[_domainList]);
        return t0;
      })();
    }
    add(domain) {
      if (!dart.test(this[_domainsToOrder][$containsKey](domain))) {
        this[_domainsToOrder][$_set](domain, this[_index]);
        this[_index] = dart.notNull(this[_index]) + 1;
        this[_domainList][$add](domain);
      }
    }
    indexOf(domain) {
      return this[_domainsToOrder][$_get](domain);
    }
    getDomainAtIndex(index) {
      if (!(dart.notNull(index) >= 0)) dart.assertFailed(null, I[4], 53, 12, "index >= 0");
      if (!(dart.notNull(index) < dart.notNull(this[_index]))) dart.assertFailed(null, I[4], 54, 12, "index < _index");
      return this[_domainList][$_get](index);
    }
    get domains() {
      return this[_domainList];
    }
    get first() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$first];
    }
    get last() {
      return dart.test(this[_domainList][$isEmpty]) ? null : this[_domainList][$last];
    }
    get isEmpty() {
      return this[_index] === 0;
    }
    get isNotEmpty() {
      return !dart.test(this.isEmpty);
    }
    get extent() {
      return ordinal_extents.OrdinalExtents.all(this[_domainList]);
    }
    get size() {
      return this[_index];
    }
    clear() {
      this[_domainsToOrder][$clear]();
      this[_domainList][$clear]();
      this[_index] = 0;
    }
  };
  (ordinal_scale_domain_info.OrdinalScaleDomainInfo.new = function() {
    this[_index] = 0;
    this[_domainsToOrder] = new (T$.IdentityMapOfStringL$intL()).new();
    this[_domainList] = T$.JSArrayOfStringL().of([]);
    ;
  }).prototype = ordinal_scale_domain_info.OrdinalScaleDomainInfo.prototype;
  dart.addTypeTests(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.addTypeCaches(ordinal_scale_domain_info.OrdinalScaleDomainInfo);
  dart.setMethodSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getMethods(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    copy: dart.fnType(dart.legacy(ordinal_scale_domain_info.OrdinalScaleDomainInfo), []),
    add: dart.fnType(dart.void, [dart.legacy(core.String)]),
    indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.String)]),
    getDomainAtIndex: dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getGetters(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    domains: dart.legacy(core.List$(dart.legacy(core.String))),
    first: dart.legacy(core.String),
    last: dart.legacy(core.String),
    isEmpty: dart.legacy(core.bool),
    isNotEmpty: dart.legacy(core.bool),
    extent: dart.legacy(ordinal_extents.OrdinalExtents),
    size: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_scale_domain_info.OrdinalScaleDomainInfo, I[5]);
  dart.setFieldSignature(ordinal_scale_domain_info.OrdinalScaleDomainInfo, () => ({
    __proto__: dart.getFields(ordinal_scale_domain_info.OrdinalScaleDomainInfo.__proto__),
    [_index]: dart.fieldType(dart.legacy(core.int)),
    [_domainsToOrder]: dart.finalFieldType(dart.legacy(collection.HashMap$(dart.legacy(core.String), dart.legacy(core.int)))),
    [_domainList]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  const _is_Scale_default = Symbol('_is_Scale_default');
  scale.Scale$ = dart.generic(D => {
    class Scale extends core.Object {}
    (Scale.new = function() {
      ;
    }).prototype = Scale.prototype;
    dart.addTypeTests(Scale);
    Scale.prototype[_is_Scale_default] = true;
    dart.addTypeCaches(Scale);
    dart.setLibraryUri(Scale, I[2]);
    return Scale;
  });
  scale.Scale = scale.Scale$();
  dart.addTypeTests(scale.Scale, _is_Scale_default);
  const _is_MutableScale_default = Symbol('_is_MutableScale_default');
  scale.MutableScale$ = dart.generic(D => {
    class MutableScale extends scale.Scale$(dart.legacy(D)) {}
    (MutableScale.new = function() {
      ;
    }).prototype = MutableScale.prototype;
    dart.addTypeTests(MutableScale);
    MutableScale.prototype[_is_MutableScale_default] = true;
    dart.addTypeCaches(MutableScale);
    dart.setLibraryUri(MutableScale, I[2]);
    return MutableScale;
  });
  scale.MutableScale = scale.MutableScale$();
  dart.addTypeTests(scale.MutableScale, _is_MutableScale_default);
  ordinal_scale.OrdinalScale = class OrdinalScale extends scale.MutableScale$(dart.legacy(core.String)) {};
  (ordinal_scale.OrdinalScale.new = function() {
    ;
  }).prototype = ordinal_scale.OrdinalScale.prototype;
  dart.addTypeTests(ordinal_scale.OrdinalScale);
  dart.addTypeCaches(ordinal_scale.OrdinalScale);
  dart.setLibraryUri(ordinal_scale.OrdinalScale, I[6]);
  const _is_BaseTickProvider_default = Symbol('_is_BaseTickProvider_default');
  tick_provider.BaseTickProvider$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var ListOfDL = () => (ListOfDL = dart.constFn(core.List$(DL())))();
    var ListLOfDL = () => (ListLOfDL = dart.constFn(dart.legacy(ListOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    var TickFormatterOfDL = () => (TickFormatterOfDL = dart.constFn(tick_formatter.TickFormatter$(DL())))();
    var TickFormatterLOfDL = () => (TickFormatterLOfDL = dart.constFn(dart.legacy(TickFormatterOfDL())))();
    var MapOfDL$StringL = () => (MapOfDL$StringL = dart.constFn(core.Map$(DL(), T$.StringL())))();
    var MapLOfDL$StringL = () => (MapLOfDL$StringL = dart.constFn(dart.legacy(MapOfDL$StringL())))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var JSArrayOfTickLOfDL = () => (JSArrayOfTickLOfDL = dart.constFn(_interceptors.JSArray$(TickLOfDL())))();
    class BaseTickProvider extends core.Object {
      createTicks(domainValues, opts) {
        ListLOfDL().as(domainValues);
        let context = opts && 'context' in opts ? opts.context : null;
        let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
        let scale = opts && 'scale' in opts ? opts.scale : null;
        MutableScaleLOfDL().as(scale);
        let formatter = opts && 'formatter' in opts ? opts.formatter : null;
        TickFormatterLOfDL().as(formatter);
        let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
        MapLOfDL$StringL().as(formatterValueCache);
        let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        let ticks = JSArrayOfTickLOfDL().of([]);
        let labels = formatter.format(domainValues, formatterValueCache, {stepSize: stepSize});
        for (let i = 0; i < dart.notNull(domainValues[$length]); i = i + 1) {
          let value = domainValues[$_get](i);
          let tick = new (TickOfDL()).new({value: value, textElement: graphicsFactory.createTextElement(labels[$_get](i)), locationPx: scale._get(value)});
          ticks[$add](tick);
        }
        tickDrawStrategy.decorateTicks(ticks);
        return ticks;
      }
    }
    (BaseTickProvider.new = function() {
      ;
    }).prototype = BaseTickProvider.prototype;
    dart.addTypeTests(BaseTickProvider);
    BaseTickProvider.prototype[_is_BaseTickProvider_default] = true;
    dart.addTypeCaches(BaseTickProvider);
    BaseTickProvider[dart.implements] = () => [tick_provider.TickProvider$(dart.legacy(D))];
    dart.setMethodSignature(BaseTickProvider, () => ({
      __proto__: dart.getMethods(BaseTickProvider.__proto__),
      createTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(D))))), [dart.legacy(core.Object)], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), scale: dart.legacy(core.Object), stepSize: dart.legacy(core.num), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy)}, {})
    }));
    dart.setLibraryUri(BaseTickProvider, I[7]);
    return BaseTickProvider;
  });
  tick_provider.BaseTickProvider = tick_provider.BaseTickProvider$();
  dart.addTypeTests(tick_provider.BaseTickProvider, _is_BaseTickProvider_default);
  ordinal_tick_provider.OrdinalTickProvider = class OrdinalTickProvider extends tick_provider.BaseTickProvider$(dart.legacy(core.String)) {
    getTicks(opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let domainValues = opts && 'domainValues' in opts ? opts.domainValues : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      T$.OrdinalScaleL().as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$.TickFormatterL().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$.MapLOfStringL$StringL().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$.TickHintLOfStringL().as(tickHint);
      return this.createTicks(scale.domain.domains, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: T$.TickFormatterLOfStringL().as(formatter), formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy});
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalTickProviderL().is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (ordinal_tick_provider.OrdinalTickProvider.new = function() {
    ordinal_tick_provider.OrdinalTickProvider.__proto__.new.call(this);
    ;
  }).prototype = ordinal_tick_provider.OrdinalTickProvider.prototype;
  dart.addTypeTests(ordinal_tick_provider.OrdinalTickProvider);
  dart.addTypeCaches(ordinal_tick_provider.OrdinalTickProvider);
  dart.setMethodSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getMethods(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    getTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.String))))), [], {context: dart.legacy(chart_context.ChartContext), domainValues: dart.legacy(core.List$(dart.legacy(core.String))), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), orientation: dart.legacy(axis.AxisOrientation), scale: dart.legacy(core.Object), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(core.Object), viewportExtensionEnabled: dart.legacy(core.bool)}, {}),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(ordinal_tick_provider.OrdinalTickProvider, () => ({
    __proto__: dart.getGetters(ordinal_tick_provider.OrdinalTickProvider.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(ordinal_tick_provider.OrdinalTickProvider, I[8]);
  dart.defineExtensionMethods(ordinal_tick_provider.OrdinalTickProvider, ['_equals']);
  dart.defineExtensionAccessors(ordinal_tick_provider.OrdinalTickProvider, ['hashCode']);
  var zeroBound = dart.privateName(numeric_tick_provider, "NumericTickProvider.zeroBound");
  var dataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataIsInWholeNumbers");
  var dataToAxisUnitConverter = dart.privateName(numeric_tick_provider, "NumericTickProvider.dataToAxisUnitConverter");
  var _desiredMaxTickCount = dart.privateName(numeric_tick_provider, "_desiredMaxTickCount");
  var _desiredMinTickCount = dart.privateName(numeric_tick_provider, "_desiredMinTickCount");
  var _allowedSteps = dart.privateName(numeric_tick_provider, "_allowedSteps");
  var _low = dart.privateName(numeric_tick_provider, "_low");
  var _high = dart.privateName(numeric_tick_provider, "_high");
  var _rangeWidth = dart.privateName(numeric_tick_provider, "_rangeWidth");
  var _minTickCount = dart.privateName(numeric_tick_provider, "_minTickCount");
  var _maxTickCount = dart.privateName(numeric_tick_provider, "_maxTickCount");
  var _prevLow = dart.privateName(numeric_tick_provider, "_prevLow");
  var _prevHigh = dart.privateName(numeric_tick_provider, "_prevHigh");
  var _prevRangeWidth = dart.privateName(numeric_tick_provider, "_prevRangeWidth");
  var _prevMinTickCount = dart.privateName(numeric_tick_provider, "_prevMinTickCount");
  var _prevMaxTickCount = dart.privateName(numeric_tick_provider, "_prevMaxTickCount");
  var _prevDataIsInWholeNumbers = dart.privateName(numeric_tick_provider, "_prevDataIsInWholeNumbers");
  var _getTickValues = dart.privateName(numeric_tick_provider, "_getTickValues");
  var _getTicksFromHint = dart.privateName(numeric_tick_provider, "_getTicksFromHint");
  var _updateDomainExtents = dart.privateName(numeric_tick_provider, "_updateDomainExtents");
  var _hasTickParametersChanged = dart.privateName(numeric_tick_provider, "_hasTickParametersChanged");
  var _updateTickCounts = dart.privateName(numeric_tick_provider, "_updateTickCounts");
  var _getStepsForTickCount = dart.privateName(numeric_tick_provider, "_getStepsForTickCount");
  var _setPreviousTickCalculationParameters = dart.privateName(numeric_tick_provider, "_setPreviousTickCalculationParameters");
  numeric_tick_provider.NumericTickProvider = class NumericTickProvider extends tick_provider.BaseTickProvider$(dart.legacy(core.num)) {
    get zeroBound() {
      return this[zeroBound];
    }
    set zeroBound(value) {
      this[zeroBound] = value;
    }
    get dataIsInWholeNumbers() {
      return this[dataIsInWholeNumbers];
    }
    set dataIsInWholeNumbers(value) {
      this[dataIsInWholeNumbers] = value;
    }
    get dataToAxisUnitConverter() {
      return this[dataToAxisUnitConverter];
    }
    set dataToAxisUnitConverter(value) {
      this[dataToAxisUnitConverter] = value;
    }
    setFixedTickCount(tickCount) {
      this[_desiredMinTickCount] = tickCount != null && dart.notNull(tickCount) > 1 ? tickCount : null;
      this[_desiredMaxTickCount] = this[_desiredMinTickCount];
    }
    setTickCount(maxTickCount, minTickCount) {
      if (maxTickCount != null && dart.notNull(maxTickCount) > 1) {
        this[_desiredMaxTickCount] = maxTickCount;
        if (minTickCount != null && dart.notNull(minTickCount) > 1 && dart.notNull(minTickCount) <= dart.notNull(this[_desiredMaxTickCount])) {
          this[_desiredMinTickCount] = minTickCount;
        } else {
          this[_desiredMinTickCount] = 2;
        }
      } else {
        this[_desiredMaxTickCount] = null;
        this[_desiredMinTickCount] = null;
      }
    }
    set allowedSteps(steps) {
      if (!(steps != null && dart.test(steps[$isNotEmpty]))) dart.assertFailed(null, I[9], 187, 12, "steps != null && steps.isNotEmpty");
      steps[$sort]();
      let stepSet = collection.LinkedHashSet.from(steps);
      this[_allowedSteps] = T$.ListOfdoubleL().new(dart.notNull(stepSet[$length]) * 3);
      let stepIndex = 0;
      for (let t0 of stepSet) {
        let step = T$.doubleL().as(t0);
        if (!(1.0 <= dart.notNull(step) && dart.notNull(step) < 10.0)) dart.assertFailed(null, I[9], 194, 14, "1.0 <= step && step < 10.0");
        this[_allowedSteps][$_set](stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 100));
        this[_allowedSteps][$_set](dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) / 10)[$toDouble]());
        this[_allowedSteps][$_set](2 * dart.notNull(stepSet[$length]) + stepIndex, numeric_tick_provider.NumericTickProvider._removeRoundingErrors(step));
        stepIndex = stepIndex + 1;
      }
    }
    [_getTicksFromHint](opts) {
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      let stepSize = (dart.notNull(tickHint.end) - dart.notNull(tickHint.start)) / (dart.notNull(tickHint.tickCount) - 1);
      let tickZeroShift = dart.notNull(tickHint.start) - stepSize * (dart.notNull(tickHint.start) >= 0 ? (dart.notNull(tickHint.start) / stepSize)[$floor]() : (dart.notNull(tickHint.start) / stepSize)[$ceil]());
      let tickStart = (dart.notNull(scale.viewportDomain.min) / stepSize)[$ceil]() * stepSize + tickZeroShift;
      let stepInfo = new numeric_tick_provider._TickStepInfo.new(stepSize[$abs](), tickStart);
      let tickValues = this[_getTickValues](stepInfo, tickHint.tickCount);
      return this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
    }
    getTicks(opts) {
      let t1, t1$;
      let context = opts && 'context' in opts ? opts.context : null;
      let graphicsFactory = opts && 'graphicsFactory' in opts ? opts.graphicsFactory : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      T$.NumericScaleL().as(scale);
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      T$.TickFormatterLOfnumL().as(formatter);
      let formatterValueCache = opts && 'formatterValueCache' in opts ? opts.formatterValueCache : null;
      T$.MapLOfnumL$StringL().as(formatterValueCache);
      let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
      let orientation = opts && 'orientation' in opts ? opts.orientation : null;
      let viewportExtensionEnabled = opts && 'viewportExtensionEnabled' in opts ? opts.viewportExtensionEnabled : false;
      let tickHint = opts && 'tickHint' in opts ? opts.tickHint : null;
      T$.TickHintLOfnumL().as(tickHint);
      let ticks = null;
      this[_rangeWidth] = scale.rangeWidth;
      this[_updateDomainExtents](scale.viewportDomain);
      if (tickHint != null) {
        return this[_getTicksFromHint]({context: context, graphicsFactory: graphicsFactory, scale: scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, tickHint: tickHint});
      }
      if (dart.test(this[_hasTickParametersChanged]()) || ticks == null) {
        let selectedTicksRange = 1.7976931348623157e+308;
        let foundPreferredTicks = false;
        let viewportDomain = scale.viewportDomain;
        let axisUnitsHigh = this.dataToAxisUnitConverter.convert(this[_high]);
        let axisUnitsLow = this.dataToAxisUnitConverter.convert(this[_low]);
        this[_updateTickCounts](axisUnitsHigh, axisUnitsLow);
        let mutableScale = T$.NumericScaleL().as(dart.test(viewportExtensionEnabled) ? scale.copy() : null);
        for (let tickCount = this[_maxTickCount]; dart.notNull(tickCount) >= dart.notNull(this[_minTickCount]); tickCount = dart.notNull(tickCount) - 1) {
          let stepInfo = this[_getStepsForTickCount](tickCount, axisUnitsHigh, axisUnitsLow);
          if (stepInfo == null) {
            continue;
          }
          let firstTick = this.dataToAxisUnitConverter.invert(stepInfo.tickStart);
          let lastTick = this.dataToAxisUnitConverter.invert(dart.notNull(stepInfo.tickStart) + dart.notNull(stepInfo.stepSize) * (dart.notNull(tickCount) - 1));
          let range = dart.notNull(lastTick) - dart.notNull(firstTick);
          if (range < selectedTicksRange || !foundPreferredTicks) {
            let tickValues = this[_getTickValues](stepInfo, tickCount);
            if (dart.test(viewportExtensionEnabled)) {
              mutableScale.viewportDomain = new numeric_extents.NumericExtents.new(firstTick, lastTick);
            }
            let preferredTicks = this.createTicks(tickValues, {context: context, graphicsFactory: graphicsFactory, scale: dart.test(viewportExtensionEnabled) ? mutableScale : scale, formatter: formatter, formatterValueCache: formatterValueCache, tickDrawStrategy: tickDrawStrategy, stepSize: stepInfo.stepSize});
            let collisionReport = tickDrawStrategy.collides(preferredTicks, orientation);
            if (dart.test(collisionReport.ticksCollide) && dart.notNull(tickCount) > dart.notNull(this[_minTickCount])) {
              continue;
            }
            if (foundPreferredTicks && dart.test(collisionReport.alternateTicksUsed)) {
              continue;
            }
            ticks = T$.ListLOfTickLOfnumL().as(dart.test(collisionReport.alternateTicksUsed) ? collisionReport.ticks : preferredTicks);
            foundPreferredTicks = !dart.test(collisionReport.alternateTicksUsed);
            selectedTicksRange = range;
            viewportDomain = (t1$ = (t1 = mutableScale, t1 == null ? null : t1.viewportDomain), t1$ == null ? scale.viewportDomain : t1$);
          }
        }
        this[_setPreviousTickCalculationParameters]();
        if (dart.test(viewportExtensionEnabled) && !dart.equals(scale.viewportDomain, viewportDomain)) {
          scale.viewportDomain = viewportDomain;
        }
      }
      return ticks;
    }
    [_hasTickParametersChanged]() {
      return this[_low] != this[_prevLow] || this[_high] != this[_prevHigh] || this[_rangeWidth] != this[_prevRangeWidth] || this[_minTickCount] != this[_prevMinTickCount] || this[_maxTickCount] != this[_prevMaxTickCount] || this.dataIsInWholeNumbers != this[_prevDataIsInWholeNumbers];
    }
    [_setPreviousTickCalculationParameters]() {
      this[_prevLow] = this[_low];
      this[_prevHigh] = this[_high];
      this[_prevRangeWidth] = this[_rangeWidth];
      this[_prevMinTickCount] = this[_minTickCount];
      this[_prevMaxTickCount] = this[_maxTickCount];
      this[_prevDataIsInWholeNumbers] = this.dataIsInWholeNumbers;
    }
    [_updateDomainExtents](axisExtents) {
      this[_low] = axisExtents.min;
      this[_high] = axisExtents.max;
      if (dart.test(this.zeroBound)) {
        this[_low] = dart.notNull(this[_low]) > 0.0 ? 0.0 : this[_low];
        this[_high] = dart.notNull(this[_high]) < 0.0 ? 0.0 : this[_high];
      }
      if (this[_high] == this[_low]) {
        if (this[_high] === 0.0) {
          this[_high] = 1.0;
        } else {
          if (dart.notNull(this[_high]) > 0.0) {
            this[_high] = dart.notNull(this[_high]) * 1.05;
            this[_low] = dart.notNull(this[_low]) * 0.95;
          } else {
            this[_high] = dart.notNull(this[_high]) * 0.95;
            this[_low] = dart.notNull(this[_low]) * 1.05;
          }
        }
      }
    }
    [_getStepsForTickCount](tickCount, high, low) {
      let regionCount = dart.notNull(tickCount) - 1;
      if (dart.notNull(high) >= 0 && dart.notNull(low) <= 0) {
        let posRegionRatio = dart.notNull(high) > 0 ? math.min(T$.doubleL(), 1.0, dart.notNull(high) / (dart.notNull(high) - dart.notNull(low))) : 0.0;
        let positiveRegionCount = (regionCount * posRegionRatio)[$ceil]();
        let negativeRegionCount = regionCount - positiveRegionCount;
        if (negativeRegionCount === 0 && dart.notNull(low) < 0 && regionCount > 1) {
          positiveRegionCount = positiveRegionCount - 1;
          negativeRegionCount = negativeRegionCount + 1;
        }
        if (!!(dart.notNull(low) < 0 && dart.notNull(high) > 0 && (negativeRegionCount === 0 || positiveRegionCount === 0))) dart.assertFailed("Numeric tick provider cannot generate " + dart.str(tickCount) + " " + "ticks when the axis range contains both positive and negative " + "values. A minimum of three ticks are required to include zero.", I[9], 434, 11, "!(low < 0 &&\n              high > 0 &&\n              (negativeRegionCount == 0 || positiveRegionCount == 0))");
        let favorPositive = (dart.notNull(high) > 0 ? dart.notNull(high) / positiveRegionCount : 0)[$abs]() > (dart.notNull(low) < 0 ? dart.notNull(low) / negativeRegionCount : 0)[$abs]();
        let favoredNum = (favorPositive ? high : low)[$abs]();
        let favoredRegionCount = favorPositive ? positiveRegionCount : negativeRegionCount;
        let favoredTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(favoredNum)[$abs]();
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * favoredTensBase);
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          if (dart.notNull(tmpStepSize) * favoredRegionCount >= favoredNum) {
            let stepStart = negativeRegionCount > 0 ? -1 * dart.notNull(tmpStepSize) * negativeRegionCount : 0.0;
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, stepStart);
          }
        }
      } else {
        let diffTensBase = numeric_tick_provider.NumericTickProvider._getEnclosingPowerOfTen(dart.notNull(high) - dart.notNull(low));
        for (let step of this[_allowedSteps]) {
          let tmpStepSize = numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(step) * dart.notNull(diffTensBase));
          if (dart.test(this.dataIsInWholeNumbers) && tmpStepSize[$round]() !== tmpStepSize) {
            continue;
          }
          let tmpStepStart = numeric_tick_provider.NumericTickProvider._getStepLessThan(low, tmpStepSize);
          if (dart.notNull(tmpStepStart) + dart.notNull(tmpStepSize) * regionCount >= dart.notNull(high)) {
            return new numeric_tick_provider._TickStepInfo.new(tmpStepSize, tmpStepStart);
          }
        }
      }
      return new numeric_tick_provider._TickStepInfo.new(1.0, low[$floorToDouble]());
    }
    [_getTickValues](steps, tickCount) {
      let tickValues = T$.ListOfdoubleL().new(tickCount);
      for (let i = 0; i < dart.notNull(tickCount); i = i + 1) {
        tickValues[$_set](i, this.dataToAxisUnitConverter.invert(numeric_tick_provider.NumericTickProvider._removeRoundingErrors(dart.notNull(steps.tickStart) + i * dart.notNull(steps.stepSize))));
      }
      return tickValues;
    }
    [_updateTickCounts](high, low) {
      let tmpMaxNumMajorTicks = null;
      let tmpMinNumMajorTicks = null;
      let absoluteMinTicks = dart.notNull(low) < 0 && 0 < dart.notNull(high) ? 3 : 2;
      if (this[_desiredMaxTickCount] != null) {
        tmpMinNumMajorTicks = math.max(T$.intL(), this[_desiredMinTickCount], absoluteMinTicks);
        tmpMaxNumMajorTicks = math.max(T$.intL(), this[_desiredMaxTickCount], tmpMinNumMajorTicks);
      } else {
        let minPixelsPerTick = (25)[$toDouble]();
        tmpMinNumMajorTicks = absoluteMinTicks;
        tmpMaxNumMajorTicks = math.max(T$.intL(), absoluteMinTicks, (dart.notNull(this[_rangeWidth]) / minPixelsPerTick)[$floor]());
      }
      if (tmpMaxNumMajorTicks != this[_maxTickCount] || tmpMinNumMajorTicks != this[_minTickCount]) {
        this[_maxTickCount] = tmpMaxNumMajorTicks;
        this[_minTickCount] = tmpMinNumMajorTicks;
      }
    }
    static _getEnclosingPowerOfTen(number) {
      if (number === 0) {
        return 1.0;
      }
      return math.pow(10, (0.4342944819032518 * math.log(number[$abs]()))[$ceil]()) * (dart.notNull(number) < 0.0 ? -1.0 : 1.0);
    }
    static _getStepLessThan(number, stepSize) {
      if (number === 0.0 || stepSize === 0.0) {
        return 0.0;
      }
      return (dart.notNull(stepSize) > 0.0 ? (dart.notNull(number) / dart.notNull(stepSize))[$floor]() : (dart.notNull(number) / dart.notNull(stepSize))[$ceil]()) * dart.notNull(stepSize);
    }
    static _removeRoundingErrors(number) {
      return dart.notNull(number) > 100.0 ? number[$roundToDouble]() : (dart.notNull(number) * 1000000000)[$roundToDouble]() / 1000000000;
    }
  };
  (numeric_tick_provider.NumericTickProvider.new = function() {
    this[zeroBound] = true;
    this[dataIsInWholeNumbers] = true;
    this[_desiredMaxTickCount] = null;
    this[_desiredMinTickCount] = null;
    this[_allowedSteps] = numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS;
    this[dataToAxisUnitConverter] = C[6] || CT.C6;
    this[_low] = null;
    this[_high] = null;
    this[_rangeWidth] = null;
    this[_minTickCount] = null;
    this[_maxTickCount] = null;
    this[_prevLow] = null;
    this[_prevHigh] = null;
    this[_prevRangeWidth] = null;
    this[_prevMinTickCount] = null;
    this[_prevMaxTickCount] = null;
    this[_prevDataIsInWholeNumbers] = null;
    numeric_tick_provider.NumericTickProvider.__proto__.new.call(this);
    ;
  }).prototype = numeric_tick_provider.NumericTickProvider.prototype;
  dart.addTypeTests(numeric_tick_provider.NumericTickProvider);
  dart.addTypeCaches(numeric_tick_provider.NumericTickProvider);
  dart.setMethodSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getMethods(numeric_tick_provider.NumericTickProvider.__proto__),
    setFixedTickCount: dart.fnType(dart.void, [dart.legacy(core.int)]),
    setTickCount: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
    [_getTicksFromHint]: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.num))))), [], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(tick_formatter.TickFormatter$(dart.legacy(core.num))), formatterValueCache: dart.legacy(core.Map$(dart.legacy(core.num), dart.legacy(core.String))), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), scale: dart.legacy(numeric_scale.NumericScale), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(tick_provider.TickHint$(dart.legacy(core.num)))}, {}),
    getTicks: dart.fnType(dart.legacy(core.List$(dart.legacy(tick.Tick$(dart.legacy(core.num))))), [], {context: dart.legacy(chart_context.ChartContext), formatter: dart.legacy(core.Object), formatterValueCache: dart.legacy(core.Object), graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory), orientation: dart.legacy(axis.AxisOrientation), scale: dart.legacy(core.Object), tickDrawStrategy: dart.legacy(tick_draw_strategy.TickDrawStrategy), tickHint: dart.legacy(core.Object), viewportExtensionEnabled: dart.legacy(core.bool)}, {}),
    [_hasTickParametersChanged]: dart.fnType(dart.legacy(core.bool), []),
    [_setPreviousTickCalculationParameters]: dart.fnType(dart.void, []),
    [_updateDomainExtents]: dart.fnType(dart.void, [dart.legacy(numeric_extents.NumericExtents)]),
    [_getStepsForTickCount]: dart.fnType(dart.legacy(numeric_tick_provider._TickStepInfo), [dart.legacy(core.int), dart.legacy(core.num), dart.legacy(core.num)]),
    [_getTickValues]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.double))), [dart.legacy(numeric_tick_provider._TickStepInfo), dart.legacy(core.int)]),
    [_updateTickCounts]: dart.fnType(dart.void, [dart.legacy(core.num), dart.legacy(core.num)])
  }));
  dart.setSetterSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getSetters(numeric_tick_provider.NumericTickProvider.__proto__),
    allowedSteps: dart.legacy(core.List$(dart.legacy(core.double)))
  }));
  dart.setLibraryUri(numeric_tick_provider.NumericTickProvider, I[10]);
  dart.setFieldSignature(numeric_tick_provider.NumericTickProvider, () => ({
    __proto__: dart.getFields(numeric_tick_provider.NumericTickProvider.__proto__),
    zeroBound: dart.fieldType(dart.legacy(core.bool)),
    dataIsInWholeNumbers: dart.fieldType(dart.legacy(core.bool)),
    [_desiredMaxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_desiredMinTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_allowedSteps]: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.double)))),
    dataToAxisUnitConverter: dart.fieldType(dart.legacy(unit_converter.UnitConverter$(dart.legacy(core.num), dart.legacy(core.num)))),
    [_low]: dart.fieldType(dart.legacy(core.num)),
    [_high]: dart.fieldType(dart.legacy(core.num)),
    [_rangeWidth]: dart.fieldType(dart.legacy(core.int)),
    [_minTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_maxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevLow]: dart.fieldType(dart.legacy(core.num)),
    [_prevHigh]: dart.fieldType(dart.legacy(core.num)),
    [_prevRangeWidth]: dart.fieldType(dart.legacy(core.int)),
    [_prevMinTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevMaxTickCount]: dart.fieldType(dart.legacy(core.int)),
    [_prevDataIsInWholeNumbers]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(numeric_tick_provider.NumericTickProvider, {
    /*numeric_tick_provider.NumericTickProvider.MIN_DIPS_BETWEEN_TICKS*/get MIN_DIPS_BETWEEN_TICKS() {
      return 25;
    },
    /*numeric_tick_provider.NumericTickProvider.DEFAULT_STEPS*/get DEFAULT_STEPS() {
      return C[7] || CT.C7;
    }
  }, true);
  numeric_tick_provider._TickStepInfo = class _TickStepInfo extends core.Object {};
  (numeric_tick_provider._TickStepInfo.new = function(stepSize, tickStart) {
    this.stepSize = stepSize;
    this.tickStart = tickStart;
    ;
  }).prototype = numeric_tick_provider._TickStepInfo.prototype;
  dart.addTypeTests(numeric_tick_provider._TickStepInfo);
  dart.addTypeCaches(numeric_tick_provider._TickStepInfo);
  dart.setLibraryUri(numeric_tick_provider._TickStepInfo, I[10]);
  dart.setFieldSignature(numeric_tick_provider._TickStepInfo, () => ({
    __proto__: dart.getFields(numeric_tick_provider._TickStepInfo.__proto__),
    stepSize: dart.fieldType(dart.legacy(core.double)),
    tickStart: dart.fieldType(dart.legacy(core.double))
  }));
  var range = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.range");
  var keepViewportWithinData = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.keepViewportWithinData");
  var scalingFactor = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.scalingFactor");
  var translatePx = dart.privateName(linear_scale_viewport, "LinearScaleViewportSettings.translatePx");
  var _domainExtent = dart.privateName(linear_scale_viewport, "_domainExtent");
  var _manualDomainExtent = dart.privateName(linear_scale_viewport, "_manualDomainExtent");
  linear_scale_viewport.LinearScaleViewportSettings = class LinearScaleViewportSettings extends core.Object {
    get range() {
      return this[range];
    }
    set range(value) {
      this[range] = value;
    }
    get keepViewportWithinData() {
      return this[keepViewportWithinData];
    }
    set keepViewportWithinData(value) {
      this[keepViewportWithinData] = value;
    }
    get scalingFactor() {
      return this[scalingFactor];
    }
    set scalingFactor(value) {
      this[scalingFactor] = value;
    }
    get translatePx() {
      return this[translatePx];
    }
    set translatePx(value) {
      this[translatePx] = value;
    }
    set domainExtent(extent) {
      this[_domainExtent] = extent;
      this[_manualDomainExtent] = extent != null;
    }
    get domainExtent() {
      return this[_domainExtent];
    }
    reset() {
      this.scalingFactor = 1.0;
      this.translatePx = 0.0;
      this.domainExtent = null;
    }
    get rangeWidth() {
      return this.range.diff[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    updateViewportScaleFactor(domainInfo) {
      let t1, t1$, t1$0, t1$1;
      if (dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = (t1$ = (t1 = this[_domainExtent], t1 == null ? null : t1.width), t1$ == null ? null : t1$[$toDouble]());
        if (domainInfo.domainDiff !== 0.0) {
          this.scalingFactor = dart.notNull(domainInfo.domainDiff) / dart.notNull(viewportDomainDiff);
        } else {
          this.scalingFactor = 1.0;
          domainInfo.extendDomain((t1$0 = this[_domainExtent], t1$0 == null ? null : t1$0.min));
          domainInfo.extendDomain((t1$1 = this[_domainExtent], t1$1 == null ? null : t1$1.max));
        }
      }
      if (!dart.test(this.keepViewportWithinData)) {
        this.scalingFactor = math.max(T$.doubleL(), 1.0, this.scalingFactor);
      }
    }
    updateViewportTranslatePx(domainInfo, scaleScalingFactor) {
      if (dart.test(this[_manualDomainExtent])) {
        this.translatePx = -1.0 * dart.notNull(scaleScalingFactor) * (dart.notNull(this[_domainExtent].min) - dart.notNull(domainInfo.extent.min));
      }
      if (!dart.test(this.keepViewportWithinData)) {
        let rangeDiff = this.range.diff[$toInt]();
        this.translatePx = math.min(T$.doubleL(), 0.0, this.translatePx);
        this.translatePx = math.max(T$.doubleL(), rangeDiff * (1.0 - dart.notNull(this.scalingFactor)), this.translatePx);
      }
    }
    updateViewportDomainExtent(domainInfo, scaleScalingFactor) {
      if (!dart.test(this[_manualDomainExtent])) {
        let viewportDomainDiff = dart.notNull(domainInfo.domainDiff) / dart.notNull(this.scalingFactor);
        let viewportStart = -1.0 * dart.notNull(this.translatePx) / dart.notNull(scaleScalingFactor) + dart.notNull(domainInfo.extent.min);
        this[_domainExtent] = new numeric_extents.NumericExtents.new(viewportStart, viewportStart + viewportDomainDiff);
      }
    }
  };
  (linear_scale_viewport.LinearScaleViewportSettings.new = function() {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    ;
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  (linear_scale_viewport.LinearScaleViewportSettings.copy = function(other) {
    this[range] = null;
    this[keepViewportWithinData] = true;
    this[scalingFactor] = 1.0;
    this[translatePx] = 0.0;
    this[_domainExtent] = null;
    this[_manualDomainExtent] = false;
    this.range = other.range;
    this.keepViewportWithinData = other.keepViewportWithinData;
    this.scalingFactor = other.scalingFactor;
    this.translatePx = other.translatePx;
    this[_manualDomainExtent] = other[_manualDomainExtent];
    this[_domainExtent] = other[_domainExtent];
  }).prototype = linear_scale_viewport.LinearScaleViewportSettings.prototype;
  dart.addTypeTests(linear_scale_viewport.LinearScaleViewportSettings);
  dart.addTypeCaches(linear_scale_viewport.LinearScaleViewportSettings);
  dart.setMethodSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getMethods(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    reset: dart.fnType(dart.void, []),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    updateViewportScaleFactor: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo)]),
    updateViewportTranslatePx: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double)]),
    updateViewportDomainExtent: dart.fnType(dart.void, [dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double)])
  }));
  dart.setGetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getGetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.legacy(numeric_extents.NumericExtents),
    rangeWidth: dart.legacy(core.int)
  }));
  dart.setSetterSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getSetters(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    domainExtent: dart.legacy(numeric_extents.NumericExtents)
  }));
  dart.setLibraryUri(linear_scale_viewport.LinearScaleViewportSettings, I[11]);
  dart.setFieldSignature(linear_scale_viewport.LinearScaleViewportSettings, () => ({
    __proto__: dart.getFields(linear_scale_viewport.LinearScaleViewportSettings.__proto__),
    range: dart.fieldType(dart.legacy(scale.ScaleOutputExtent)),
    keepViewportWithinData: dart.fieldType(dart.legacy(core.bool)),
    scalingFactor: dart.fieldType(dart.legacy(core.double)),
    translatePx: dart.fieldType(dart.legacy(core.double)),
    [_domainExtent]: dart.fieldType(dart.legacy(numeric_extents.NumericExtents)),
    [_manualDomainExtent]: dart.fieldType(dart.legacy(core.bool))
  }));
  var rangeBandPixels = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeBandPixels");
  var domainTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.domainTranslate");
  var scalingFactor$ = dart.privateName(linear_scale_function, "LinearScaleFunction.scalingFactor");
  var rangeTranslate = dart.privateName(linear_scale_function, "LinearScaleFunction.rangeTranslate");
  var stepSizePixels = dart.privateName(linear_scale_function, "LinearScaleFunction.stepSizePixels");
  var _updateStepSizeAndScaleFactor = dart.privateName(linear_scale_function, "_updateStepSizeAndScaleFactor");
  var _calculateRangeBandSize = dart.privateName(linear_scale_function, "_calculateRangeBandSize");
  linear_scale_function.LinearScaleFunction = class LinearScaleFunction extends core.Object {
    get rangeBandPixels() {
      return this[rangeBandPixels];
    }
    set rangeBandPixels(value) {
      this[rangeBandPixels] = value;
    }
    get domainTranslate() {
      return this[domainTranslate];
    }
    set domainTranslate(value) {
      this[domainTranslate] = value;
    }
    get scalingFactor() {
      return this[scalingFactor$];
    }
    set scalingFactor(value) {
      this[scalingFactor$] = value;
    }
    get rangeTranslate() {
      return this[rangeTranslate];
    }
    set rangeTranslate(value) {
      this[rangeTranslate] = value;
    }
    get stepSizePixels() {
      return this[stepSizePixels];
    }
    set stepSizePixels(value) {
      this[stepSizePixels] = value;
    }
    _get(domainValue) {
      return ((dart.notNull(domainValue) + dart.notNull(this.domainTranslate)) * dart.notNull(this.scalingFactor) + dart.notNull(this.rangeTranslate))[$toDouble]();
    }
    reverse(viewPixels) {
      return (dart.notNull(viewPixels) - dart.notNull(this.rangeTranslate)) / dart.notNull(this.scalingFactor) - dart.notNull(this.domainTranslate);
    }
    updateScaleFactor(viewportSettings, domainInfo, rangeBandConfig, stepSizeConfig) {
      let rangeDiff = viewportSettings.range.diff[$toDouble]();
      let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
      let hasHalfStepAtEnd = domainInfo.extent.max == domainInfo.dataDomainEnd;
      let reservedRangePercentOfStep = this.getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd);
      this[_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig);
    }
    getStepReservationPercent(hasHalfStepAtStart, hasHalfStepAtEnd) {
      if (!dart.test(hasHalfStepAtStart) && !dart.test(hasHalfStepAtEnd)) {
        return 0.0;
      }
      if (dart.test(hasHalfStepAtStart) && dart.test(hasHalfStepAtEnd)) {
        return 1.0;
      }
      return 0.5;
    }
    updateTranslateAndRangeBand(viewportSettings, domainInfo, rangeBandConfig) {
      if (domainInfo.domainDiff === 0) {
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.range.diff) / 2;
      } else {
        let hasHalfStepAtStart = domainInfo.extent.min == domainInfo.dataDomainStart;
        let reservedRangePixelShift = hasHalfStepAtStart ? dart.notNull(this.stepSizePixels) / 2.0 : 0.0;
        this.rangeTranslate = dart.notNull(viewportSettings.range.start) + dart.notNull(viewportSettings.translatePx) + reservedRangePixelShift;
      }
      this.domainTranslate = -1 * dart.notNull(domainInfo.extent.min);
      this.rangeBandPixels = this[_calculateRangeBandSize](rangeBandConfig);
    }
    [_calculateRangeBandSize](rangeBandConfig) {
      switch (rangeBandConfig.type) {
        case C[4] || CT.C4:
        {
          return dart.notNull(rangeBandConfig.size) * dart.notNull(this.scalingFactor);
        }
        case C[0] || CT.C0:
        {
          return rangeBandConfig.size;
        }
        case C[1] || CT.C1:
        {
          return dart.notNull(this.stepSizePixels) - dart.notNull(rangeBandConfig.size);
        }
        case C[2] || CT.C2:
        case C[3] || CT.C3:
        {
          return dart.notNull(this.stepSizePixels) * dart.notNull(rangeBandConfig.size);
        }
        case C[5] || CT.C5:
        {
          return 0.0;
        }
      }
      return 0.0;
    }
    [_updateStepSizeAndScaleFactor](viewportSettings, domainInfo, rangeDiff, reservedRangePercentOfStep, rangeBandConfig, stepSizeConfig) {
      let domainDiff = domainInfo.domainDiff;
      if (rangeBandConfig.type != scale.RangeBandType.none) {
        switch (stepSizeConfig.type) {
          case C[8] || CT.C8:
          {
            let minimumDetectedDomainStep = domainInfo.minimumDetectedDomainStep[$toDouble]();
            if (minimumDetectedDomainStep !== null && minimumDetectedDomainStep[$isFinite]) {
              this.scalingFactor = dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / (dart.notNull(domainDiff) + minimumDetectedDomainStep * dart.notNull(reservedRangePercentOfStep)));
              this.stepSizePixels = minimumDetectedDomainStep * dart.notNull(this.scalingFactor);
            } else {
              this.stepSizePixels = rangeDiff[$abs]();
              this.scalingFactor = 1.0;
            }
            return;
          }
          case C[9] || CT.C9:
          {
            this.stepSizePixels = stepSizeConfig.size;
            let reservedRangeForStepPixels = dart.notNull(this.stepSizePixels) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) - reservedRangeForStepPixels) / dart.notNull(domainDiff);
            return;
          }
          case C[10] || CT.C10:
          {
            let domainStepWidth = stepSizeConfig.size;
            let totalDomainDiff = dart.notNull(domainDiff) + dart.notNull(domainStepWidth) * dart.notNull(reservedRangePercentOfStep);
            this.scalingFactor = totalDomainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * (dart.notNull(rangeDiff) / totalDomainDiff);
            this.stepSizePixels = dart.notNull(domainStepWidth) * dart.notNull(this.scalingFactor);
            return;
          }
        }
      }
      this.stepSizePixels = 0.0;
      this.scalingFactor = domainDiff === 0 ? 1.0 : dart.notNull(viewportSettings.scalingFactor) * dart.notNull(rangeDiff) / dart.notNull(domainDiff);
    }
  };
  (linear_scale_function.LinearScaleFunction.new = function() {
    this[rangeBandPixels] = 0.0;
    this[domainTranslate] = 0.0;
    this[scalingFactor$] = 1.0;
    this[rangeTranslate] = 0.0;
    this[stepSizePixels] = 0.0;
    ;
  }).prototype = linear_scale_function.LinearScaleFunction.prototype;
  dart.addTypeTests(linear_scale_function.LinearScaleFunction);
  dart.addTypeCaches(linear_scale_function.LinearScaleFunction);
  dart.setMethodSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getMethods(linear_scale_function.LinearScaleFunction.__proto__),
    _get: dart.fnType(dart.legacy(core.double), [dart.legacy(core.num)]),
    reverse: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    updateScaleFactor: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(scale.RangeBandConfig), dart.legacy(scale.StepSizeConfig)]),
    getStepReservationPercent: dart.fnType(dart.legacy(core.double), [dart.legacy(core.bool), dart.legacy(core.bool)]),
    updateTranslateAndRangeBand: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(scale.RangeBandConfig)]),
    [_calculateRangeBandSize]: dart.fnType(dart.legacy(core.double), [dart.legacy(scale.RangeBandConfig)]),
    [_updateStepSizeAndScaleFactor]: dart.fnType(dart.void, [dart.legacy(linear_scale_viewport.LinearScaleViewportSettings), dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo), dart.legacy(core.double), dart.legacy(core.double), dart.legacy(scale.RangeBandConfig), dart.legacy(scale.StepSizeConfig)])
  }));
  dart.setLibraryUri(linear_scale_function.LinearScaleFunction, I[12]);
  dart.setFieldSignature(linear_scale_function.LinearScaleFunction, () => ({
    __proto__: dart.getFields(linear_scale_function.LinearScaleFunction.__proto__),
    rangeBandPixels: dart.fieldType(dart.legacy(core.double)),
    domainTranslate: dart.fieldType(dart.legacy(core.num)),
    scalingFactor: dart.fieldType(dart.legacy(core.double)),
    rangeTranslate: dart.fieldType(dart.legacy(core.double)),
    stepSizePixels: dart.fieldType(dart.legacy(core.double))
  }));
  var domainOverride = dart.privateName(linear_scale_domain_info, "LinearScaleDomainInfo.domainOverride");
  var _dataDomainStart = dart.privateName(linear_scale_domain_info, "_dataDomainStart");
  var _dataDomainEnd = dart.privateName(linear_scale_domain_info, "_dataDomainEnd");
  var _previouslyAddedDomain = dart.privateName(linear_scale_domain_info, "_previouslyAddedDomain");
  var _minimumDetectedDomainStep = dart.privateName(linear_scale_domain_info, "_minimumDetectedDomainStep");
  linear_scale_domain_info.LinearScaleDomainInfo = class LinearScaleDomainInfo extends core.Object {
    get domainOverride() {
      return this[domainOverride];
    }
    set domainOverride(value) {
      this[domainOverride] = value;
    }
    get dataDomainStart() {
      return this[_dataDomainStart];
    }
    get dataDomainEnd() {
      return this[_dataDomainEnd];
    }
    get minimumDetectedDomainStep() {
      return this[_minimumDetectedDomainStep];
    }
    get domainDiff() {
      return this.extent.width;
    }
    reset() {
      this[_previouslyAddedDomain] = null;
      this[_dataDomainStart] = 1 / 0;
      this[_dataDomainEnd] = -1 / 0;
      this[_minimumDetectedDomainStep] = 1 / 0;
    }
    addDomainValue(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return;
      }
      this.extendDomain(domainValue);
      if (this[_previouslyAddedDomain] != null) {
        let domainStep = (dart.notNull(domainValue) - dart.notNull(this[_previouslyAddedDomain]))[$abs]();
        if (domainStep !== 0.0 && domainStep < dart.notNull(this.minimumDetectedDomainStep)) {
          this[_minimumDetectedDomainStep] = domainStep;
        }
      }
      this[_previouslyAddedDomain] = domainValue;
    }
    extendDomain(domainValue) {
      if (domainValue == null || !domainValue[$isFinite]) {
        return false;
      }
      let domainExtended = false;
      if (dart.notNull(domainValue) < dart.notNull(this[_dataDomainStart])) {
        this[_dataDomainStart] = domainValue;
        domainExtended = true;
      }
      if (dart.notNull(domainValue) > dart.notNull(this[_dataDomainEnd])) {
        this[_dataDomainEnd] = domainValue;
        domainExtended = true;
      }
      return domainExtended;
    }
    get extent() {
      let tmpDomainStart = null;
      let tmpDomainEnd = null;
      if (this.domainOverride != null) {
        tmpDomainStart = this.domainOverride.min;
        tmpDomainEnd = this.domainOverride.max;
      } else {
        tmpDomainStart = this[_dataDomainStart][$isFinite] ? this[_dataDomainStart] : 0.0;
        tmpDomainEnd = this[_dataDomainEnd][$isFinite] ? this[_dataDomainEnd] : 1.0;
      }
      return new numeric_extents.NumericExtents.new(tmpDomainStart, tmpDomainEnd);
    }
  };
  (linear_scale_domain_info.LinearScaleDomainInfo.new = function() {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    ;
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  (linear_scale_domain_info.LinearScaleDomainInfo.copy = function(other) {
    this[domainOverride] = null;
    this[_dataDomainStart] = 1 / 0;
    this[_dataDomainEnd] = -1 / 0;
    this[_previouslyAddedDomain] = null;
    this[_minimumDetectedDomainStep] = 1 / 0;
    if (other.domainOverride != null) {
      this.domainOverride = other.domainOverride;
    }
    this[_dataDomainStart] = other[_dataDomainStart];
    this[_dataDomainEnd] = other[_dataDomainEnd];
    this[_previouslyAddedDomain] = other[_previouslyAddedDomain];
    this[_minimumDetectedDomainStep] = other[_minimumDetectedDomainStep];
  }).prototype = linear_scale_domain_info.LinearScaleDomainInfo.prototype;
  dart.addTypeTests(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.addTypeCaches(linear_scale_domain_info.LinearScaleDomainInfo);
  dart.setMethodSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getMethods(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    reset: dart.fnType(dart.void, []),
    addDomainValue: dart.fnType(dart.void, [dart.legacy(core.num)]),
    extendDomain: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.num)])
  }));
  dart.setGetterSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getGetters(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    dataDomainStart: dart.legacy(core.num),
    dataDomainEnd: dart.legacy(core.num),
    minimumDetectedDomainStep: dart.legacy(core.num),
    domainDiff: dart.legacy(core.num),
    extent: dart.legacy(numeric_extents.NumericExtents)
  }));
  dart.setLibraryUri(linear_scale_domain_info.LinearScaleDomainInfo, I[13]);
  dart.setFieldSignature(linear_scale_domain_info.LinearScaleDomainInfo, () => ({
    __proto__: dart.getFields(linear_scale_domain_info.LinearScaleDomainInfo.__proto__),
    domainOverride: dart.fieldType(dart.legacy(numeric_extents.NumericExtents)),
    [_dataDomainStart]: dart.fieldType(dart.legacy(core.num)),
    [_dataDomainEnd]: dart.fieldType(dart.legacy(core.num)),
    [_previouslyAddedDomain]: dart.fieldType(dart.legacy(core.num)),
    [_minimumDetectedDomainStep]: dart.fieldType(dart.legacy(core.num))
  }));
  numeric_scale.NumericScale = class NumericScale extends scale.MutableScale$(dart.legacy(core.num)) {};
  (numeric_scale.NumericScale.new = function() {
    ;
  }).prototype = numeric_scale.NumericScale.prototype;
  dart.addTypeTests(numeric_scale.NumericScale);
  dart.addTypeCaches(numeric_scale.NumericScale);
  dart.setLibraryUri(numeric_scale.NumericScale, I[14]);
  var min$ = dart.privateName(numeric_extents, "NumericExtents.min");
  var max$ = dart.privateName(numeric_extents, "NumericExtents.max");
  var _containsValue = dart.privateName(numeric_extents, "_containsValue");
  numeric_extents.NumericExtents = class NumericExtents extends core.Object {
    get min() {
      return this[min$];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max$];
    }
    set max(value) {
      super.max = value;
    }
    static fromValues(values) {
      if (dart.test(values[$isEmpty])) {
        return numeric_extents.NumericExtents.empty;
      }
      let min = values[$first];
      let max = values[$first];
      for (let value of values) {
        if (dart.notNull(value) < dart.notNull(min)) {
          min = value;
        } else if (dart.notNull(max) < dart.notNull(value)) {
          max = value;
        }
      }
      return new numeric_extents.NumericExtents.new(min, max);
    }
    plus(other) {
      if (dart.notNull(this.min) <= dart.notNull(other.min)) {
        if (dart.notNull(this.max) >= dart.notNull(other.max)) {
          return this;
        } else {
          return new numeric_extents.NumericExtents.new(this.min, other.max);
        }
      } else {
        if (dart.notNull(other.max) >= dart.notNull(this.max)) {
          return other;
        } else {
          return new numeric_extents.NumericExtents.new(other.min, this.max);
        }
      }
    }
    compareValue(value) {
      if (dart.notNull(value) < dart.notNull(this.min)) {
        return -1;
      }
      if (dart.notNull(value) > dart.notNull(this.max)) {
        return 1;
      }
      return 0;
    }
    [_containsValue](value) {
      return this.compareValue(value) === 0;
    }
    overlaps(other) {
      return dart.test(this[_containsValue](other.min)) || dart.test(this[_containsValue](other.max)) || dart.test(other[_containsValue](this.min)) || dart.test(other[_containsValue](this.max));
    }
    _equals(other) {
      if (other == null) return false;
      return T$.NumericExtentsL().is(other) && this.min == other.min && this.max == other.max;
    }
    get hashCode() {
      return dart.hashCode(this.min) + dart.hashCode(this.max) * 31;
    }
    get width() {
      return dart.notNull(this.max) - dart.notNull(this.min);
    }
    toString() {
      return "Extent(" + dart.str(this.min) + ", " + dart.str(this.max) + ")";
    }
  };
  (numeric_extents.NumericExtents.new = function(min, max) {
    this[min$] = min;
    this[max$] = max;
    ;
  }).prototype = numeric_extents.NumericExtents.prototype;
  dart.addTypeTests(numeric_extents.NumericExtents);
  dart.addTypeCaches(numeric_extents.NumericExtents);
  numeric_extents.NumericExtents[dart.implements] = () => [scale.Extents$(dart.legacy(core.num))];
  dart.setMethodSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getMethods(numeric_extents.NumericExtents.__proto__),
    plus: dart.fnType(dart.legacy(numeric_extents.NumericExtents), [dart.legacy(numeric_extents.NumericExtents)]),
    compareValue: dart.fnType(dart.legacy(core.int), [dart.legacy(core.num)]),
    [_containsValue]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    overlaps: dart.fnType(dart.legacy(core.bool), [dart.legacy(numeric_extents.NumericExtents)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getGetters(numeric_extents.NumericExtents.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int),
    width: dart.legacy(core.num)
  }));
  dart.setLibraryUri(numeric_extents.NumericExtents, I[15]);
  dart.setFieldSignature(numeric_extents.NumericExtents, () => ({
    __proto__: dart.getFields(numeric_extents.NumericExtents.__proto__),
    min: dart.finalFieldType(dart.legacy(core.num)),
    max: dart.finalFieldType(dart.legacy(core.num))
  }));
  dart.defineExtensionMethods(numeric_extents.NumericExtents, ['_equals', 'toString']);
  dart.defineExtensionAccessors(numeric_extents.NumericExtents, ['hashCode']);
  dart.defineLazy(numeric_extents.NumericExtents, {
    /*numeric_extents.NumericExtents.unbounded*/get unbounded() {
      return C[11] || CT.C11;
    },
    /*numeric_extents.NumericExtents.empty*/get empty() {
      return C[12] || CT.C12;
    }
  }, true);
  var rangeBandConfig = dart.privateName(linear_scale, "LinearScale.rangeBandConfig");
  var stepSizeConfig = dart.privateName(linear_scale, "LinearScale.stepSizeConfig");
  var _scaleFunction = dart.privateName(linear_scale, "_scaleFunction");
  var RangeBandConfig_size = dart.privateName(scale, "RangeBandConfig.size");
  var RangeBandConfig_type = dart.privateName(scale, "RangeBandConfig.type");
  var StepSizeConfig_size = dart.privateName(scale, "StepSizeConfig.size");
  var StepSizeConfig_type = dart.privateName(scale, "StepSizeConfig.type");
  var _scaleReady = dart.privateName(linear_scale, "_scaleReady");
  var _domainInfo = dart.privateName(linear_scale, "_domainInfo");
  var _viewportSettings = dart.privateName(linear_scale, "_viewportSettings");
  var _configureScale = dart.privateName(linear_scale, "_configureScale");
  linear_scale.LinearScale = class LinearScale extends core.Object {
    get rangeBandConfig() {
      return this[rangeBandConfig];
    }
    set rangeBandConfig(value) {
      this[rangeBandConfig] = value;
    }
    get stepSizeConfig() {
      return this[stepSizeConfig];
    }
    set stepSizeConfig(value) {
      this[stepSizeConfig] = value;
    }
    copy() {
      return new linear_scale.LinearScale._copy(this);
    }
    addDomain(domainValue) {
      T$.numL().as(domainValue);
      this[_domainInfo].addDomainValue(domainValue);
    }
    resetDomain() {
      this[_scaleReady] = false;
      this[_domainInfo].reset();
    }
    resetViewportSettings() {
      this[_viewportSettings].reset();
    }
    get dataExtent() {
      return new numeric_extents.NumericExtents.new(this[_domainInfo].dataDomainStart, this[_domainInfo].dataDomainEnd);
    }
    get minimumDomainStep() {
      return this[_domainInfo].minimumDetectedDomainStep;
    }
    canTranslate(_) {
      T$.numL().as(_);
      return true;
    }
    set domainOverride(domainMaxExtent) {
      this[_domainInfo].domainOverride = domainMaxExtent;
    }
    get domainOverride() {
      return this[_domainInfo].domainOverride;
    }
    compareDomainValueToViewport(domainValue) {
      T$.numL().as(domainValue);
      let dataExtent = this[_viewportSettings].domainExtent != null ? this[_viewportSettings].domainExtent : this[_domainInfo].extent;
      return dataExtent.compareValue(domainValue);
    }
    setViewportSettings(viewportScale, viewportTranslatePx) {
      let t1;
      t1 = this[_viewportSettings];
      (() => {
        t1.scalingFactor = viewportScale;
        t1.translatePx = viewportTranslatePx;
        t1.domainExtent = null;
        return t1;
      })();
      this[_scaleReady] = false;
    }
    get viewportScalingFactor() {
      return this[_viewportSettings].scalingFactor;
    }
    get viewportTranslatePx() {
      return this[_viewportSettings].translatePx;
    }
    set viewportDomain(extent) {
      this[_scaleReady] = false;
      this[_viewportSettings].domainExtent = extent;
    }
    get viewportDomain() {
      this[_configureScale]();
      return this[_viewportSettings].domainExtent;
    }
    set keepViewportWithinData(autoAdjustViewportToNiceValues) {
      this[_scaleReady] = false;
      this[_viewportSettings].keepViewportWithinData = true;
    }
    get keepViewportWithinData() {
      return this[_viewportSettings].keepViewportWithinData;
    }
    computeViewportScaleFactor(domainWindow) {
      return dart.notNull(this[_domainInfo].domainDiff) / dart.notNull(domainWindow);
    }
    set range(extent) {
      this[_viewportSettings].range = extent;
      this[_scaleReady] = false;
    }
    get range() {
      return this[_viewportSettings].range;
    }
    _get(domainValue) {
      T$.numL().as(domainValue);
      this[_configureScale]();
      return this[_scaleFunction]._get(domainValue);
    }
    reverse(viewPixels) {
      this[_configureScale]();
      let domain = this[_scaleFunction].reverse(viewPixels);
      return domain;
    }
    get rangeBand() {
      this[_configureScale]();
      return this[_scaleFunction].rangeBandPixels;
    }
    get stepSize() {
      this[_configureScale]();
      return this[_scaleFunction].stepSizePixels;
    }
    get domainStepSize() {
      return this[_domainInfo].minimumDetectedDomainStep[$toDouble]();
    }
    get rangeWidth() {
      return (dart.notNull(this.range.end) - dart.notNull(this.range.start))[$abs]()[$toInt]();
    }
    isRangeValueWithinViewport(rangeValue) {
      return this.range.containsValue(rangeValue);
    }
    [_configureScale]() {
      if (dart.test(this[_scaleReady])) return;
      if (!(this[_viewportSettings].range != null)) dart.assertFailed(null, I[16], 217, 12, "_viewportSettings.range != null");
      this[_viewportSettings].updateViewportScaleFactor(this[_domainInfo]);
      this[_scaleFunction].updateScaleFactor(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig, this.stepSizeConfig);
      this[_viewportSettings].updateViewportTranslatePx(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleFunction].updateTranslateAndRangeBand(this[_viewportSettings], this[_domainInfo], this.rangeBandConfig);
      this[_viewportSettings].updateViewportDomainExtent(this[_domainInfo], this[_scaleFunction].scalingFactor);
      this[_scaleReady] = true;
    }
  };
  (linear_scale.LinearScale.new = function() {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[rangeBandConfig] = C[13] || CT.C13;
    this[stepSizeConfig] = C[14] || CT.C14;
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.new();
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.new();
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  (linear_scale.LinearScale._copy = function(other) {
    this[_scaleFunction] = new linear_scale_function.LinearScaleFunction.new();
    this[_scaleReady] = false;
    this[_domainInfo] = new linear_scale_domain_info.LinearScaleDomainInfo.copy(other[_domainInfo]);
    this[_viewportSettings] = new linear_scale_viewport.LinearScaleViewportSettings.copy(other[_viewportSettings]);
    this[rangeBandConfig] = other.rangeBandConfig;
    this[stepSizeConfig] = other.stepSizeConfig;
    ;
  }).prototype = linear_scale.LinearScale.prototype;
  dart.addTypeTests(linear_scale.LinearScale);
  dart.addTypeCaches(linear_scale.LinearScale);
  linear_scale.LinearScale[dart.implements] = () => [numeric_scale.NumericScale];
  dart.setMethodSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getMethods(linear_scale.LinearScale.__proto__),
    copy: dart.fnType(dart.legacy(linear_scale.LinearScale), []),
    addDomain: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    resetDomain: dart.fnType(dart.void, []),
    resetViewportSettings: dart.fnType(dart.void, []),
    canTranslate: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)]),
    computeViewportScaleFactor: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    _get: dart.fnType(dart.legacy(core.num), [dart.legacy(core.Object)]),
    reverse: dart.fnType(dart.legacy(core.num), [dart.legacy(core.double)]),
    isRangeValueWithinViewport: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    [_configureScale]: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getGetters(linear_scale.LinearScale.__proto__),
    dataExtent: dart.legacy(numeric_extents.NumericExtents),
    minimumDomainStep: dart.legacy(core.num),
    domainOverride: dart.legacy(numeric_extents.NumericExtents),
    viewportScalingFactor: dart.legacy(core.double),
    viewportTranslatePx: dart.legacy(core.double),
    viewportDomain: dart.legacy(numeric_extents.NumericExtents),
    keepViewportWithinData: dart.legacy(core.bool),
    range: dart.legacy(scale.ScaleOutputExtent),
    rangeBand: dart.legacy(core.double),
    stepSize: dart.legacy(core.double),
    domainStepSize: dart.legacy(core.double),
    rangeWidth: dart.legacy(core.int)
  }));
  dart.setSetterSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getSetters(linear_scale.LinearScale.__proto__),
    domainOverride: dart.legacy(numeric_extents.NumericExtents),
    viewportDomain: dart.legacy(numeric_extents.NumericExtents),
    keepViewportWithinData: dart.legacy(core.bool),
    range: dart.legacy(scale.ScaleOutputExtent)
  }));
  dart.setLibraryUri(linear_scale.LinearScale, I[17]);
  dart.setFieldSignature(linear_scale.LinearScale, () => ({
    __proto__: dart.getFields(linear_scale.LinearScale.__proto__),
    [_domainInfo]: dart.finalFieldType(dart.legacy(linear_scale_domain_info.LinearScaleDomainInfo)),
    [_viewportSettings]: dart.finalFieldType(dart.legacy(linear_scale_viewport.LinearScaleViewportSettings)),
    [_scaleFunction]: dart.finalFieldType(dart.legacy(linear_scale_function.LinearScaleFunction)),
    rangeBandConfig: dart.fieldType(dart.legacy(scale.RangeBandConfig)),
    stepSizeConfig: dart.fieldType(dart.legacy(scale.StepSizeConfig)),
    [_scaleReady]: dart.fieldType(dart.legacy(core.bool))
  }));
  var labelStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelStyle");
  var labelAnchor$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelAnchor");
  var labelJustification$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelJustification");
  var labelOffsetFromAxisPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromAxisPx");
  var labelOffsetFromTickPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelOffsetFromTickPx");
  var minimumPaddingBetweenLabelsPx$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.minimumPaddingBetweenLabelsPx");
  var labelRotation$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.labelRotation");
  var axisLineStyle$ = dart.privateName(base_tick_draw_strategy, "BaseRenderSpec.axisLineStyle");
  const _is_BaseRenderSpec_default = Symbol('_is_BaseRenderSpec_default');
  base_tick_draw_strategy.BaseRenderSpec$ = dart.generic(D => {
    class BaseRenderSpec extends core.Object {
      get labelStyle() {
        return this[labelStyle$];
      }
      set labelStyle(value) {
        super.labelStyle = value;
      }
      get labelAnchor() {
        return this[labelAnchor$];
      }
      set labelAnchor(value) {
        super.labelAnchor = value;
      }
      get labelJustification() {
        return this[labelJustification$];
      }
      set labelJustification(value) {
        super.labelJustification = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$];
      }
      set labelOffsetFromAxisPx(value) {
        super.labelOffsetFromAxisPx = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$];
      }
      set labelOffsetFromTickPx(value) {
        super.labelOffsetFromTickPx = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        super.minimumPaddingBetweenLabelsPx = value;
      }
      get labelRotation() {
        return this[labelRotation$];
      }
      set labelRotation(value) {
        super.labelRotation = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle$];
      }
      set axisLineStyle(value) {
        super.axisLineStyle = value;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.BaseRenderSpecL().is(other) && dart.equals(this.labelStyle, other.labelStyle) && this.labelAnchor == other.labelAnchor && this.labelJustification == other.labelJustification && this.labelOffsetFromTickPx == other.labelOffsetFromTickPx && this.labelOffsetFromAxisPx == other.labelOffsetFromAxisPx && this.minimumPaddingBetweenLabelsPx == other.minimumPaddingBetweenLabelsPx && this.labelRotation == other.labelRotation && dart.equals(this.axisLineStyle, other.axisLineStyle);
      }
      get hashCode() {
        let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13;
        let hashcode = (t1$ = (t1 = this.labelStyle, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
        hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.labelAnchor, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
        hashcode = (t1$3 = dart.notNull(hashcode) * 37 + dart.notNull((t1$2 = this.labelJustification, t1$2 == null ? null : dart.hashCode(t1$2))), t1$3 === null ? 0 : t1$3);
        hashcode = (t1$5 = dart.notNull(hashcode) * 37 + dart.notNull((t1$4 = this.labelOffsetFromTickPx, t1$4 == null ? null : dart.hashCode(t1$4))), t1$5 === null ? 0 : t1$5);
        hashcode = (t1$7 = dart.notNull(hashcode) * 37 + dart.notNull((t1$6 = this.labelOffsetFromAxisPx, t1$6 == null ? null : dart.hashCode(t1$6))), t1$7 === null ? 0 : t1$7);
        hashcode = (t1$9 = dart.notNull(hashcode) * 37 + dart.notNull((t1$8 = this.minimumPaddingBetweenLabelsPx, t1$8 == null ? null : dart.hashCode(t1$8))), t1$9 === null ? 0 : t1$9);
        hashcode = (t1$11 = dart.notNull(hashcode) * 37 + dart.notNull((t1$10 = this.labelRotation, t1$10 == null ? null : dart.hashCode(t1$10))), t1$11 === null ? 0 : t1$11);
        hashcode = (t1$13 = dart.notNull(hashcode) * 37 + dart.notNull((t1$12 = this.axisLineStyle, t1$12 == null ? null : dart.hashCode(t1$12))), t1$13 === null ? 0 : t1$13);
        return hashcode;
      }
    }
    (BaseRenderSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      this[labelStyle$] = labelStyle;
      this[labelAnchor$] = labelAnchor;
      this[labelJustification$] = labelJustification;
      this[labelOffsetFromAxisPx$] = labelOffsetFromAxisPx;
      this[labelOffsetFromTickPx$] = labelOffsetFromTickPx;
      this[minimumPaddingBetweenLabelsPx$] = minimumPaddingBetweenLabelsPx;
      this[labelRotation$] = labelRotation;
      this[axisLineStyle$] = axisLineStyle;
      ;
    }).prototype = BaseRenderSpec.prototype;
    dart.addTypeTests(BaseRenderSpec);
    BaseRenderSpec.prototype[_is_BaseRenderSpec_default] = true;
    dart.addTypeCaches(BaseRenderSpec);
    BaseRenderSpec[dart.implements] = () => [axis_spec.RenderSpec$(dart.legacy(D))];
    dart.setMethodSignature(BaseRenderSpec, () => ({
      __proto__: dart.getMethods(BaseRenderSpec.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(BaseRenderSpec, () => ({
      __proto__: dart.getGetters(BaseRenderSpec.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(BaseRenderSpec, I[18]);
    dart.setFieldSignature(BaseRenderSpec, () => ({
      __proto__: dart.getFields(BaseRenderSpec.__proto__),
      labelStyle: dart.finalFieldType(dart.legacy(axis_spec.TextStyleSpec)),
      labelAnchor: dart.finalFieldType(dart.legacy(axis_spec.TickLabelAnchor)),
      labelJustification: dart.finalFieldType(dart.legacy(axis_spec.TickLabelJustification)),
      labelOffsetFromAxisPx: dart.finalFieldType(dart.legacy(core.int)),
      labelOffsetFromTickPx: dart.finalFieldType(dart.legacy(core.int)),
      minimumPaddingBetweenLabelsPx: dart.finalFieldType(dart.legacy(core.int)),
      labelRotation: dart.finalFieldType(dart.legacy(core.int)),
      axisLineStyle: dart.finalFieldType(dart.legacy(axis_spec.LineStyleSpec))
    }));
    dart.defineExtensionMethods(BaseRenderSpec, ['_equals']);
    dart.defineExtensionAccessors(BaseRenderSpec, ['hashCode']);
    return BaseRenderSpec;
  });
  base_tick_draw_strategy.BaseRenderSpec = base_tick_draw_strategy.BaseRenderSpec$();
  dart.addTypeTests(base_tick_draw_strategy.BaseRenderSpec, _is_BaseRenderSpec_default);
  var chartContext$ = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.chartContext");
  var axisLineStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.axisLineStyle");
  var labelStyle = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelStyle");
  var tickLabelAnchor = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelAnchor");
  var tickLabelJustification = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.tickLabelJustification");
  var labelOffsetFromAxisPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromAxisPx");
  var labelOffsetFromTickPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelOffsetFromTickPx");
  var minimumPaddingBetweenLabelsPx$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.minimumPaddingBetweenLabelsPx");
  var labelRotation$0 = dart.privateName(base_tick_draw_strategy, "BaseTickDrawStrategy.labelRotation");
  var _normalizeHorizontalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeHorizontalAnchor");
  var _name = dart.privateName(text_element, "_name");
  var _calculateWidthForRotatedLabel = dart.privateName(base_tick_draw_strategy, "_calculateWidthForRotatedLabel");
  var _calculateHeightForRotatedLabel = dart.privateName(base_tick_draw_strategy, "_calculateHeightForRotatedLabel");
  var _name$0 = dart.privateName(axis, "_name");
  var _name$1 = dart.privateName(base_tick_draw_strategy, "_name");
  var _normalizeVerticalAnchor = dart.privateName(base_tick_draw_strategy, "_normalizeVerticalAnchor");
  var _name$2 = dart.privateName(axis_spec, "_name");
  const _is_BaseTickDrawStrategy_default = Symbol('_is_BaseTickDrawStrategy_default');
  base_tick_draw_strategy.BaseTickDrawStrategy$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var ListOfTickLOfDL = () => (ListOfTickLOfDL = dart.constFn(core.List$(TickLOfDL())))();
    var ListLOfTickLOfDL = () => (ListLOfTickLOfDL = dart.constFn(dart.legacy(ListOfTickLOfDL())))();
    var TickLOfDLAndTickLOfDLTointL = () => (TickLOfDLAndTickLOfDLTointL = dart.constFn(dart.fnType(T$.intL(), [TickLOfDL(), TickLOfDL()])))();
    var doubleLAndTickLOfDLTodoubleL = () => (doubleLAndTickLOfDLTodoubleL = dart.constFn(dart.fnType(T$.doubleL(), [T$.doubleL(), TickLOfDL()])))();
    class BaseTickDrawStrategy extends core.Object {
      get chartContext() {
        return this[chartContext$];
      }
      set chartContext(value) {
        super.chartContext = value;
      }
      get axisLineStyle() {
        return this[axisLineStyle];
      }
      set axisLineStyle(value) {
        this[axisLineStyle] = value;
      }
      get labelStyle() {
        return this[labelStyle];
      }
      set labelStyle(value) {
        this[labelStyle] = value;
      }
      get tickLabelAnchor() {
        return this[tickLabelAnchor];
      }
      set tickLabelAnchor(value) {
        this[tickLabelAnchor] = value;
      }
      get tickLabelJustification() {
        return this[tickLabelJustification];
      }
      set tickLabelJustification(value) {
        this[tickLabelJustification] = value;
      }
      get labelOffsetFromAxisPx() {
        return this[labelOffsetFromAxisPx$0];
      }
      set labelOffsetFromAxisPx(value) {
        this[labelOffsetFromAxisPx$0] = value;
      }
      get labelOffsetFromTickPx() {
        return this[labelOffsetFromTickPx$0];
      }
      set labelOffsetFromTickPx(value) {
        this[labelOffsetFromTickPx$0] = value;
      }
      get minimumPaddingBetweenLabelsPx() {
        return this[minimumPaddingBetweenLabelsPx$0];
      }
      set minimumPaddingBetweenLabelsPx(value) {
        this[minimumPaddingBetweenLabelsPx$0] = value;
      }
      get labelRotation() {
        return this[labelRotation$0];
      }
      set labelRotation(value) {
        this[labelRotation$0] = value;
      }
      static _degToRad(deg) {
        return dart.notNull(deg) * (3.141592653589793 / 180.0);
      }
      decorateTicks(ticks) {
        let t1, t1$, t1$0, t1$1;
        ListLOfTickLOfDL().as(ticks);
        for (let tick of ticks) {
          if (tick.textElement.textStyle == null) {
            tick.textElement.textStyle = this.labelStyle;
          } else {
            t1 = tick.textElement.textStyle;
            t1.color == null ? t1.color = this.labelStyle.color : null;
            t1$ = tick.textElement.textStyle;
            t1$.fontFamily == null ? t1$.fontFamily = this.labelStyle.fontFamily : null;
            t1$0 = tick.textElement.textStyle;
            t1$0.fontSize == null ? t1$0.fontSize = this.labelStyle.fontSize : null;
            t1$1 = tick.textElement.textStyle;
            t1$1.lineHeight == null ? t1$1.lineHeight = this.labelStyle.lineHeight : null;
          }
        }
      }
      collides(ticks, orientation) {
        ListLOfTickLOfDL().as(ticks);
        if (ticks == null) {
          return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
        }
        let vertical = orientation == axis.AxisOrientation.left || orientation == axis.AxisOrientation.right;
        ticks[$sort](dart.fn((a, b) => {
          if (dart.notNull(a.locationPx) < dart.notNull(b.locationPx)) {
            return -1;
          } else if (dart.notNull(a.locationPx) > dart.notNull(b.locationPx)) {
            return 1;
          } else {
            return 0;
          }
        }, TickLOfDLAndTickLOfDLTointL()));
        let previousEnd = -1 / 0;
        let collides = false;
        for (let tick of ticks) {
          let tickSize = tick.textElement.measurement;
          if (vertical) {
            let adjustedHeight = dart.notNull(tickSize.verticalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            if (this.tickLabelAnchor == axis_spec.TickLabelAnchor.inside) {
              if (tick == ticks[$first]) {
                collides = false;
                previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
              } else if (tick == ticks[$last]) {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedHeight;
                previousEnd = tick.locationPx;
              } else {
                let halfHeight = adjustedHeight / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfHeight;
                previousEnd = dart.notNull(tick.locationPx) + halfHeight;
              }
            } else {
              collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
              previousEnd = dart.notNull(tick.locationPx) + adjustedHeight;
            }
          } else {
            let textDirection = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, this.chartContext.isRtl, tick == ticks[$first], tick == ticks[$last]);
            let adjustedWidth = dart.notNull(tickSize.horizontalSliceWidth) + dart.notNull(this.minimumPaddingBetweenLabelsPx);
            switch (textDirection) {
              case C[15] || CT.C15:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx);
                previousEnd = dart.notNull(tick.locationPx) + adjustedWidth;
                break;
              }
              case C[16] || CT.C16:
              {
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - adjustedWidth;
                previousEnd = tick.locationPx;
                break;
              }
              case C[17] || CT.C17:
              {
                let halfWidth = adjustedWidth / 2;
                collides = dart.notNull(previousEnd) > dart.notNull(tick.locationPx) - halfWidth;
                previousEnd = dart.notNull(tick.locationPx) + halfWidth;
                break;
              }
            }
          }
          if (collides) {
            return new collision_report.CollisionReport.new({ticksCollide: true, ticks: ticks, alternateTicksUsed: false});
          }
        }
        return new collision_report.CollisionReport.new({ticksCollide: false, ticks: ticks, alternateTicksUsed: false});
      }
      measureVerticallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListLOfTickLOfDL().as(ticks);
        let maxHorizontalSliceWidth = ticks[$fold](T$.doubleL(), 0.0, dart.fn((prevMax, tick) => math.max(T$.doubleL(), prevMax, dart.notNull(this[_calculateWidthForRotatedLabel](this.labelRotation, tick.textElement.measurement.verticalSliceWidth, tick.textElement.measurement.horizontalSliceWidth)) + dart.notNull(this.labelOffsetFromAxisPx)), doubleLAndTickLOfDLTodoubleL()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxHorizontalSliceWidth, preferredHeight: maxHeight});
      }
      measureHorizontallyDrawnTicks(ticks, maxWidth, maxHeight) {
        ListLOfTickLOfDL().as(ticks);
        let maxVerticalSliceWidth = ticks[$fold](T$.doubleL(), 0.0, dart.fn((prevMax, tick) => math.max(T$.doubleL(), prevMax, this[_calculateHeightForRotatedLabel](this.labelRotation, tick.textElement.measurement.verticalSliceWidth, tick.textElement.measurement.horizontalSliceWidth)), doubleLAndTickLOfDLTodoubleL()))[$round]();
        return new layout_view.ViewMeasuredSizes.new({preferredWidth: maxWidth, preferredHeight: maxVerticalSliceWidth + dart.notNull(this.labelOffsetFromAxisPx)});
      }
      drawAxisLine(canvas, orientation, axisBounds) {
        let start = null;
        let end = null;
        switch (orientation) {
          case C[18] || CT.C18:
          {
            start = axisBounds[$bottomLeft];
            end = axisBounds[$bottomRight];
            break;
          }
          case C[19] || CT.C19:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$topRight];
            break;
          }
          case C[20] || CT.C20:
          {
            start = axisBounds[$topLeft];
            end = axisBounds[$bottomLeft];
            break;
          }
          case C[21] || CT.C21:
          {
            start = axisBounds[$topRight];
            end = axisBounds[$bottomRight];
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([start, end]), fill: this.axisLineStyle.color, stroke: this.axisLineStyle.color, strokeWidthPx: this.axisLineStyle.strokeWidth[$toDouble](), dashPattern: this.axisLineStyle.dashPattern});
      }
      drawLabel(canvas, tick, opts) {
        let t1;
        TickLOfDL().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let locationPx = tick.locationPx;
        let measurement = tick.textElement.measurement;
        let isRtl = this.chartContext.isRtl;
        let x = 0;
        let y = 0;
        let labelOffsetPx = (t1 = tick.labelOffsetPx, t1 == null ? 0.0 : t1);
        if (orientation == axis.AxisOrientation.bottom || orientation == axis.AxisOrientation.top) {
          y = orientation == axis.AxisOrientation.bottom ? dart.notNull(axisBounds[$top]) + dart.notNull(this.labelOffsetFromAxisPx) : dart.notNull(axisBounds[$bottom]) - measurement.verticalSliceWidth[$toInt]() - dart.notNull(this.labelOffsetFromAxisPx);
          let direction = this[_normalizeHorizontalAnchor](this.tickLabelAnchor, isRtl, isFirst, isLast);
          tick.textElement.textDirection = direction;
          switch (direction) {
            case C[16] || CT.C16:
            {
              x = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C[15] || CT.C15:
            {
              x = (dart.notNull(locationPx) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C[17] || CT.C17:
            default:
            {
              x = (dart.notNull(locationPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
          }
        } else {
          if (orientation == axis.AxisOrientation.left) {
            if (this.tickLabelJustification == axis_spec.TickLabelJustification.inside) {
              x = dart.notNull(axisBounds[$right]) - dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.rtl;
            } else {
              x = dart.notNull(axisBounds[$left]) + dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.ltr;
            }
          } else {
            if (this.tickLabelJustification == axis_spec.TickLabelJustification.inside) {
              x = dart.notNull(axisBounds[$left]) + dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.ltr;
            } else {
              x = dart.notNull(axisBounds[$right]) - dart.notNull(this.labelOffsetFromAxisPx);
              tick.textElement.textDirection = text_element.TextDirection.rtl;
            }
          }
          switch (this[_normalizeVerticalAnchor](this.tickLabelAnchor, isFirst, isLast)) {
            case C[22] || CT.C22:
            {
              y = (dart.notNull(locationPx) - dart.notNull(measurement.verticalSliceWidth) - dart.notNull(this.labelOffsetFromTickPx) - dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C[23] || CT.C23:
            {
              y = (dart.notNull(locationPx) + dart.notNull(this.labelOffsetFromTickPx) + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
            case C[24] || CT.C24:
            default:
            {
              y = (dart.notNull(locationPx) - dart.notNull(measurement.verticalSliceWidth) / 2 + dart.notNull(labelOffsetPx))[$toInt]();
              break;
            }
          }
        }
        canvas.drawText(tick.textElement, x, y, {rotation: base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(this.labelRotation)});
      }
      [_normalizeHorizontalAnchor](anchor, isRtl, isFirst, isLast) {
        switch (anchor) {
          case C[25] || CT.C25:
          {
            return dart.test(isRtl) ? text_element.TextDirection.ltr : text_element.TextDirection.rtl;
          }
          case C[26] || CT.C26:
          {
            return dart.test(isRtl) ? text_element.TextDirection.rtl : text_element.TextDirection.ltr;
          }
          case C[27] || CT.C27:
          {
            if (dart.test(isFirst)) {
              return text_element.TextDirection.ltr;
            }
            if (dart.test(isLast)) {
              return text_element.TextDirection.rtl;
            }
            return text_element.TextDirection.center;
          }
          case C[28] || CT.C28:
          default:
          {
            return text_element.TextDirection.center;
          }
        }
      }
      [_normalizeVerticalAnchor](anchor, isFirst, isLast) {
        switch (anchor) {
          case C[25] || CT.C25:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.under;
          }
          case C[26] || CT.C26:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.over;
          }
          case C[27] || CT.C27:
          {
            if (dart.test(isFirst)) {
              return base_tick_draw_strategy._PixelVerticalDirection.over;
            }
            if (dart.test(isLast)) {
              return base_tick_draw_strategy._PixelVerticalDirection.under;
            }
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
          case C[28] || CT.C28:
          default:
          {
            return base_tick_draw_strategy._PixelVerticalDirection.center;
          }
        }
      }
      [_calculateWidthForRotatedLabel](rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelLength;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        return dart.notNull(labelLength) * math.cos(rotationRadian);
      }
      [_calculateHeightForRotatedLabel](rotation, labelHeight, labelLength) {
        if (rotation === 0) return labelHeight;
        let rotationRadian = base_tick_draw_strategy.BaseTickDrawStrategy._degToRad(rotation);
        labelLength = dart.notNull(labelLength) + dart.notNull(labelHeight) / 2.0 * math.tan(rotationRadian);
        let angle = 3.141592653589793 / 2.0 - rotationRadian[$abs]();
        return dart.notNull(labelLength) * math.cos(angle);
      }
    }
    (BaseTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t2, t2$, t2$0, t2$1, t2$2, t2$3, t1, t2$4, t2$5, t2$6, t2$7, t2$8, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[axisLineStyle] = null;
      this[labelStyle] = null;
      this[tickLabelAnchor] = null;
      this[tickLabelJustification] = null;
      this[labelOffsetFromAxisPx$0] = null;
      this[labelOffsetFromTickPx$0] = null;
      this[minimumPaddingBetweenLabelsPx$0] = null;
      this[labelRotation$0] = null;
      this[chartContext$] = chartContext;
      this.labelStyle = (t1 = graphicsFactory.createTextPaint(), (() => {
        t1.color = (t2$ = (t2 = labelStyleSpec, t2 == null ? null : t2.color), t2$ == null ? style_factory.StyleFactory.style.tickColor : t2$);
        t1.fontFamily = (t2$0 = labelStyleSpec, t2$0 == null ? null : t2$0.fontFamily);
        t1.fontSize = (t2$2 = (t2$1 = labelStyleSpec, t2$1 == null ? null : t2$1.fontSize), t2$2 == null ? 12 : t2$2);
        t1.lineHeight = (t2$3 = labelStyleSpec, t2$3 == null ? null : t2$3.lineHeight);
        return t1;
      })());
      this.axisLineStyle = (t1$ = graphicsFactory.createLinePaint(), (() => {
        t1$.color = (t2$5 = (t2$4 = axisLineStyleSpec, t2$4 == null ? null : t2$4.color), t2$5 == null ? this.labelStyle.color : t2$5);
        t1$.dashPattern = (t2$6 = axisLineStyleSpec, t2$6 == null ? null : t2$6.dashPattern);
        t1$.strokeWidth = (t2$8 = (t2$7 = axisLineStyleSpec, t2$7 == null ? null : t2$7.thickness), t2$8 == null ? 1 : t2$8);
        return t1$;
      })());
      this.tickLabelAnchor = (t1$0 = labelAnchor, t1$0 == null ? axis_spec.TickLabelAnchor.centered : t1$0);
      this.tickLabelJustification = (t1$1 = labelJustification, t1$1 == null ? axis_spec.TickLabelJustification.inside : t1$1);
      this.labelOffsetFromAxisPx = (t1$2 = labelOffsetFromAxisPx, t1$2 == null ? 5 : t1$2);
      this.labelOffsetFromTickPx = (t1$3 = labelOffsetFromTickPx, t1$3 == null ? 5 : t1$3);
      this.minimumPaddingBetweenLabelsPx = (t1$4 = minimumPaddingBetweenLabelsPx, t1$4 == null ? 50 : t1$4);
      this.labelRotation = (t1$5 = labelRotation, t1$5 == null ? 0 : t1$5);
    }).prototype = BaseTickDrawStrategy.prototype;
    dart.addTypeTests(BaseTickDrawStrategy);
    BaseTickDrawStrategy.prototype[_is_BaseTickDrawStrategy_default] = true;
    dart.addTypeCaches(BaseTickDrawStrategy);
    BaseTickDrawStrategy[dart.implements] = () => [tick_draw_strategy.TickDrawStrategy$(dart.legacy(D))];
    dart.setMethodSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getMethods(BaseTickDrawStrategy.__proto__),
      decorateTicks: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      collides: dart.fnType(dart.legacy(collision_report.CollisionReport), [dart.legacy(core.Object), dart.legacy(axis.AxisOrientation)]),
      measureVerticallyDrawnTicks: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int)]),
      measureHorizontallyDrawnTicks: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.Object), dart.legacy(core.int), dart.legacy(core.int)]),
      drawAxisLine: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(axis.AxisOrientation), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      drawLabel: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.Object)], {axisBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), isFirst: dart.legacy(core.bool), isLast: dart.legacy(core.bool), orientation: dart.legacy(axis.AxisOrientation)}, {}),
      [_normalizeHorizontalAnchor]: dart.fnType(dart.legacy(text_element.TextDirection), [dart.legacy(axis_spec.TickLabelAnchor), dart.legacy(core.bool), dart.legacy(core.bool), dart.legacy(core.bool)]),
      [_normalizeVerticalAnchor]: dart.fnType(dart.legacy(base_tick_draw_strategy._PixelVerticalDirection), [dart.legacy(axis_spec.TickLabelAnchor), dart.legacy(core.bool), dart.legacy(core.bool)]),
      [_calculateWidthForRotatedLabel]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.double), dart.legacy(core.double)]),
      [_calculateHeightForRotatedLabel]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.int), dart.legacy(core.double), dart.legacy(core.double)])
    }));
    dart.setLibraryUri(BaseTickDrawStrategy, I[18]);
    dart.setFieldSignature(BaseTickDrawStrategy, () => ({
      __proto__: dart.getFields(BaseTickDrawStrategy.__proto__),
      chartContext: dart.finalFieldType(dart.legacy(chart_context.ChartContext)),
      axisLineStyle: dart.fieldType(dart.legacy(line_style.LineStyle)),
      labelStyle: dart.fieldType(dart.legacy(text_style.TextStyle)),
      tickLabelAnchor: dart.fieldType(dart.legacy(axis_spec.TickLabelAnchor)),
      tickLabelJustification: dart.fieldType(dart.legacy(axis_spec.TickLabelJustification)),
      labelOffsetFromAxisPx: dart.fieldType(dart.legacy(core.int)),
      labelOffsetFromTickPx: dart.fieldType(dart.legacy(core.int)),
      minimumPaddingBetweenLabelsPx: dart.fieldType(dart.legacy(core.int)),
      labelRotation: dart.fieldType(dart.legacy(core.int))
    }));
    return BaseTickDrawStrategy;
  });
  base_tick_draw_strategy.BaseTickDrawStrategy = base_tick_draw_strategy.BaseTickDrawStrategy$();
  dart.addTypeTests(base_tick_draw_strategy.BaseTickDrawStrategy, _is_BaseTickDrawStrategy_default);
  base_tick_draw_strategy._PixelVerticalDirection = class _PixelVerticalDirection extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (base_tick_draw_strategy._PixelVerticalDirection.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = base_tick_draw_strategy._PixelVerticalDirection.prototype;
  dart.addTypeTests(base_tick_draw_strategy._PixelVerticalDirection);
  dart.addTypeCaches(base_tick_draw_strategy._PixelVerticalDirection);
  dart.setMethodSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getMethods(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(base_tick_draw_strategy._PixelVerticalDirection, I[18]);
  dart.setFieldSignature(base_tick_draw_strategy._PixelVerticalDirection, () => ({
    __proto__: dart.getFields(base_tick_draw_strategy._PixelVerticalDirection.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$1]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(base_tick_draw_strategy._PixelVerticalDirection, ['toString']);
  base_tick_draw_strategy._PixelVerticalDirection.over = C[22] || CT.C22;
  base_tick_draw_strategy._PixelVerticalDirection.center = C[24] || CT.C24;
  base_tick_draw_strategy._PixelVerticalDirection.under = C[23] || CT.C23;
  base_tick_draw_strategy._PixelVerticalDirection.values = C[29] || CT.C29;
  var lineStyle$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.lineStyle");
  var tickLengthPx$ = dart.privateName(small_tick_draw_strategy, "SmallTickRendererSpec.tickLengthPx");
  const _is_SmallTickRendererSpec_default = Symbol('_is_SmallTickRendererSpec_default');
  small_tick_draw_strategy.SmallTickRendererSpec$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var SmallTickDrawStrategyOfDL = () => (SmallTickDrawStrategyOfDL = dart.constFn(small_tick_draw_strategy.SmallTickDrawStrategy$(DL())))();
    class SmallTickRendererSpec extends base_tick_draw_strategy.BaseRenderSpec$(dart.legacy(D)) {
      get lineStyle() {
        return this[lineStyle$];
      }
      set lineStyle(value) {
        super.lineStyle = value;
      }
      get tickLengthPx() {
        return this[tickLengthPx$];
      }
      set tickLengthPx(value) {
        super.tickLengthPx = value;
      }
      createDrawStrategy(context, graphicsFactory) {
        return new (SmallTickDrawStrategyOfDL()).new(context, graphicsFactory, {tickLengthPx: this.tickLengthPx, lineStyleSpec: this.lineStyle, labelStyleSpec: this.labelStyle, axisLineStyleSpec: this.axisLineStyle, labelAnchor: this.labelAnchor, labelJustification: this.labelJustification, labelOffsetFromAxisPx: this.labelOffsetFromAxisPx, labelOffsetFromTickPx: this.labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: this.minimumPaddingBetweenLabelsPx, labelRotation: this.labelRotation});
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.SmallTickRendererSpecL().is(other) && dart.equals(this.lineStyle, other.lineStyle) && this.tickLengthPx == other.tickLengthPx && super._equals(other);
      }
      get hashCode() {
        let t1, t1$, t1$0, t1$1;
        let hashcode = (t1$ = (t1 = this.lineStyle, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
        hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.tickLengthPx, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(super.hashCode);
        return hashcode;
      }
    }
    (SmallTickRendererSpec.new = function(opts) {
      let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
      let lineStyle = opts && 'lineStyle' in opts ? opts.lineStyle : null;
      let axisLineStyle = opts && 'axisLineStyle' in opts ? opts.axisLineStyle : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[lineStyle$] = lineStyle;
      this[tickLengthPx$] = tickLengthPx;
      SmallTickRendererSpec.__proto__.new.call(this, {labelStyle: labelStyle, labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation, axisLineStyle: axisLineStyle});
      ;
    }).prototype = SmallTickRendererSpec.prototype;
    dart.addTypeTests(SmallTickRendererSpec);
    SmallTickRendererSpec.prototype[_is_SmallTickRendererSpec_default] = true;
    dart.addTypeCaches(SmallTickRendererSpec);
    dart.setMethodSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getMethods(SmallTickRendererSpec.__proto__),
      createDrawStrategy: dart.fnType(dart.legacy(tick_draw_strategy.TickDrawStrategy$(dart.legacy(D))), [dart.legacy(chart_context.ChartContext), dart.legacy(graphics_factory.GraphicsFactory)])
    }));
    dart.setLibraryUri(SmallTickRendererSpec, I[19]);
    dart.setFieldSignature(SmallTickRendererSpec, () => ({
      __proto__: dart.getFields(SmallTickRendererSpec.__proto__),
      lineStyle: dart.finalFieldType(dart.legacy(axis_spec.LineStyleSpec)),
      tickLengthPx: dart.finalFieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(SmallTickRendererSpec, ['_equals']);
    dart.defineExtensionAccessors(SmallTickRendererSpec, ['hashCode']);
    return SmallTickRendererSpec;
  });
  small_tick_draw_strategy.SmallTickRendererSpec = small_tick_draw_strategy.SmallTickRendererSpec$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickRendererSpec, _is_SmallTickRendererSpec_default);
  var tickLength = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.tickLength");
  var lineStyle = dart.privateName(small_tick_draw_strategy, "SmallTickDrawStrategy.lineStyle");
  const _is_SmallTickDrawStrategy_default = Symbol('_is_SmallTickDrawStrategy_default');
  small_tick_draw_strategy.SmallTickDrawStrategy$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    class SmallTickDrawStrategy extends base_tick_draw_strategy.BaseTickDrawStrategy$(dart.legacy(D)) {
      get tickLength() {
        return this[tickLength];
      }
      set tickLength(value) {
        this[tickLength] = value;
      }
      get lineStyle() {
        return this[lineStyle];
      }
      set lineStyle(value) {
        this[lineStyle] = value;
      }
      draw(canvas, tick, opts) {
        TickLOfDL().as(tick);
        let orientation = opts && 'orientation' in opts ? opts.orientation : null;
        let axisBounds = opts && 'axisBounds' in opts ? opts.axisBounds : null;
        let drawAreaBounds = opts && 'drawAreaBounds' in opts ? opts.drawAreaBounds : null;
        let isFirst = opts && 'isFirst' in opts ? opts.isFirst : null;
        let isLast = opts && 'isLast' in opts ? opts.isLast : null;
        let tickStart = null;
        let tickEnd = null;
        switch (orientation) {
          case C[18] || CT.C18:
          {
            let x = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(x, dart.notNull(axisBounds[$bottom]) - dart.notNull(this.tickLength));
            tickEnd = new (T$.PointOfnumL()).new(x, axisBounds[$bottom]);
            break;
          }
          case C[19] || CT.C19:
          {
            let x = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(x, axisBounds[$top]);
            tickEnd = new (T$.PointOfnumL()).new(x, dart.notNull(axisBounds[$top]) + dart.notNull(this.tickLength));
            break;
          }
          case C[20] || CT.C20:
          {
            let y = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(axisBounds[$left], y);
            tickEnd = new (T$.PointOfnumL()).new(dart.notNull(axisBounds[$left]) + dart.notNull(this.tickLength), y);
            break;
          }
          case C[21] || CT.C21:
          {
            let y = tick.locationPx;
            tickStart = new (T$.PointOfnumL()).new(dart.notNull(axisBounds[$right]) - dart.notNull(this.tickLength), y);
            tickEnd = new (T$.PointOfnumL()).new(axisBounds[$right], y);
            break;
          }
        }
        canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([tickStart, tickEnd]), dashPattern: this.lineStyle.dashPattern, fill: this.lineStyle.color, stroke: this.lineStyle.color, strokeWidthPx: this.lineStyle.strokeWidth[$toDouble]()});
        this.drawLabel(canvas, tick, {orientation: orientation, axisBounds: axisBounds, drawAreaBounds: drawAreaBounds, isFirst: isFirst, isLast: isLast});
      }
    }
    (SmallTickDrawStrategy.new = function(chartContext, graphicsFactory, opts) {
      let t1, t1$;
      let tickLengthPx = opts && 'tickLengthPx' in opts ? opts.tickLengthPx : null;
      let lineStyleSpec = opts && 'lineStyleSpec' in opts ? opts.lineStyleSpec : null;
      let labelStyleSpec = opts && 'labelStyleSpec' in opts ? opts.labelStyleSpec : null;
      let axisLineStyleSpec = opts && 'axisLineStyleSpec' in opts ? opts.axisLineStyleSpec : null;
      let labelAnchor = opts && 'labelAnchor' in opts ? opts.labelAnchor : null;
      let labelJustification = opts && 'labelJustification' in opts ? opts.labelJustification : null;
      let labelOffsetFromAxisPx = opts && 'labelOffsetFromAxisPx' in opts ? opts.labelOffsetFromAxisPx : null;
      let labelOffsetFromTickPx = opts && 'labelOffsetFromTickPx' in opts ? opts.labelOffsetFromTickPx : null;
      let minimumPaddingBetweenLabelsPx = opts && 'minimumPaddingBetweenLabelsPx' in opts ? opts.minimumPaddingBetweenLabelsPx : null;
      let labelRotation = opts && 'labelRotation' in opts ? opts.labelRotation : null;
      this[tickLength] = null;
      this[lineStyle] = null;
      SmallTickDrawStrategy.__proto__.new.call(this, chartContext, graphicsFactory, {labelStyleSpec: labelStyleSpec, axisLineStyleSpec: (t1 = axisLineStyleSpec, t1 == null ? lineStyleSpec : t1), labelAnchor: labelAnchor, labelJustification: labelJustification, labelOffsetFromAxisPx: labelOffsetFromAxisPx, labelOffsetFromTickPx: labelOffsetFromTickPx, minimumPaddingBetweenLabelsPx: minimumPaddingBetweenLabelsPx, labelRotation: labelRotation});
      this.tickLength = (t1$ = tickLengthPx, t1$ == null ? style_factory.StyleFactory.style.tickLength : t1$);
      this.lineStyle = style_factory.StyleFactory.style.createTickLineStyle(graphicsFactory, lineStyleSpec);
    }).prototype = SmallTickDrawStrategy.prototype;
    dart.addTypeTests(SmallTickDrawStrategy);
    SmallTickDrawStrategy.prototype[_is_SmallTickDrawStrategy_default] = true;
    dart.addTypeCaches(SmallTickDrawStrategy);
    dart.setMethodSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getMethods(SmallTickDrawStrategy.__proto__),
      draw: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.Object)], {axisBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), drawAreaBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))), isFirst: dart.legacy(core.bool), isLast: dart.legacy(core.bool), orientation: dart.legacy(axis.AxisOrientation)}, {})
    }));
    dart.setLibraryUri(SmallTickDrawStrategy, I[19]);
    dart.setFieldSignature(SmallTickDrawStrategy, () => ({
      __proto__: dart.getFields(SmallTickDrawStrategy.__proto__),
      tickLength: dart.fieldType(dart.legacy(core.int)),
      lineStyle: dart.fieldType(dart.legacy(line_style.LineStyle))
    }));
    return SmallTickDrawStrategy;
  });
  small_tick_draw_strategy.SmallTickDrawStrategy = small_tick_draw_strategy.SmallTickDrawStrategy$();
  dart.addTypeTests(small_tick_draw_strategy.SmallTickDrawStrategy, _is_SmallTickDrawStrategy_default);
  const _is_TickProvider_default = Symbol('_is_TickProvider_default');
  tick_provider.TickProvider$ = dart.generic(D => {
    class TickProvider extends core.Object {}
    (TickProvider.new = function() {
      ;
    }).prototype = TickProvider.prototype;
    dart.addTypeTests(TickProvider);
    TickProvider.prototype[_is_TickProvider_default] = true;
    dart.addTypeCaches(TickProvider);
    dart.setLibraryUri(TickProvider, I[7]);
    return TickProvider;
  });
  tick_provider.TickProvider = tick_provider.TickProvider$();
  dart.addTypeTests(tick_provider.TickProvider, _is_TickProvider_default);
  var start$ = dart.privateName(tick_provider, "TickHint.start");
  var end$ = dart.privateName(tick_provider, "TickHint.end");
  var tickCount$ = dart.privateName(tick_provider, "TickHint.tickCount");
  const _is_TickHint_default = Symbol('_is_TickHint_default');
  tick_provider.TickHint$ = dart.generic(D => {
    class TickHint extends core.Object {
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        super.end = value;
      }
      get tickCount() {
        return this[tickCount$];
      }
      set tickCount(value) {
        super.tickCount = value;
      }
    }
    (TickHint.new = function(start, end, opts) {
      let tickCount = opts && 'tickCount' in opts ? opts.tickCount : null;
      this[start$] = start;
      this[end$] = end;
      this[tickCount$] = tickCount;
      ;
    }).prototype = TickHint.prototype;
    dart.addTypeTests(TickHint);
    TickHint.prototype[_is_TickHint_default] = true;
    dart.addTypeCaches(TickHint);
    dart.setLibraryUri(TickHint, I[7]);
    dart.setFieldSignature(TickHint, () => ({
      __proto__: dart.getFields(TickHint.__proto__),
      start: dart.finalFieldType(dart.legacy(D)),
      end: dart.finalFieldType(dart.legacy(D)),
      tickCount: dart.finalFieldType(dart.legacy(core.int))
    }));
    return TickHint;
  });
  tick_provider.TickHint = tick_provider.TickHint$();
  dart.addTypeTests(tick_provider.TickHint, _is_TickHint_default);
  var id = dart.privateName(processed_series, "MutableSeries.id");
  var displayName = dart.privateName(processed_series, "MutableSeries.displayName");
  var overlaySeries = dart.privateName(processed_series, "MutableSeries.overlaySeries");
  var seriesCategory = dart.privateName(processed_series, "MutableSeries.seriesCategory");
  var seriesColor = dart.privateName(processed_series, "MutableSeries.seriesColor");
  var seriesIndex = dart.privateName(processed_series, "MutableSeries.seriesIndex");
  var seriesMeasureTotal = dart.privateName(processed_series, "MutableSeries.seriesMeasureTotal");
  var data = dart.privateName(processed_series, "MutableSeries.data");
  var keyFn = dart.privateName(processed_series, "MutableSeries.keyFn");
  var domainFn = dart.privateName(processed_series, "MutableSeries.domainFn");
  var domainFormatterFn = dart.privateName(processed_series, "MutableSeries.domainFormatterFn");
  var domainLowerBoundFn = dart.privateName(processed_series, "MutableSeries.domainLowerBoundFn");
  var domainUpperBoundFn = dart.privateName(processed_series, "MutableSeries.domainUpperBoundFn");
  var measureFn = dart.privateName(processed_series, "MutableSeries.measureFn");
  var measureFormatterFn = dart.privateName(processed_series, "MutableSeries.measureFormatterFn");
  var measureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.measureLowerBoundFn");
  var measureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.measureUpperBoundFn");
  var measureOffsetFn = dart.privateName(processed_series, "MutableSeries.measureOffsetFn");
  var rawMeasureFn = dart.privateName(processed_series, "MutableSeries.rawMeasureFn");
  var rawMeasureLowerBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureLowerBoundFn");
  var rawMeasureUpperBoundFn = dart.privateName(processed_series, "MutableSeries.rawMeasureUpperBoundFn");
  var areaColorFn = dart.privateName(processed_series, "MutableSeries.areaColorFn");
  var colorFn = dart.privateName(processed_series, "MutableSeries.colorFn");
  var dashPatternFn = dart.privateName(processed_series, "MutableSeries.dashPatternFn");
  var fillColorFn = dart.privateName(processed_series, "MutableSeries.fillColorFn");
  var fillPatternFn = dart.privateName(processed_series, "MutableSeries.fillPatternFn");
  var patternColorFn = dart.privateName(processed_series, "MutableSeries.patternColorFn");
  var radiusPxFn = dart.privateName(processed_series, "MutableSeries.radiusPxFn");
  var strokeWidthPxFn = dart.privateName(processed_series, "MutableSeries.strokeWidthPxFn");
  var labelAccessorFn = dart.privateName(processed_series, "MutableSeries.labelAccessorFn");
  var insideLabelStyleAccessorFn = dart.privateName(processed_series, "MutableSeries.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn = dart.privateName(processed_series, "MutableSeries.outsideLabelStyleAccessorFn");
  var measureAxis = dart.privateName(processed_series, "MutableSeries.measureAxis");
  var domainAxis = dart.privateName(processed_series, "MutableSeries.domainAxis");
  var _attrs = dart.privateName(processed_series, "_attrs");
  var keyFn$ = dart.privateName(processed_series, "ImmutableSeries.keyFn");
  var insideLabelStyleAccessorFn$ = dart.privateName(processed_series, "ImmutableSeries.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn$ = dart.privateName(processed_series, "ImmutableSeries.outsideLabelStyleAccessorFn");
  const _is_ImmutableSeries_default = Symbol('_is_ImmutableSeries_default');
  processed_series.ImmutableSeries$ = dart.generic(D => {
    class ImmutableSeries extends core.Object {
      get keyFn() {
        return this[keyFn$];
      }
      set keyFn(value) {
        this[keyFn$] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn$] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn$] = value;
      }
    }
    (ImmutableSeries.new = function() {
      this[keyFn$] = null;
      this[insideLabelStyleAccessorFn$] = null;
      this[outsideLabelStyleAccessorFn$] = null;
      ;
    }).prototype = ImmutableSeries.prototype;
    dart.addTypeTests(ImmutableSeries);
    ImmutableSeries.prototype[_is_ImmutableSeries_default] = true;
    dart.addTypeCaches(ImmutableSeries);
    dart.setLibraryUri(ImmutableSeries, I[20]);
    dart.setFieldSignature(ImmutableSeries, () => ({
      __proto__: dart.getFields(ImmutableSeries.__proto__),
      keyFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)])))
    }));
    return ImmutableSeries;
  });
  processed_series.ImmutableSeries = processed_series.ImmutableSeries$();
  dart.addTypeTests(processed_series.ImmutableSeries, _is_ImmutableSeries_default);
  const _is_MutableSeries_default = Symbol('_is_MutableSeries_default');
  processed_series.MutableSeries$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var intLToDL = () => (intLToDL = dart.constFn(dart.fnType(DL(), [T$.intL()])))();
    var intLToLDL = () => (intLToLDL = dart.constFn(dart.legacy(intLToDL())))();
    class MutableSeries extends processed_series.ImmutableSeries$(dart.legacy(D)) {
      get id() {
        return this[id];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName];
      }
      set displayName(value) {
        this[displayName] = value;
      }
      get overlaySeries() {
        return this[overlaySeries];
      }
      set overlaySeries(value) {
        this[overlaySeries] = value;
      }
      get seriesCategory() {
        return this[seriesCategory];
      }
      set seriesCategory(value) {
        this[seriesCategory] = value;
      }
      get seriesColor() {
        return this[seriesColor];
      }
      set seriesColor(value) {
        this[seriesColor] = value;
      }
      get seriesIndex() {
        return this[seriesIndex];
      }
      set seriesIndex(value) {
        this[seriesIndex] = value;
      }
      get seriesMeasureTotal() {
        return this[seriesMeasureTotal];
      }
      set seriesMeasureTotal(value) {
        this[seriesMeasureTotal] = value;
      }
      get data() {
        return this[data];
      }
      set data(value) {
        this[data] = value;
      }
      get keyFn() {
        return this[keyFn];
      }
      set keyFn(value) {
        this[keyFn] = value;
      }
      get domainFn() {
        return this[domainFn];
      }
      set domainFn(value) {
        this[domainFn] = intLToLDL().as(value);
      }
      get domainFormatterFn() {
        return this[domainFormatterFn];
      }
      set domainFormatterFn(value) {
        this[domainFormatterFn] = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn];
      }
      set domainLowerBoundFn(value) {
        this[domainLowerBoundFn] = intLToLDL().as(value);
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn];
      }
      set domainUpperBoundFn(value) {
        this[domainUpperBoundFn] = intLToLDL().as(value);
      }
      get measureFn() {
        return this[measureFn];
      }
      set measureFn(value) {
        this[measureFn] = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn];
      }
      set measureFormatterFn(value) {
        this[measureFormatterFn] = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn];
      }
      set measureLowerBoundFn(value) {
        this[measureLowerBoundFn] = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn];
      }
      set measureUpperBoundFn(value) {
        this[measureUpperBoundFn] = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn];
      }
      set measureOffsetFn(value) {
        this[measureOffsetFn] = value;
      }
      get rawMeasureFn() {
        return this[rawMeasureFn];
      }
      set rawMeasureFn(value) {
        this[rawMeasureFn] = value;
      }
      get rawMeasureLowerBoundFn() {
        return this[rawMeasureLowerBoundFn];
      }
      set rawMeasureLowerBoundFn(value) {
        this[rawMeasureLowerBoundFn] = value;
      }
      get rawMeasureUpperBoundFn() {
        return this[rawMeasureUpperBoundFn];
      }
      set rawMeasureUpperBoundFn(value) {
        this[rawMeasureUpperBoundFn] = value;
      }
      get areaColorFn() {
        return this[areaColorFn];
      }
      set areaColorFn(value) {
        this[areaColorFn] = value;
      }
      get colorFn() {
        return this[colorFn];
      }
      set colorFn(value) {
        this[colorFn] = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn];
      }
      set dashPatternFn(value) {
        this[dashPatternFn] = value;
      }
      get fillColorFn() {
        return this[fillColorFn];
      }
      set fillColorFn(value) {
        this[fillColorFn] = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn];
      }
      set fillPatternFn(value) {
        this[fillPatternFn] = value;
      }
      get patternColorFn() {
        return this[patternColorFn];
      }
      set patternColorFn(value) {
        this[patternColorFn] = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn];
      }
      set radiusPxFn(value) {
        this[radiusPxFn] = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn];
      }
      set strokeWidthPxFn(value) {
        this[strokeWidthPxFn] = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn];
      }
      set labelAccessorFn(value) {
        this[labelAccessorFn] = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn];
      }
      set insideLabelStyleAccessorFn(value) {
        this[insideLabelStyleAccessorFn] = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn];
      }
      set outsideLabelStyleAccessorFn(value) {
        this[outsideLabelStyleAccessorFn] = value;
      }
      get measureAxis() {
        return this[measureAxis];
      }
      set measureAxis(value) {
        this[measureAxis] = value;
      }
      get domainAxis() {
        return this[domainAxis];
      }
      set domainAxis(value) {
        this[domainAxis] = value;
      }
      setAttr(R, key, value) {
        this[_attrs].setAttr(dart.legacy(R), key, value);
      }
      getAttr(R, key) {
        return this[_attrs].getAttr(dart.legacy(R), key);
      }
      _equals(other) {
        if (other == null) return false;
        return T$.MutableSeriesL().is(other) && dart.equals(this.data, other.data) && this.id == other.id;
      }
      get hashCode() {
        return dart.notNull(dart.hashCode(this.data)) * 31 + dart.hashCode(this.id);
      }
    }
    (MutableSeries.new = function(series) {
      let t1, t1$, t1$0;
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn] = null;
      this[outsideLabelStyleAccessorFn] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = series.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = (t1 = series.displayName, t1 == null ? series.id : t1);
      this.overlaySeries = series.overlaySeries;
      this.seriesCategory = series.seriesCategory;
      this.seriesColor = series.seriesColor;
      this.data = series.data;
      this.keyFn = series.keyFn;
      this.domainFn = series.domainFn;
      this.domainLowerBoundFn = series.domainLowerBoundFn;
      this.domainUpperBoundFn = series.domainUpperBoundFn;
      this.measureFn = series.measureFn;
      this.measureFormatterFn = series.measureFormatterFn;
      this.measureLowerBoundFn = series.measureLowerBoundFn;
      this.measureUpperBoundFn = series.measureUpperBoundFn;
      this.measureOffsetFn = series.measureOffsetFn;
      this.rawMeasureFn = series.measureFn;
      this.rawMeasureLowerBoundFn = series.measureLowerBoundFn;
      this.rawMeasureUpperBoundFn = series.measureUpperBoundFn;
      this.seriesMeasureTotal = 0;
      for (let i = 0; i < dart.notNull(this.data[$length]); i = i + 1) {
        let measure = (t1$ = i, this.measureFn(t1$));
        if (measure != null) {
          this.seriesMeasureTotal = dart.notNull(this.seriesMeasureTotal) + dart.notNull(measure);
        }
      }
      this.areaColorFn = series.areaColorFn;
      this.colorFn = series.colorFn;
      this.dashPatternFn = series.dashPatternFn;
      this.fillColorFn = series.fillColorFn;
      this.fillPatternFn = series.fillPatternFn;
      this.patternColorFn = series.patternColorFn;
      this.labelAccessorFn = (t1$0 = series.labelAccessorFn, t1$0 == null ? dart.fn(i => {
        let t2;
        return dart.toString((t2 = i, this.domainFn(t2)));
      }, T$.intLToStringL()) : t1$0);
      this.insideLabelStyleAccessorFn = series.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = series.outsideLabelStyleAccessorFn;
      this.radiusPxFn = series.radiusPxFn;
      this.strokeWidthPxFn = series.strokeWidthPxFn;
      this[_attrs].mergeFrom(series.attributes);
    }).prototype = MutableSeries.prototype;
    (MutableSeries.clone = function(other) {
      this[displayName] = null;
      this[overlaySeries] = null;
      this[seriesCategory] = null;
      this[seriesColor] = null;
      this[seriesIndex] = null;
      this[seriesMeasureTotal] = null;
      this[data] = null;
      this[keyFn] = null;
      this[domainFn] = null;
      this[domainFormatterFn] = null;
      this[domainLowerBoundFn] = null;
      this[domainUpperBoundFn] = null;
      this[measureFn] = null;
      this[measureFormatterFn] = null;
      this[measureLowerBoundFn] = null;
      this[measureUpperBoundFn] = null;
      this[measureOffsetFn] = null;
      this[rawMeasureFn] = null;
      this[rawMeasureLowerBoundFn] = null;
      this[rawMeasureUpperBoundFn] = null;
      this[areaColorFn] = null;
      this[colorFn] = null;
      this[dashPatternFn] = null;
      this[fillColorFn] = null;
      this[fillPatternFn] = null;
      this[patternColorFn] = null;
      this[radiusPxFn] = null;
      this[strokeWidthPxFn] = null;
      this[labelAccessorFn] = null;
      this[insideLabelStyleAccessorFn] = null;
      this[outsideLabelStyleAccessorFn] = null;
      this[_attrs] = new series$.SeriesAttributes.new();
      this[measureAxis] = null;
      this[domainAxis] = null;
      this[id] = other.id;
      MutableSeries.__proto__.new.call(this);
      this.displayName = other.displayName;
      this.overlaySeries = other.overlaySeries;
      this.seriesCategory = other.seriesCategory;
      this.seriesColor = other.seriesColor;
      this.seriesIndex = other.seriesIndex;
      this.data = other.data;
      this.keyFn = other.keyFn;
      this.domainFn = other.domainFn;
      this.domainLowerBoundFn = other.domainLowerBoundFn;
      this.domainUpperBoundFn = other.domainUpperBoundFn;
      this.measureFn = other.measureFn;
      this.measureFormatterFn = other.measureFormatterFn;
      this.measureLowerBoundFn = other.measureLowerBoundFn;
      this.measureUpperBoundFn = other.measureUpperBoundFn;
      this.measureOffsetFn = other.measureOffsetFn;
      this.rawMeasureFn = other.rawMeasureFn;
      this.rawMeasureLowerBoundFn = other.rawMeasureLowerBoundFn;
      this.rawMeasureUpperBoundFn = other.rawMeasureUpperBoundFn;
      this.seriesMeasureTotal = other.seriesMeasureTotal;
      this.areaColorFn = other.areaColorFn;
      this.colorFn = other.colorFn;
      this.dashPatternFn = other.dashPatternFn;
      this.fillColorFn = other.fillColorFn;
      this.fillPatternFn = other.fillPatternFn;
      this.patternColorFn = other.patternColorFn;
      this.labelAccessorFn = other.labelAccessorFn;
      this.insideLabelStyleAccessorFn = other.insideLabelStyleAccessorFn;
      this.outsideLabelStyleAccessorFn = other.outsideLabelStyleAccessorFn;
      this.radiusPxFn = other.radiusPxFn;
      this.strokeWidthPxFn = other.strokeWidthPxFn;
      this[_attrs].mergeFrom(other[_attrs]);
      this.measureAxis = other.measureAxis;
      this.domainAxis = other.domainAxis;
    }).prototype = MutableSeries.prototype;
    dart.addTypeTests(MutableSeries);
    MutableSeries.prototype[_is_MutableSeries_default] = true;
    dart.addTypeCaches(MutableSeries);
    dart.setMethodSignature(MutableSeries, () => ({
      __proto__: dart.getMethods(MutableSeries.__proto__),
      setAttr: dart.gFnType(R => [dart.void, [dart.legacy(series$.AttributeKey$(dart.legacy(R))), dart.legacy(R)]]),
      getAttr: dart.gFnType(R => [dart.legacy(R), [dart.legacy(series$.AttributeKey$(dart.legacy(R)))]]),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(MutableSeries, () => ({
      __proto__: dart.getGetters(MutableSeries.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(MutableSeries, I[20]);
    dart.setFieldSignature(MutableSeries, () => ({
      __proto__: dart.getFields(MutableSeries.__proto__),
      id: dart.finalFieldType(dart.legacy(core.String)),
      displayName: dart.fieldType(dart.legacy(core.String)),
      overlaySeries: dart.fieldType(dart.legacy(core.bool)),
      seriesCategory: dart.fieldType(dart.legacy(core.String)),
      seriesColor: dart.fieldType(dart.legacy(color.Color)),
      seriesIndex: dart.fieldType(dart.legacy(core.int)),
      seriesMeasureTotal: dart.fieldType(dart.legacy(core.num)),
      data: dart.fieldType(dart.legacy(core.List)),
      keyFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      domainFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainFormatterFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)])), [dart.legacy(core.int)]))),
      domainLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      measureFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureFormatterFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])), [dart.legacy(core.int)]))),
      measureLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureOffsetFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureLowerBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      rawMeasureUpperBoundFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      areaColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      colorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      dashPatternFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.int)]))),
      fillColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      fillPatternFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(chart_canvas.FillPatternType), [dart.legacy(core.int)]))),
      patternColorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      radiusPxFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      strokeWidthPxFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      labelAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      [_attrs]: dart.finalFieldType(dart.legacy(series$.SeriesAttributes)),
      measureAxis: dart.fieldType(dart.legacy(axis.Axis)),
      domainAxis: dart.fieldType(dart.legacy(axis.Axis))
    }));
    dart.defineExtensionMethods(MutableSeries, ['_equals']);
    dart.defineExtensionAccessors(MutableSeries, ['hashCode']);
    return MutableSeries;
  });
  processed_series.MutableSeries = processed_series.MutableSeries$();
  dart.addTypeTests(processed_series.MutableSeries, _is_MutableSeries_default);
  symbol_renderer.BaseSymbolRenderer = class BaseSymbolRenderer extends core.Object {};
  (symbol_renderer.BaseSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.BaseSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.BaseSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.BaseSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.BaseSymbolRenderer, I[21]);
  var isSolid$ = dart.privateName(symbol_renderer, "SymbolRenderer.isSolid");
  symbol_renderer.SymbolRenderer = class SymbolRenderer extends symbol_renderer.BaseSymbolRenderer {
    get isSolid() {
      return this[isSolid$];
    }
    set isSolid(value) {
      super.isSolid = value;
    }
    getSolidStrokeWidthPx(strokeWidthPx) {
      let t1;
      return dart.test(this.isSolid) ? strokeWidthPx : (t1 = strokeWidthPx, t1 == null ? 2.0 : t1);
    }
    getSolidFillColor(fillColor) {
      return dart.test(this.isSolid) ? fillColor : style_factory.StyleFactory.style.white;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.SymbolRendererL().is(other) && other.isSolid == this.isSolid;
    }
    get hashCode() {
      return dart.hashCode(this.isSolid);
    }
  };
  (symbol_renderer.SymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : null;
    this[isSolid$] = isSolid;
    ;
  }).prototype = symbol_renderer.SymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.SymbolRenderer);
  dart.addTypeCaches(symbol_renderer.SymbolRenderer);
  dart.setMethodSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.SymbolRenderer.__proto__),
    getSolidStrokeWidthPx: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double)]),
    getSolidFillColor: dart.fnType(dart.legacy(color.Color), [dart.legacy(color.Color)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.SymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.SymbolRenderer, I[21]);
  dart.setFieldSignature(symbol_renderer.SymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.SymbolRenderer.__proto__),
    isSolid: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(symbol_renderer.SymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.SymbolRenderer, ['hashCode']);
  symbol_renderer.PointSymbolRenderer = class PointSymbolRenderer extends symbol_renderer.BaseSymbolRenderer {};
  (symbol_renderer.PointSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.PointSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.PointSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.PointSymbolRenderer);
  dart.setLibraryUri(symbol_renderer.PointSymbolRenderer, I[21]);
  var radius$ = dart.privateName(symbol_renderer, "RoundedRectSymbolRenderer.radius");
  symbol_renderer.RoundedRectSymbolRenderer = class RoundedRectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, radius: this.radius, roundTopLeft: true, roundTopRight: true, roundBottomRight: true, roundBottomLeft: true});
    }
    shouldRepaint(oldRenderer) {
      T$.RoundedRectSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RoundedRectSymbolRendererL().is(other) && other.radius == this.radius && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.radius);
      return hashcode;
    }
  };
  (symbol_renderer.RoundedRectSymbolRenderer.new = function(opts) {
    let t1;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    this[radius$] = (t1 = radius, t1 == null ? 1.0 : t1);
    symbol_renderer.RoundedRectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RoundedRectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RoundedRectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RoundedRectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RoundedRectSymbolRenderer, I[21]);
  dart.setFieldSignature(symbol_renderer.RoundedRectSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.RoundedRectSymbolRenderer.__proto__),
    radius: dart.finalFieldType(dart.legacy(core.double))
  }));
  dart.defineExtensionMethods(symbol_renderer.RoundedRectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RoundedRectSymbolRenderer, ['hashCode']);
  var strokeWidth$ = dart.privateName(symbol_renderer, "LineSymbolRenderer.strokeWidth");
  var _dashPattern = dart.privateName(symbol_renderer, "_dashPattern");
  symbol_renderer.LineSymbolRenderer = class LineSymbolRenderer extends symbol_renderer.SymbolRenderer {
    get strokeWidth() {
      return this[strokeWidth$];
    }
    set strokeWidth(value) {
      super.strokeWidth = value;
    }
    paint(canvas, bounds, opts) {
      let t1, t1$;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let centerHeight = (dart.notNull(bounds[$bottom]) - dart.notNull(bounds[$top])) / 2;
      let localDashPattern = (t1 = dashPattern, t1 == null ? this[_dashPattern] : t1);
      let roundEndCaps = localDashPattern == null;
      let localStrokeWidthPx = localDashPattern == null ? this.getSolidStrokeWidthPx((t1$ = strokeWidthPx, t1$ == null ? this.strokeWidth : t1$)) : 2;
      let left = bounds[$left];
      let right = bounds[$right];
      if (roundEndCaps && dart.notNull(bounds[$width]) >= 5) {
        left = dart.notNull(left) + 2;
        right = dart.notNull(right) - 2;
      }
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([new (T$.PointOfnumL()).new(left, centerHeight), new (T$.PointOfnumL()).new(right, centerHeight)]), dashPattern: localDashPattern, fill: this.getSolidFillColor(fillColor), roundEndCaps: roundEndCaps, stroke: strokeColor, strokeWidthPx: localStrokeWidthPx});
    }
    shouldRepaint(oldRenderer) {
      T$.LineSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.LineSymbolRendererL().is(other) && other.strokeWidth == this.strokeWidth && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.strokeWidth);
      return hashcode;
    }
  };
  (symbol_renderer.LineSymbolRenderer.new = function(opts) {
    let t1;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    let strokeWidth = opts && 'strokeWidth' in opts ? opts.strokeWidth : null;
    this[strokeWidth$] = (t1 = strokeWidth, t1 == null ? 4 : t1);
    this[_dashPattern] = dashPattern;
    symbol_renderer.LineSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.LineSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.LineSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.LineSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.LineSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.LineSymbolRenderer, I[21]);
  dart.setFieldSignature(symbol_renderer.LineSymbolRenderer, () => ({
    __proto__: dart.getFields(symbol_renderer.LineSymbolRenderer.__proto__),
    strokeWidth: dart.finalFieldType(dart.legacy(core.double)),
    [_dashPattern]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  dart.defineExtensionMethods(symbol_renderer.LineSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.LineSymbolRenderer, ['hashCode']);
  dart.defineLazy(symbol_renderer.LineSymbolRenderer, {
    /*symbol_renderer.LineSymbolRenderer.roundEndCapsPixels*/get roundEndCapsPixels() {
      return 2;
    },
    /*symbol_renderer.LineSymbolRenderer.minLengthToRoundCaps*/get minLengthToRoundCaps() {
      return 5;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForRoundEndCaps*/get strokeWidthForRoundEndCaps() {
      return 4;
    },
    /*symbol_renderer.LineSymbolRenderer.strokeWidthForNonRoundedEndCaps*/get strokeWidthForNonRoundedEndCaps() {
      return 2;
    }
  }, true);
  symbol_renderer.CircleSymbolRenderer = class CircleSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      let center = new (T$.PointOfnumL()).new(dart.notNull(bounds[$left]) + dart.notNull(bounds[$width]) / 2, dart.notNull(bounds[$top]) + dart.notNull(bounds[$height]) / 2);
      let radius = math.min(T$.numL(), bounds[$width], bounds[$height]) / 2;
      canvas.drawPoint({point: center, radius: radius, fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      T$.CircleSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.CircleSymbolRendererL().is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.runtimeType));
      return hashcode;
    }
  };
  (symbol_renderer.CircleSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.CircleSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.CircleSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CircleSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CircleSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CircleSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CircleSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.CircleSymbolRenderer, I[21]);
  dart.defineExtensionMethods(symbol_renderer.CircleSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CircleSymbolRenderer, ['hashCode']);
  symbol_renderer.RectSymbolRenderer = class RectSymbolRenderer extends symbol_renderer.SymbolRenderer {
    paint(canvas, bounds, opts) {
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      canvas.drawRect(bounds, {fill: this.getSolidFillColor(fillColor), stroke: strokeColor, strokeWidthPx: this.getSolidStrokeWidthPx(strokeWidthPx)});
    }
    shouldRepaint(oldRenderer) {
      T$.RectSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RectSymbolRendererL().is(other) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.runtimeType));
      return hashcode;
    }
  };
  (symbol_renderer.RectSymbolRenderer.new = function(opts) {
    let isSolid = opts && 'isSolid' in opts ? opts.isSolid : true;
    symbol_renderer.RectSymbolRenderer.__proto__.new.call(this, {isSolid: isSolid});
    ;
  }).prototype = symbol_renderer.RectSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Rectangle$(dart.legacy(core.num)))], {dashPattern: dart.legacy(core.List$(dart.legacy(core.int))), fillColor: dart.legacy(color.Color), strokeColor: dart.legacy(color.Color), strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(symbol_renderer.RectSymbolRenderer, I[21]);
  dart.defineExtensionMethods(symbol_renderer.RectSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectSymbolRenderer, ['hashCode']);
  symbol_renderer.CylinderSymbolRenderer = class CylinderSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdoubleL()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdoubleL()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([adjustedP1, adjustedP2]), stroke: T$.ColorL().as(strokeColor), roundEndCaps: true, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      T$.CylinderSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.CylinderSymbolRendererL().is(other);
    }
    get hashCode() {
      return dart.hashCode(this.runtimeType);
    }
  };
  (symbol_renderer.CylinderSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.CylinderSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.CylinderSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.CylinderSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.CylinderSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.double)], {fillColor: dart.legacy(color.Color), p2: dart.legacy(math.Point$(dart.legacy(core.double))), strokeColor: dart.dynamic, strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.CylinderSymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.CylinderSymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.CylinderSymbolRenderer, I[21]);
  dart.defineExtensionMethods(symbol_renderer.CylinderSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.CylinderSymbolRenderer, ['hashCode']);
  symbol_renderer.RectangleRangeSymbolRenderer = class RectangleRangeSymbolRenderer extends symbol_renderer.PointSymbolRenderer {
    paint(canvas, p1, radius, opts) {
      let p2 = opts && 'p2' in opts ? opts.p2 : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let strokeColor = opts && 'strokeColor' in opts ? opts.strokeColor : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      if (p1 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p1 \"" + dart.str(p1) + "\""));
      }
      if (p2 == null) {
        dart.throw(new core.ArgumentError.new("Invalid point p2 \"" + dart.str(p2) + "\""));
      }
      let adjustedP1 = new (T$.PointOfdoubleL()).new(p1.x, p1.y);
      let adjustedP2 = new (T$.PointOfdoubleL()).new(p2.x, p2.y);
      canvas.drawLine({points: T$.JSArrayOfPointLOfnumL().of([adjustedP1, adjustedP2]), stroke: T$.ColorL().as(strokeColor), roundEndCaps: false, strokeWidthPx: dart.notNull(radius) * 2});
    }
    shouldRepaint(oldRenderer) {
      T$.RectangleRangeSymbolRendererL().as(oldRenderer);
      return !this._equals(oldRenderer);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.RectangleRangeSymbolRendererL().is(other);
    }
    get hashCode() {
      return dart.hashCode(this.runtimeType);
    }
  };
  (symbol_renderer.RectangleRangeSymbolRenderer.new = function() {
    ;
  }).prototype = symbol_renderer.RectangleRangeSymbolRenderer.prototype;
  dart.addTypeTests(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.addTypeCaches(symbol_renderer.RectangleRangeSymbolRenderer);
  dart.setMethodSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getMethods(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(math.Point$(dart.legacy(core.double))), dart.legacy(core.double)], {fillColor: dart.legacy(color.Color), p2: dart.legacy(math.Point$(dart.legacy(core.double))), strokeColor: dart.dynamic, strokeWidthPx: dart.legacy(core.double)}, {}),
    shouldRepaint: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(symbol_renderer.RectangleRangeSymbolRenderer, () => ({
    __proto__: dart.getGetters(symbol_renderer.RectangleRangeSymbolRenderer.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(symbol_renderer.RectangleRangeSymbolRenderer, I[21]);
  dart.defineExtensionMethods(symbol_renderer.RectangleRangeSymbolRenderer, ['_equals']);
  dart.defineExtensionAccessors(symbol_renderer.RectangleRangeSymbolRenderer, ['hashCode']);
  var datum$ = dart.privateName(datum_details, "DatumDetails.datum");
  var index$ = dart.privateName(datum_details, "DatumDetails.index");
  var domain$ = dart.privateName(datum_details, "DatumDetails.domain");
  var domainLowerBound$ = dart.privateName(datum_details, "DatumDetails.domainLowerBound");
  var domainUpperBound$ = dart.privateName(datum_details, "DatumDetails.domainUpperBound");
  var measure$ = dart.privateName(datum_details, "DatumDetails.measure");
  var measureLowerBound$ = dart.privateName(datum_details, "DatumDetails.measureLowerBound");
  var measureUpperBound$ = dart.privateName(datum_details, "DatumDetails.measureUpperBound");
  var measureOffset$ = dart.privateName(datum_details, "DatumDetails.measureOffset");
  var rawMeasure$ = dart.privateName(datum_details, "DatumDetails.rawMeasure");
  var rawMeasureLowerBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureLowerBound");
  var rawMeasureUpperBound$ = dart.privateName(datum_details, "DatumDetails.rawMeasureUpperBound");
  var series$0 = dart.privateName(datum_details, "DatumDetails.series");
  var color$ = dart.privateName(datum_details, "DatumDetails.color");
  var fillColor$ = dart.privateName(datum_details, "DatumDetails.fillColor");
  var areaColor$ = dart.privateName(datum_details, "DatumDetails.areaColor");
  var dashPattern$ = dart.privateName(datum_details, "DatumDetails.dashPattern");
  var chartPosition$ = dart.privateName(datum_details, "DatumDetails.chartPosition");
  var chartPositionLower$ = dart.privateName(datum_details, "DatumDetails.chartPositionLower");
  var chartPositionUpper$ = dart.privateName(datum_details, "DatumDetails.chartPositionUpper");
  var domainDistance$ = dart.privateName(datum_details, "DatumDetails.domainDistance");
  var measureDistance$ = dart.privateName(datum_details, "DatumDetails.measureDistance");
  var relativeDistance$ = dart.privateName(datum_details, "DatumDetails.relativeDistance");
  var radiusPx$ = dart.privateName(datum_details, "DatumDetails.radiusPx");
  var symbolRenderer$ = dart.privateName(datum_details, "DatumDetails.symbolRenderer");
  var strokeWidthPx$ = dart.privateName(datum_details, "DatumDetails.strokeWidthPx");
  var domainFormatter$ = dart.privateName(datum_details, "DatumDetails.domainFormatter");
  var measureFormatter$ = dart.privateName(datum_details, "DatumDetails.measureFormatter");
  const _is_DatumDetails_default = Symbol('_is_DatumDetails_default');
  datum_details.DatumDetails$ = dart.generic(D => {
    class DatumDetails extends core.Object {
      get datum() {
        return this[datum$];
      }
      set datum(value) {
        super.datum = value;
      }
      get index() {
        return this[index$];
      }
      set index(value) {
        super.index = value;
      }
      get domain() {
        return this[domain$];
      }
      set domain(value) {
        super.domain = value;
      }
      get domainLowerBound() {
        return this[domainLowerBound$];
      }
      set domainLowerBound(value) {
        super.domainLowerBound = value;
      }
      get domainUpperBound() {
        return this[domainUpperBound$];
      }
      set domainUpperBound(value) {
        super.domainUpperBound = value;
      }
      get measure() {
        return this[measure$];
      }
      set measure(value) {
        super.measure = value;
      }
      get measureLowerBound() {
        return this[measureLowerBound$];
      }
      set measureLowerBound(value) {
        super.measureLowerBound = value;
      }
      get measureUpperBound() {
        return this[measureUpperBound$];
      }
      set measureUpperBound(value) {
        super.measureUpperBound = value;
      }
      get measureOffset() {
        return this[measureOffset$];
      }
      set measureOffset(value) {
        super.measureOffset = value;
      }
      get rawMeasure() {
        return this[rawMeasure$];
      }
      set rawMeasure(value) {
        super.rawMeasure = value;
      }
      get rawMeasureLowerBound() {
        return this[rawMeasureLowerBound$];
      }
      set rawMeasureLowerBound(value) {
        super.rawMeasureLowerBound = value;
      }
      get rawMeasureUpperBound() {
        return this[rawMeasureUpperBound$];
      }
      set rawMeasureUpperBound(value) {
        super.rawMeasureUpperBound = value;
      }
      get series() {
        return this[series$0];
      }
      set series(value) {
        super.series = value;
      }
      get color() {
        return this[color$];
      }
      set color(value) {
        super.color = value;
      }
      get fillColor() {
        return this[fillColor$];
      }
      set fillColor(value) {
        super.fillColor = value;
      }
      get areaColor() {
        return this[areaColor$];
      }
      set areaColor(value) {
        super.areaColor = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get chartPosition() {
        return this[chartPosition$];
      }
      set chartPosition(value) {
        super.chartPosition = value;
      }
      get chartPositionLower() {
        return this[chartPositionLower$];
      }
      set chartPositionLower(value) {
        super.chartPositionLower = value;
      }
      get chartPositionUpper() {
        return this[chartPositionUpper$];
      }
      set chartPositionUpper(value) {
        super.chartPositionUpper = value;
      }
      get domainDistance() {
        return this[domainDistance$];
      }
      set domainDistance(value) {
        super.domainDistance = value;
      }
      get measureDistance() {
        return this[measureDistance$];
      }
      set measureDistance(value) {
        super.measureDistance = value;
      }
      get relativeDistance() {
        return this[relativeDistance$];
      }
      set relativeDistance(value) {
        super.relativeDistance = value;
      }
      get radiusPx() {
        return this[radiusPx$];
      }
      set radiusPx(value) {
        super.radiusPx = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get domainFormatter() {
        return this[domainFormatter$];
      }
      set domainFormatter(value) {
        this[domainFormatter$] = value;
      }
      get measureFormatter() {
        return this[measureFormatter$];
      }
      set measureFormatter(value) {
        this[measureFormatter$] = value;
      }
      static from(other, opts) {
        let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13, t1$14, t1$15, t1$16, t1$17, t1$18, t1$19, t1$20, t1$21, t1$22, t1$23, t1$24;
        let datum = opts && 'datum' in opts ? opts.datum : null;
        let index = opts && 'index' in opts ? opts.index : null;
        let domain = opts && 'domain' in opts ? opts.domain : null;
        let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
        let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
        let measure = opts && 'measure' in opts ? opts.measure : null;
        let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
        let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
        let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
        let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
        let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
        let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
        let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
        let series = opts && 'series' in opts ? opts.series : null;
        let color = opts && 'color' in opts ? opts.color : null;
        let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
        let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
        let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
        let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
        let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
        let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
        let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
        let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
        let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
        let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
        let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
        let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
        return new (datum_details.DatumDetails$(dart.legacy(D))).new({datum: (t1 = datum, t1 == null ? other.datum : t1), index: (t1$ = index, t1$ == null ? other.index : t1$), domain: (t1$0 = domain, t1$0 == null ? other.domain : t1$0), domainFormatter: (t1$1 = domainFormatter, t1$1 == null ? dart.legacy(dart.fnType(T$.StringL(), [dart.legacy(D)])).as(other.domainFormatter) : t1$1), domainLowerBound: (t1$2 = domainLowerBound, t1$2 == null ? other.domainLowerBound : t1$2), domainUpperBound: (t1$3 = domainUpperBound, t1$3 == null ? other.domainUpperBound : t1$3), measure: (t1$4 = measure, t1$4 == null ? other.measure : t1$4), measureFormatter: (t1$5 = measureFormatter, t1$5 == null ? other.measureFormatter : t1$5), measureLowerBound: (t1$6 = measureLowerBound, t1$6 == null ? other.measureLowerBound : t1$6), measureUpperBound: (t1$7 = measureUpperBound, t1$7 == null ? other.measureUpperBound : t1$7), measureOffset: (t1$8 = measureOffset, t1$8 == null ? other.measureOffset : t1$8), rawMeasure: (t1$9 = rawMeasure, t1$9 == null ? other.rawMeasure : t1$9), rawMeasureLowerBound: (t1$10 = rawMeasureLowerBound, t1$10 == null ? other.rawMeasureLowerBound : t1$10), rawMeasureUpperBound: (t1$11 = rawMeasureUpperBound, t1$11 == null ? other.rawMeasureUpperBound : t1$11), series: (t1$12 = series, t1$12 == null ? other.series : t1$12), color: (t1$13 = color, t1$13 == null ? other.color : t1$13), fillColor: (t1$14 = fillColor, t1$14 == null ? other.fillColor : t1$14), areaColor: (t1$15 = areaColor, t1$15 == null ? other.areaColor : t1$15), dashPattern: (t1$16 = dashPattern, t1$16 == null ? other.dashPattern : t1$16), chartPosition: (t1$17 = chartPosition, t1$17 == null ? other.chartPosition : t1$17), chartPositionLower: (t1$18 = chartPositionLower, t1$18 == null ? other.chartPositionLower : t1$18), chartPositionUpper: (t1$19 = chartPositionUpper, t1$19 == null ? other.chartPositionUpper : t1$19), domainDistance: (t1$20 = domainDistance, t1$20 == null ? other.domainDistance : t1$20), measureDistance: (t1$21 = measureDistance, t1$21 == null ? other.measureDistance : t1$21), radiusPx: (t1$22 = radiusPx, t1$22 == null ? other.radiusPx : t1$22), symbolRenderer: (t1$23 = symbolRenderer, t1$23 == null ? other.symbolRenderer : t1$23), strokeWidthPx: (t1$24 = radiusPx, t1$24 == null ? other.strokeWidthPx : t1$24)});
      }
      get formattedDomain() {
        let t1;
        return this.domainFormatter != null ? (t1 = this.domain, this.domainFormatter(t1)) : dart.toString(this.domain);
      }
      get formattedMeasure() {
        let t1;
        return this.measureFormatter != null ? (t1 = this.measure, this.measureFormatter(t1)) : dart.toString(this.measure);
      }
    }
    (DatumDetails.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let index = opts && 'index' in opts ? opts.index : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let domainFormatter = opts && 'domainFormatter' in opts ? opts.domainFormatter : null;
      let domainLowerBound = opts && 'domainLowerBound' in opts ? opts.domainLowerBound : null;
      let domainUpperBound = opts && 'domainUpperBound' in opts ? opts.domainUpperBound : null;
      let measure = opts && 'measure' in opts ? opts.measure : null;
      let measureFormatter = opts && 'measureFormatter' in opts ? opts.measureFormatter : null;
      let measureLowerBound = opts && 'measureLowerBound' in opts ? opts.measureLowerBound : null;
      let measureUpperBound = opts && 'measureUpperBound' in opts ? opts.measureUpperBound : null;
      let measureOffset = opts && 'measureOffset' in opts ? opts.measureOffset : null;
      let rawMeasure = opts && 'rawMeasure' in opts ? opts.rawMeasure : null;
      let rawMeasureLowerBound = opts && 'rawMeasureLowerBound' in opts ? opts.rawMeasureLowerBound : null;
      let rawMeasureUpperBound = opts && 'rawMeasureUpperBound' in opts ? opts.rawMeasureUpperBound : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let fillColor = opts && 'fillColor' in opts ? opts.fillColor : null;
      let areaColor = opts && 'areaColor' in opts ? opts.areaColor : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let chartPosition = opts && 'chartPosition' in opts ? opts.chartPosition : null;
      let chartPositionLower = opts && 'chartPositionLower' in opts ? opts.chartPositionLower : null;
      let chartPositionUpper = opts && 'chartPositionUpper' in opts ? opts.chartPositionUpper : null;
      let domainDistance = opts && 'domainDistance' in opts ? opts.domainDistance : null;
      let measureDistance = opts && 'measureDistance' in opts ? opts.measureDistance : null;
      let relativeDistance = opts && 'relativeDistance' in opts ? opts.relativeDistance : null;
      let radiusPx = opts && 'radiusPx' in opts ? opts.radiusPx : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
      this[datum$] = datum;
      this[index$] = index;
      this[domain$] = domain;
      this[domainFormatter$] = domainFormatter;
      this[domainLowerBound$] = domainLowerBound;
      this[domainUpperBound$] = domainUpperBound;
      this[measure$] = measure;
      this[measureFormatter$] = measureFormatter;
      this[measureLowerBound$] = measureLowerBound;
      this[measureUpperBound$] = measureUpperBound;
      this[measureOffset$] = measureOffset;
      this[rawMeasure$] = rawMeasure;
      this[rawMeasureLowerBound$] = rawMeasureLowerBound;
      this[rawMeasureUpperBound$] = rawMeasureUpperBound;
      this[series$0] = series;
      this[color$] = color;
      this[fillColor$] = fillColor;
      this[areaColor$] = areaColor;
      this[dashPattern$] = dashPattern;
      this[chartPosition$] = chartPosition;
      this[chartPositionLower$] = chartPositionLower;
      this[chartPositionUpper$] = chartPositionUpper;
      this[domainDistance$] = domainDistance;
      this[measureDistance$] = measureDistance;
      this[relativeDistance$] = relativeDistance;
      this[radiusPx$] = radiusPx;
      this[symbolRenderer$] = symbolRenderer;
      this[strokeWidthPx$] = strokeWidthPx;
      ;
    }).prototype = DatumDetails.prototype;
    dart.addTypeTests(DatumDetails);
    DatumDetails.prototype[_is_DatumDetails_default] = true;
    dart.addTypeCaches(DatumDetails);
    dart.setGetterSignature(DatumDetails, () => ({
      __proto__: dart.getGetters(DatumDetails.__proto__),
      formattedDomain: dart.legacy(core.String),
      formattedMeasure: dart.legacy(core.String)
    }));
    dart.setLibraryUri(DatumDetails, I[22]);
    dart.setFieldSignature(DatumDetails, () => ({
      __proto__: dart.getFields(DatumDetails.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      index: dart.finalFieldType(dart.legacy(core.int)),
      domain: dart.finalFieldType(dart.legacy(D)),
      domainLowerBound: dart.finalFieldType(dart.legacy(D)),
      domainUpperBound: dart.finalFieldType(dart.legacy(D)),
      measure: dart.finalFieldType(dart.legacy(core.num)),
      measureLowerBound: dart.finalFieldType(dart.legacy(core.num)),
      measureUpperBound: dart.finalFieldType(dart.legacy(core.num)),
      measureOffset: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasure: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasureLowerBound: dart.finalFieldType(dart.legacy(core.num)),
      rawMeasureUpperBound: dart.finalFieldType(dart.legacy(core.num)),
      series: dart.finalFieldType(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D)))),
      color: dart.finalFieldType(dart.legacy(color.Color)),
      fillColor: dart.finalFieldType(dart.legacy(color.Color)),
      areaColor: dart.finalFieldType(dart.legacy(color.Color)),
      dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      chartPosition: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      chartPositionLower: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      chartPositionUpper: dart.finalFieldType(dart.legacy(math.Point$(dart.legacy(core.double)))),
      domainDistance: dart.finalFieldType(dart.legacy(core.double)),
      measureDistance: dart.finalFieldType(dart.legacy(core.double)),
      relativeDistance: dart.finalFieldType(dart.legacy(core.double)),
      radiusPx: dart.finalFieldType(dart.legacy(core.double)),
      symbolRenderer: dart.finalFieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      strokeWidthPx: dart.finalFieldType(dart.legacy(core.double)),
      domainFormatter: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)]))),
      measureFormatter: dart.fieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])))
    }));
    return DatumDetails;
  });
  datum_details.DatumDetails = datum_details.DatumDetails$();
  dart.addTypeTests(datum_details.DatumDetails, _is_DatumDetails_default);
  const _is_TickFormatter_default = Symbol('_is_TickFormatter_default');
  tick_formatter.TickFormatter$ = dart.generic(D => {
    class TickFormatter extends core.Object {}
    (TickFormatter.new = function() {
      ;
    }).prototype = TickFormatter.prototype;
    dart.addTypeTests(TickFormatter);
    TickFormatter.prototype[_is_TickFormatter_default] = true;
    dart.addTypeCaches(TickFormatter);
    dart.setLibraryUri(TickFormatter, I[23]);
    return TickFormatter;
  });
  tick_formatter.TickFormatter = tick_formatter.TickFormatter$();
  dart.addTypeTests(tick_formatter.TickFormatter, _is_TickFormatter_default);
  const _is_SimpleTickFormatterBase_default = Symbol('_is_SimpleTickFormatterBase_default');
  tick_formatter.SimpleTickFormatterBase$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var ListOfDL = () => (ListOfDL = dart.constFn(core.List$(DL())))();
    var ListLOfDL = () => (ListLOfDL = dart.constFn(dart.legacy(ListOfDL())))();
    var MapOfDL$StringL = () => (MapOfDL$StringL = dart.constFn(core.Map$(DL(), T$.StringL())))();
    var MapLOfDL$StringL = () => (MapLOfDL$StringL = dart.constFn(dart.legacy(MapOfDL$StringL())))();
    var DLToStringL = () => (DLToStringL = dart.constFn(dart.fnType(T$.StringL(), [DL()])))();
    class SimpleTickFormatterBase extends core.Object {
      format(tickValues, cache, opts) {
        ListLOfDL().as(tickValues);
        MapLOfDL$StringL().as(cache);
        let stepSize = opts && 'stepSize' in opts ? opts.stepSize : null;
        return tickValues[$map](T$.StringL(), dart.fn(value => {
          let formattedString = cache[$_get](value);
          if (formattedString == null) {
            formattedString = this.formatValue(value);
            cache[$_set](value, formattedString);
          }
          return formattedString;
        }, DLToStringL()))[$toList]();
      }
    }
    (SimpleTickFormatterBase.new = function() {
      ;
    }).prototype = SimpleTickFormatterBase.prototype;
    dart.addTypeTests(SimpleTickFormatterBase);
    SimpleTickFormatterBase.prototype[_is_SimpleTickFormatterBase_default] = true;
    dart.addTypeCaches(SimpleTickFormatterBase);
    SimpleTickFormatterBase[dart.implements] = () => [tick_formatter.TickFormatter$(dart.legacy(D))];
    dart.setMethodSignature(SimpleTickFormatterBase, () => ({
      __proto__: dart.getMethods(SimpleTickFormatterBase.__proto__),
      format: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(core.Object), dart.legacy(core.Object)], {stepSize: dart.legacy(core.num)}, {})
    }));
    dart.setLibraryUri(SimpleTickFormatterBase, I[23]);
    return SimpleTickFormatterBase;
  });
  tick_formatter.SimpleTickFormatterBase = tick_formatter.SimpleTickFormatterBase$();
  dart.addTypeTests(tick_formatter.SimpleTickFormatterBase, _is_SimpleTickFormatterBase_default);
  tick_formatter.OrdinalTickFormatter = class OrdinalTickFormatter extends tick_formatter.SimpleTickFormatterBase$(dart.legacy(core.String)) {
    formatValue(value) {
      T$.StringL().as(value);
      return value;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalTickFormatterL().is(other);
    }
    get hashCode() {
      return 31;
    }
  };
  (tick_formatter.OrdinalTickFormatter.new = function() {
    tick_formatter.OrdinalTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.OrdinalTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.OrdinalTickFormatter);
  dart.addTypeCaches(tick_formatter.OrdinalTickFormatter);
  dart.setMethodSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.OrdinalTickFormatter.__proto__),
    formatValue: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(tick_formatter.OrdinalTickFormatter, () => ({
    __proto__: dart.getGetters(tick_formatter.OrdinalTickFormatter.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tick_formatter.OrdinalTickFormatter, I[23]);
  dart.defineExtensionMethods(tick_formatter.OrdinalTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.OrdinalTickFormatter, ['hashCode']);
  var formatter$ = dart.privateName(tick_formatter, "NumericTickFormatter.formatter");
  tick_formatter.NumericTickFormatter = class NumericTickFormatter extends tick_formatter.SimpleTickFormatterBase$(dart.legacy(core.num)) {
    get formatter() {
      return this[formatter$];
    }
    set formatter(value) {
      super.formatter = value;
    }
    static new(opts) {
      let formatter = opts && 'formatter' in opts ? opts.formatter : null;
      formatter == null ? formatter = tick_formatter.NumericTickFormatter._getFormatter(new intl.NumberFormat.decimalPattern()) : null;
      return new tick_formatter.NumericTickFormatter._internal(formatter);
    }
    static fromNumberFormat(numberFormat) {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(numberFormat));
    }
    static compactSimpleCurrency() {
      return new tick_formatter.NumericTickFormatter._internal(tick_formatter.NumericTickFormatter._getFormatter(intl.NumberFormat.compactCurrency()));
    }
    static _getFormatter(numberFormat) {
      return dart.fn(value => numberFormat.format(value), T$.numLToStringL());
    }
    formatValue(value) {
      let t1;
      T$.numL().as(value);
      t1 = value;
      return this.formatter(t1);
    }
    _equals(other) {
      if (other == null) return false;
      return T$.NumericTickFormatterL().is(other) && dart.equals(this.formatter, other.formatter);
    }
    get hashCode() {
      return dart.hashCode(this.formatter);
    }
  };
  (tick_formatter.NumericTickFormatter._internal = function(formatter) {
    this[formatter$] = formatter;
    tick_formatter.NumericTickFormatter.__proto__.new.call(this);
    ;
  }).prototype = tick_formatter.NumericTickFormatter.prototype;
  dart.addTypeTests(tick_formatter.NumericTickFormatter);
  dart.addTypeCaches(tick_formatter.NumericTickFormatter);
  dart.setMethodSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getMethods(tick_formatter.NumericTickFormatter.__proto__),
    formatValue: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getGetters(tick_formatter.NumericTickFormatter.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(tick_formatter.NumericTickFormatter, I[23]);
  dart.setFieldSignature(tick_formatter.NumericTickFormatter, () => ({
    __proto__: dart.getFields(tick_formatter.NumericTickFormatter.__proto__),
    formatter: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])))
  }));
  dart.defineExtensionMethods(tick_formatter.NumericTickFormatter, ['_equals']);
  dart.defineExtensionAccessors(tick_formatter.NumericTickFormatter, ['hashCode']);
  const _is_TickDrawStrategy_default = Symbol('_is_TickDrawStrategy_default');
  tick_draw_strategy.TickDrawStrategy$ = dart.generic(D => {
    class TickDrawStrategy extends core.Object {}
    (TickDrawStrategy.new = function() {
      ;
    }).prototype = TickDrawStrategy.prototype;
    dart.addTypeTests(TickDrawStrategy);
    TickDrawStrategy.prototype[_is_TickDrawStrategy_default] = true;
    dart.addTypeCaches(TickDrawStrategy);
    dart.setLibraryUri(TickDrawStrategy, I[24]);
    return TickDrawStrategy;
  });
  tick_draw_strategy.TickDrawStrategy = tick_draw_strategy.TickDrawStrategy$();
  dart.addTypeTests(tick_draw_strategy.TickDrawStrategy, _is_TickDrawStrategy_default);
  style.Style = class Style extends core.Object {};
  (style.Style.new = function() {
    ;
  }).prototype = style.Style.prototype;
  dart.addTypeTests(style.Style);
  dart.addTypeCaches(style.Style);
  dart.setLibraryUri(style.Style, I[25]);
  material_style.MaterialStyle = class MaterialStyle extends core.Object {
    get black() {
      return material_palette.MaterialPalette.black;
    }
    get transparent() {
      return material_palette.MaterialPalette.transparent;
    }
    get white() {
      return material_palette.MaterialPalette.white;
    }
    getOrderedPalettes(count) {
      return material_palette.MaterialPalette.getOrderedPalettes(count);
    }
    createAxisLineStyle(graphicsFactory, spec) {
      let t2, t2$, t2$0, t2$1, t2$2, t1;
      t1 = graphicsFactory.createLinePaint();
      return (() => {
        t1.color = (t2$ = (t2 = spec, t2 == null ? null : t2.color), t2$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t2$);
        t1.dashPattern = (t2$0 = spec, t2$0 == null ? null : t2$0.dashPattern);
        t1.strokeWidth = (t2$2 = (t2$1 = spec, t2$1 == null ? null : t2$1.thickness), t2$2 == null ? 1 : t2$2);
        return t1;
      })();
    }
    createTickLineStyle(graphicsFactory, spec) {
      let t2, t2$, t2$0, t2$1, t2$2, t1;
      t1 = graphicsFactory.createLinePaint();
      return (() => {
        t1.color = (t2$ = (t2 = spec, t2 == null ? null : t2.color), t2$ == null ? material_palette.MaterialPalette.gray.shadeDefault : t2$);
        t1.dashPattern = (t2$0 = spec, t2$0 == null ? null : t2$0.dashPattern);
        t1.strokeWidth = (t2$2 = (t2$1 = spec, t2$1 == null ? null : t2$1.thickness), t2$2 == null ? 1 : t2$2);
        return t1;
      })();
    }
    get tickLength() {
      return 3;
    }
    get tickColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    createGridlineStyle(graphicsFactory, spec) {
      let t2, t2$, t2$0, t2$1, t2$2, t1;
      t1 = graphicsFactory.createLinePaint();
      return (() => {
        t1.color = (t2$ = (t2 = spec, t2 == null ? null : t2.color), t2$ == null ? material_palette.MaterialPalette.gray.shade300 : t2$);
        t1.dashPattern = (t2$0 = spec, t2$0 == null ? null : t2$0.dashPattern);
        t1.strokeWidth = (t2$2 = (t2$1 = spec, t2$1 == null ? null : t2$1.thickness), t2$2 == null ? 1 : t2$2);
        return t1;
      })();
    }
    get arcLabelOutsideLeaderLine() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get defaultSeriesColor() {
      return material_palette.MaterialPalette.gray.shadeDefault;
    }
    get arcStrokeColor() {
      return material_palette.MaterialPalette.white;
    }
    get legendEntryTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get legendTitleTextColor() {
      return material_palette.MaterialPalette.gray.shade800;
    }
    get linePointHighlighterColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get noDataColor() {
      return material_palette.MaterialPalette.gray.shade200;
    }
    get rangeAnnotationColor() {
      return material_palette.MaterialPalette.gray.shade100;
    }
    get sliderFillColor() {
      return material_palette.MaterialPalette.white;
    }
    get sliderStrokeColor() {
      return material_palette.MaterialPalette.gray.shade600;
    }
    get chartBackgroundColor() {
      return material_palette.MaterialPalette.white;
    }
    get rangeBandSize() {
      return 0.65;
    }
  };
  (material_style.MaterialStyle.new = function() {
    ;
  }).prototype = material_style.MaterialStyle.prototype;
  dart.addTypeTests(material_style.MaterialStyle);
  dart.addTypeCaches(material_style.MaterialStyle);
  material_style.MaterialStyle[dart.implements] = () => [style.Style];
  dart.setMethodSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getMethods(material_style.MaterialStyle.__proto__),
    getOrderedPalettes: dart.fnType(dart.legacy(core.List$(dart.legacy(palette.Palette))), [dart.legacy(core.int)]),
    createAxisLineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)]),
    createTickLineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)]),
    createGridlineStyle: dart.fnType(dart.legacy(line_style.LineStyle), [dart.legacy(graphics_factory.GraphicsFactory), dart.legacy(axis_spec.LineStyleSpec)])
  }));
  dart.setGetterSignature(material_style.MaterialStyle, () => ({
    __proto__: dart.getGetters(material_style.MaterialStyle.__proto__),
    black: dart.legacy(color.Color),
    transparent: dart.legacy(color.Color),
    white: dart.legacy(color.Color),
    tickLength: dart.legacy(core.int),
    tickColor: dart.legacy(color.Color),
    arcLabelOutsideLeaderLine: dart.legacy(color.Color),
    defaultSeriesColor: dart.legacy(color.Color),
    arcStrokeColor: dart.legacy(color.Color),
    legendEntryTextColor: dart.legacy(color.Color),
    legendTitleTextColor: dart.legacy(color.Color),
    linePointHighlighterColor: dart.legacy(color.Color),
    noDataColor: dart.legacy(color.Color),
    rangeAnnotationColor: dart.legacy(color.Color),
    sliderFillColor: dart.legacy(color.Color),
    sliderStrokeColor: dart.legacy(color.Color),
    chartBackgroundColor: dart.legacy(color.Color),
    rangeBandSize: dart.legacy(core.double)
  }));
  dart.setLibraryUri(material_style.MaterialStyle, I[26]);
  var _style = dart.privateName(style_factory, "_style");
  style_factory.StyleFactory = class StyleFactory extends core.Object {
    static get style() {
      return style_factory.StyleFactory._styleFactory[_style];
    }
    static set style(value) {
      style_factory.StyleFactory._styleFactory[_style] = value;
    }
  };
  (style_factory.StyleFactory._internal = function() {
    this[_style] = C[30] || CT.C30;
    ;
  }).prototype = style_factory.StyleFactory.prototype;
  dart.addTypeTests(style_factory.StyleFactory);
  dart.addTypeCaches(style_factory.StyleFactory);
  dart.setLibraryUri(style_factory.StyleFactory, I[27]);
  dart.setFieldSignature(style_factory.StyleFactory, () => ({
    __proto__: dart.getFields(style_factory.StyleFactory.__proto__),
    [_style]: dart.fieldType(dart.legacy(style.Style))
  }));
  dart.defineLazy(style_factory.StyleFactory, {
    /*style_factory.StyleFactory._styleFactory*/get _styleFactory() {
      return new style_factory.StyleFactory._internal();
    }
  }, true);
  var start$0 = dart.privateName(scale, "ScaleOutputExtent.start");
  var end$0 = dart.privateName(scale, "ScaleOutputExtent.end");
  scale.ScaleOutputExtent = class ScaleOutputExtent extends core.Object {
    get start() {
      return this[start$0];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$0];
    }
    set end(value) {
      super.end = value;
    }
    get min() {
      return math.min(T$.intL(), this.start, this.end);
    }
    get max() {
      return math.max(T$.intL(), this.start, this.end);
    }
    containsValue(value) {
      return dart.notNull(value) >= dart.notNull(this.min) && dart.notNull(value) <= dart.notNull(this.max);
    }
    get diff() {
      return dart.notNull(this.end) - dart.notNull(this.start);
    }
    get width() {
      return this.diff[$abs]();
    }
    _equals(other) {
      if (other == null) return false;
      return T$.ScaleOutputExtentL().is(other) && this.start == other.start && this.end == other.end;
    }
    get hashCode() {
      return dart.hashCode(this.start) + dart.hashCode(this.end) * 31;
    }
    toString() {
      return "ScaleOutputRange(" + dart.str(this.start) + ", " + dart.str(this.end) + ")";
    }
  };
  (scale.ScaleOutputExtent.new = function(start, end) {
    this[start$0] = start;
    this[end$0] = end;
    ;
  }).prototype = scale.ScaleOutputExtent.prototype;
  dart.addTypeTests(scale.ScaleOutputExtent);
  dart.addTypeCaches(scale.ScaleOutputExtent);
  dart.setMethodSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getMethods(scale.ScaleOutputExtent.__proto__),
    containsValue: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.double)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getGetters(scale.ScaleOutputExtent.__proto__),
    min: dart.legacy(core.int),
    max: dart.legacy(core.int),
    diff: dart.legacy(core.int),
    width: dart.legacy(core.int),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(scale.ScaleOutputExtent, I[2]);
  dart.setFieldSignature(scale.ScaleOutputExtent, () => ({
    __proto__: dart.getFields(scale.ScaleOutputExtent.__proto__),
    start: dart.finalFieldType(dart.legacy(core.int)),
    end: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(scale.ScaleOutputExtent, ['_equals', 'toString']);
  dart.defineExtensionAccessors(scale.ScaleOutputExtent, ['hashCode']);
  scale.RangeBandType = class RangeBandType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (scale.RangeBandType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = scale.RangeBandType.prototype;
  dart.addTypeTests(scale.RangeBandType);
  dart.addTypeCaches(scale.RangeBandType);
  dart.setMethodSignature(scale.RangeBandType, () => ({
    __proto__: dart.getMethods(scale.RangeBandType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(scale.RangeBandType, I[2]);
  dart.setFieldSignature(scale.RangeBandType, () => ({
    __proto__: dart.getFields(scale.RangeBandType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(scale.RangeBandType, ['toString']);
  scale.RangeBandType.none = C[5] || CT.C5;
  scale.RangeBandType.fixedPixel = C[0] || CT.C0;
  scale.RangeBandType.fixedDomain = C[4] || CT.C4;
  scale.RangeBandType.fixedPercentOfStep = C[3] || CT.C3;
  scale.RangeBandType.styleAssignedPercentOfStep = C[2] || CT.C2;
  scale.RangeBandType.fixedPixelSpaceFromStep = C[1] || CT.C1;
  scale.RangeBandType.values = C[31] || CT.C31;
  const type = RangeBandConfig_type;
  const size = RangeBandConfig_size;
  scale.RangeBandConfig = class RangeBandConfig extends core.Object {
    get type() {
      return this[type];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale.RangeBandConfig.none = function() {
    this[type] = scale.RangeBandType.none;
    this[size] = 0.0;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedPixel = function(pixels) {
    this[type] = scale.RangeBandType.fixedPixel;
    this[size] = pixels;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedDomain = function(domainSize) {
    this[type] = scale.RangeBandType.fixedDomain;
    this[size] = domainSize;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.stepChartBand = function() {
    this[type] = scale.RangeBandType.fixedPercentOfStep;
    this[size] = 1.0;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.percentOfStep = function(percentOfStepWidth) {
    this[type] = scale.RangeBandType.fixedPercentOfStep;
    this[size] = percentOfStepWidth;
    if (!(dart.notNull(percentOfStepWidth) >= 0 && dart.notNull(percentOfStepWidth) <= 1.0)) dart.assertFailed(null, I[28], 261, 12, "percentOfStepWidth >= 0 && percentOfStepWidth <= 1.0");
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.styleAssignedPercent = function(seriesCount = 1) {
    let t1;
    this[type] = scale.RangeBandType.styleAssignedPercentOfStep;
    this[size] = (t1 = style_factory.StyleFactory.style.rangeBandSize, t1 == null ? 0.65 : t1);
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  (scale.RangeBandConfig.fixedPixelSpaceBetweenStep = function(pixels) {
    this[type] = scale.RangeBandType.fixedPixelSpaceFromStep;
    this[size] = pixels;
    ;
  }).prototype = scale.RangeBandConfig.prototype;
  dart.addTypeTests(scale.RangeBandConfig);
  dart.addTypeCaches(scale.RangeBandConfig);
  dart.setLibraryUri(scale.RangeBandConfig, I[2]);
  dart.setFieldSignature(scale.RangeBandConfig, () => ({
    __proto__: dart.getFields(scale.RangeBandConfig.__proto__),
    type: dart.finalFieldType(dart.legacy(scale.RangeBandType)),
    size: dart.finalFieldType(dart.legacy(core.double))
  }));
  scale.StepSizeType = class StepSizeType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (scale.StepSizeType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = scale.StepSizeType.prototype;
  dart.addTypeTests(scale.StepSizeType);
  dart.addTypeCaches(scale.StepSizeType);
  dart.setMethodSignature(scale.StepSizeType, () => ({
    __proto__: dart.getMethods(scale.StepSizeType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(scale.StepSizeType, I[2]);
  dart.setFieldSignature(scale.StepSizeType, () => ({
    __proto__: dart.getFields(scale.StepSizeType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(scale.StepSizeType, ['toString']);
  scale.StepSizeType.autoDetect = C[8] || CT.C8;
  scale.StepSizeType.fixedDomain = C[10] || CT.C10;
  scale.StepSizeType.fixedPixels = C[9] || CT.C9;
  scale.StepSizeType.values = C[32] || CT.C32;
  const type$ = StepSizeConfig_type;
  const size$ = StepSizeConfig_size;
  scale.StepSizeConfig = class StepSizeConfig extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
  };
  (scale.StepSizeConfig.auto = function() {
    this[type$] = scale.StepSizeType.autoDetect;
    this[size$] = 0.0;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  (scale.StepSizeConfig.fixedPixels = function(pixels) {
    this[type$] = scale.StepSizeType.fixedPixels;
    this[size$] = pixels;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  (scale.StepSizeConfig.fixedDomain = function(domainSize) {
    this[type$] = scale.StepSizeType.fixedDomain;
    this[size$] = domainSize;
    ;
  }).prototype = scale.StepSizeConfig.prototype;
  dart.addTypeTests(scale.StepSizeConfig);
  dart.addTypeCaches(scale.StepSizeConfig);
  dart.setLibraryUri(scale.StepSizeConfig, I[2]);
  dart.setFieldSignature(scale.StepSizeConfig, () => ({
    __proto__: dart.getFields(scale.StepSizeConfig.__proto__),
    type: dart.finalFieldType(dart.legacy(scale.StepSizeType)),
    size: dart.finalFieldType(dart.legacy(core.double))
  }));
  var showAxisLine$ = dart.privateName(axis_spec, "AxisSpec.showAxisLine");
  var renderSpec$ = dart.privateName(axis_spec, "AxisSpec.renderSpec");
  var tickProviderSpec$ = dart.privateName(axis_spec, "AxisSpec.tickProviderSpec");
  var tickFormatterSpec$ = dart.privateName(axis_spec, "AxisSpec.tickFormatterSpec");
  var scaleSpec$ = dart.privateName(axis_spec, "AxisSpec.scaleSpec");
  const _is_AxisSpec_default = Symbol('_is_AxisSpec_default');
  axis_spec.AxisSpec$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var AxisOfDL = () => (AxisOfDL = dart.constFn(axis.Axis$(DL())))();
    var AxisLOfDL = () => (AxisLOfDL = dart.constFn(dart.legacy(AxisOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    class AxisSpec extends core.Object {
      get showAxisLine() {
        return this[showAxisLine$];
      }
      set showAxisLine(value) {
        super.showAxisLine = value;
      }
      get renderSpec() {
        return this[renderSpec$];
      }
      set renderSpec(value) {
        super.renderSpec = value;
      }
      get tickProviderSpec() {
        return this[tickProviderSpec$];
      }
      set tickProviderSpec(value) {
        super.tickProviderSpec = value;
      }
      get tickFormatterSpec() {
        return this[tickFormatterSpec$];
      }
      set tickFormatterSpec(value) {
        super.tickFormatterSpec = value;
      }
      get scaleSpec() {
        return this[scaleSpec$];
      }
      set scaleSpec(value) {
        super.scaleSpec = value;
      }
      static from(other, opts) {
        let t1, t1$, t1$0, t1$1, t1$2;
        let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
        let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
        let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
        let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
        let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
        return new (axis_spec.AxisSpec$(dart.legacy(D))).new({renderSpec: dart.legacy(axis_spec.RenderSpec$(dart.legacy(D))).as((t1 = renderSpec, t1 == null ? other.renderSpec : t1)), tickProviderSpec: dart.legacy(axis_spec.TickProviderSpec$(dart.legacy(D))).as((t1$ = tickProviderSpec, t1$ == null ? other.tickProviderSpec : t1$)), tickFormatterSpec: dart.legacy(axis_spec.TickFormatterSpec$(dart.legacy(D))).as((t1$0 = tickFormatterSpec, t1$0 == null ? other.tickFormatterSpec : t1$0)), showAxisLine: (t1$1 = showAxisLine, t1$1 == null ? other.showAxisLine : t1$1), scaleSpec: (t1$2 = scaleSpec, t1$2 == null ? other.scaleSpec : t1$2)});
      }
      configure(axis, context, graphicsFactory) {
        AxisLOfDL().as(axis);
        if (this.showAxisLine != null) {
          axis.forceDrawAxisLine = this.showAxisLine;
        }
        if (this.renderSpec != null) {
          axis.tickDrawStrategy = this.renderSpec.createDrawStrategy(context, graphicsFactory);
        }
        if (this.tickProviderSpec != null) {
          axis.tickProvider = this.tickProviderSpec.createTickProvider(context);
        }
        if (this.tickFormatterSpec != null) {
          axis.tickFormatter = this.tickFormatterSpec.createTickFormatter(context);
        }
        if (this.scaleSpec != null) {
          axis.scale = MutableScaleLOfDL().as(this.scaleSpec.createScale());
        }
      }
      createAxis() {
        return null;
      }
      _equals(other) {
        if (other == null) return false;
        return this === other || T$.AxisSpecL().is(other) && dart.equals(this.renderSpec, other.renderSpec) && dart.equals(this.tickProviderSpec, other.tickProviderSpec) && dart.equals(this.tickFormatterSpec, other.tickFormatterSpec) && this.showAxisLine == other.showAxisLine && dart.equals(this.scaleSpec, other.scaleSpec);
      }
      get hashCode() {
        let t1, t1$;
        let hashcode = (t1$ = (t1 = this.renderSpec, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickProviderSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.tickFormatterSpec));
        hashcode = dart.notNull(hashcode) * 37 + dart.hashCode(this.showAxisLine);
        hashcode = dart.notNull(this.hashCode) * 37 + dart.notNull(dart.hashCode(this.scaleSpec));
        return hashcode;
      }
    }
    (AxisSpec.new = function(opts) {
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let scaleSpec = opts && 'scaleSpec' in opts ? opts.scaleSpec : null;
      this[renderSpec$] = renderSpec;
      this[tickProviderSpec$] = tickProviderSpec;
      this[tickFormatterSpec$] = tickFormatterSpec;
      this[showAxisLine$] = showAxisLine;
      this[scaleSpec$] = scaleSpec;
      ;
    }).prototype = AxisSpec.prototype;
    dart.addTypeTests(AxisSpec);
    AxisSpec.prototype[_is_AxisSpec_default] = true;
    dart.addTypeCaches(AxisSpec);
    dart.setMethodSignature(AxisSpec, () => ({
      __proto__: dart.getMethods(AxisSpec.__proto__),
      configure: dart.fnType(dart.dynamic, [dart.legacy(core.Object), dart.legacy(chart_context.ChartContext), dart.legacy(graphics_factory.GraphicsFactory)]),
      createAxis: dart.fnType(dart.legacy(axis.Axis$(dart.legacy(D))), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(AxisSpec, () => ({
      __proto__: dart.getGetters(AxisSpec.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(AxisSpec, I[29]);
    dart.setFieldSignature(AxisSpec, () => ({
      __proto__: dart.getFields(AxisSpec.__proto__),
      showAxisLine: dart.finalFieldType(dart.legacy(core.bool)),
      renderSpec: dart.finalFieldType(dart.legacy(axis_spec.RenderSpec$(dart.legacy(D)))),
      tickProviderSpec: dart.finalFieldType(dart.legacy(axis_spec.TickProviderSpec$(dart.legacy(D)))),
      tickFormatterSpec: dart.finalFieldType(dart.legacy(axis_spec.TickFormatterSpec$(dart.legacy(D)))),
      scaleSpec: dart.finalFieldType(dart.legacy(axis_spec.ScaleSpec))
    }));
    dart.defineExtensionMethods(AxisSpec, ['_equals']);
    dart.defineExtensionAccessors(AxisSpec, ['hashCode']);
    return AxisSpec;
  });
  axis_spec.AxisSpec = axis_spec.AxisSpec$();
  dart.addTypeTests(axis_spec.AxisSpec, _is_AxisSpec_default);
  const _is_TickProviderSpec_default = Symbol('_is_TickProviderSpec_default');
  axis_spec.TickProviderSpec$ = dart.generic(D => {
    class TickProviderSpec extends core.Object {}
    (TickProviderSpec.new = function() {
      ;
    }).prototype = TickProviderSpec.prototype;
    dart.addTypeTests(TickProviderSpec);
    TickProviderSpec.prototype[_is_TickProviderSpec_default] = true;
    dart.addTypeCaches(TickProviderSpec);
    dart.setLibraryUri(TickProviderSpec, I[29]);
    return TickProviderSpec;
  });
  axis_spec.TickProviderSpec = axis_spec.TickProviderSpec$();
  dart.addTypeTests(axis_spec.TickProviderSpec, _is_TickProviderSpec_default);
  const _is_TickFormatterSpec_default = Symbol('_is_TickFormatterSpec_default');
  axis_spec.TickFormatterSpec$ = dart.generic(D => {
    class TickFormatterSpec extends core.Object {}
    (TickFormatterSpec.new = function() {
      ;
    }).prototype = TickFormatterSpec.prototype;
    dart.addTypeTests(TickFormatterSpec);
    TickFormatterSpec.prototype[_is_TickFormatterSpec_default] = true;
    dart.addTypeCaches(TickFormatterSpec);
    dart.setLibraryUri(TickFormatterSpec, I[29]);
    return TickFormatterSpec;
  });
  axis_spec.TickFormatterSpec = axis_spec.TickFormatterSpec$();
  dart.addTypeTests(axis_spec.TickFormatterSpec, _is_TickFormatterSpec_default);
  const _is_ScaleSpec_default = Symbol('_is_ScaleSpec_default');
  axis_spec.ScaleSpec$ = dart.generic(D => {
    class ScaleSpec extends core.Object {}
    (ScaleSpec.new = function() {
      ;
    }).prototype = ScaleSpec.prototype;
    dart.addTypeTests(ScaleSpec);
    ScaleSpec.prototype[_is_ScaleSpec_default] = true;
    dart.addTypeCaches(ScaleSpec);
    dart.setLibraryUri(ScaleSpec, I[29]);
    return ScaleSpec;
  });
  axis_spec.ScaleSpec = axis_spec.ScaleSpec$();
  dart.addTypeTests(axis_spec.ScaleSpec, _is_ScaleSpec_default);
  const _is_RenderSpec_default = Symbol('_is_RenderSpec_default');
  axis_spec.RenderSpec$ = dart.generic(D => {
    class RenderSpec extends core.Object {}
    (RenderSpec.new = function() {
      ;
    }).prototype = RenderSpec.prototype;
    dart.addTypeTests(RenderSpec);
    RenderSpec.prototype[_is_RenderSpec_default] = true;
    dart.addTypeCaches(RenderSpec);
    dart.setLibraryUri(RenderSpec, I[29]);
    return RenderSpec;
  });
  axis_spec.RenderSpec = axis_spec.RenderSpec$();
  dart.addTypeTests(axis_spec.RenderSpec, _is_RenderSpec_default);
  var fontFamily$ = dart.privateName(axis_spec, "TextStyleSpec.fontFamily");
  var fontSize$ = dart.privateName(axis_spec, "TextStyleSpec.fontSize");
  var lineHeight$ = dart.privateName(axis_spec, "TextStyleSpec.lineHeight");
  var color$0 = dart.privateName(axis_spec, "TextStyleSpec.color");
  var fontWeight$ = dart.privateName(axis_spec, "TextStyleSpec.fontWeight");
  axis_spec.TextStyleSpec = class TextStyleSpec extends core.Object {
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T$.TextStyleSpecL().is(other) && this.fontFamily == other.fontFamily && this.fontSize == other.fontSize && this.lineHeight == other.lineHeight && dart.equals(this.color, other.color) && this.fontWeight == other.fontWeight;
    }
    get hashCode() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7;
      let hashcode = (t1$ = (t1 = this.fontFamily, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
      hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.fontSize, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
      hashcode = (t1$3 = dart.notNull(hashcode) * 37 + dart.notNull((t1$2 = this.lineHeight, t1$2 == null ? null : dart.hashCode(t1$2))), t1$3 === null ? 0 : t1$3);
      hashcode = (t1$5 = dart.notNull(hashcode) * 37 + dart.notNull((t1$4 = this.color, t1$4 == null ? null : dart.hashCode(t1$4))), t1$5 === null ? 0 : t1$5);
      hashcode = (t1$7 = dart.notNull(hashcode) * 37 + dart.notNull((t1$6 = this.fontWeight, t1$6 == null ? null : dart.hashCode(t1$6))), t1$7 === null ? 0 : t1$7);
      return hashcode;
    }
  };
  (axis_spec.TextStyleSpec.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let color = opts && 'color' in opts ? opts.color : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[lineHeight$] = lineHeight;
    this[color$0] = color;
    this[fontWeight$] = fontWeight;
    ;
  }).prototype = axis_spec.TextStyleSpec.prototype;
  dart.addTypeTests(axis_spec.TextStyleSpec);
  dart.addTypeCaches(axis_spec.TextStyleSpec);
  dart.setMethodSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.TextStyleSpec.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getGetters(axis_spec.TextStyleSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis_spec.TextStyleSpec, I[29]);
  dart.setFieldSignature(axis_spec.TextStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.TextStyleSpec.__proto__),
    fontFamily: dart.finalFieldType(dart.legacy(core.String)),
    fontSize: dart.finalFieldType(dart.legacy(core.int)),
    lineHeight: dart.finalFieldType(dart.legacy(core.double)),
    color: dart.finalFieldType(dart.legacy(color.Color)),
    fontWeight: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TextStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.TextStyleSpec, ['hashCode']);
  var color$1 = dart.privateName(axis_spec, "LineStyleSpec.color");
  var dashPattern$0 = dart.privateName(axis_spec, "LineStyleSpec.dashPattern");
  var thickness$ = dart.privateName(axis_spec, "LineStyleSpec.thickness");
  axis_spec.LineStyleSpec = class LineStyleSpec extends core.Object {
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
    get dashPattern() {
      return this[dashPattern$0];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T$.LineStyleSpecL().is(other) && dart.equals(this.color, other.color) && dart.equals(this.dashPattern, other.dashPattern) && this.thickness == other.thickness;
    }
    get hashCode() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      let hashcode = (t1$ = (t1 = this.color, t1 == null ? null : dart.hashCode(t1)), t1$ == null ? 0 : t1$);
      hashcode = (t1$1 = dart.notNull(hashcode) * 37 + dart.notNull((t1$0 = this.dashPattern, t1$0 == null ? null : dart.hashCode(t1$0))), t1$1 === null ? 0 : t1$1);
      hashcode = (t1$3 = dart.notNull(hashcode) * 37 + dart.notNull((t1$2 = this.thickness, t1$2 == null ? null : dart.hashCode(t1$2))), t1$3 === null ? 0 : t1$3);
      return hashcode;
    }
  };
  (axis_spec.LineStyleSpec.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : null;
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    this[color$1] = color;
    this[dashPattern$0] = dashPattern;
    this[thickness$] = thickness;
    ;
  }).prototype = axis_spec.LineStyleSpec.prototype;
  dart.addTypeTests(axis_spec.LineStyleSpec);
  dart.addTypeCaches(axis_spec.LineStyleSpec);
  dart.setMethodSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getMethods(axis_spec.LineStyleSpec.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getGetters(axis_spec.LineStyleSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis_spec.LineStyleSpec, I[29]);
  dart.setFieldSignature(axis_spec.LineStyleSpec, () => ({
    __proto__: dart.getFields(axis_spec.LineStyleSpec.__proto__),
    color: dart.finalFieldType(dart.legacy(color.Color)),
    dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    thickness: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(axis_spec.LineStyleSpec, ['_equals']);
  dart.defineExtensionAccessors(axis_spec.LineStyleSpec, ['hashCode']);
  axis_spec.TickLabelAnchor = class TickLabelAnchor extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelAnchor.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelAnchor.prototype;
  dart.addTypeTests(axis_spec.TickLabelAnchor);
  dart.addTypeCaches(axis_spec.TickLabelAnchor);
  dart.setMethodSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getMethods(axis_spec.TickLabelAnchor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis_spec.TickLabelAnchor, I[29]);
  dart.setFieldSignature(axis_spec.TickLabelAnchor, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelAnchor.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelAnchor, ['toString']);
  axis_spec.TickLabelAnchor.before = C[25] || CT.C25;
  axis_spec.TickLabelAnchor.centered = C[28] || CT.C28;
  axis_spec.TickLabelAnchor.after = C[26] || CT.C26;
  axis_spec.TickLabelAnchor.inside = C[27] || CT.C27;
  axis_spec.TickLabelAnchor.values = C[33] || CT.C33;
  axis_spec.TickLabelJustification = class TickLabelJustification extends core.Object {
    toString() {
      return this[_name$2];
    }
  };
  (axis_spec.TickLabelJustification.new = function(index, _name) {
    this.index = index;
    this[_name$2] = _name;
    ;
  }).prototype = axis_spec.TickLabelJustification.prototype;
  dart.addTypeTests(axis_spec.TickLabelJustification);
  dart.addTypeCaches(axis_spec.TickLabelJustification);
  dart.setMethodSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getMethods(axis_spec.TickLabelJustification.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis_spec.TickLabelJustification, I[29]);
  dart.setFieldSignature(axis_spec.TickLabelJustification, () => ({
    __proto__: dart.getFields(axis_spec.TickLabelJustification.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$2]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis_spec.TickLabelJustification, ['toString']);
  axis_spec.TickLabelJustification.inside = C[34] || CT.C34;
  axis_spec.TickLabelJustification.outside = C[35] || CT.C35;
  axis_spec.TickLabelJustification.values = C[36] || CT.C36;
  var id$ = dart.privateName(series$, "Series.id");
  var displayName$ = dart.privateName(series$, "Series.displayName");
  var overlaySeries$ = dart.privateName(series$, "Series.overlaySeries");
  var seriesCategory$ = dart.privateName(series$, "Series.seriesCategory");
  var seriesColor$ = dart.privateName(series$, "Series.seriesColor");
  var data$ = dart.privateName(series$, "Series.data");
  var keyFn$0 = dart.privateName(series$, "Series.keyFn");
  var domainFn$ = dart.privateName(series$, "Series.domainFn");
  var domainFormatterFn$ = dart.privateName(series$, "Series.domainFormatterFn");
  var domainLowerBoundFn$ = dart.privateName(series$, "Series.domainLowerBoundFn");
  var domainUpperBoundFn$ = dart.privateName(series$, "Series.domainUpperBoundFn");
  var measureFn$ = dart.privateName(series$, "Series.measureFn");
  var measureFormatterFn$ = dart.privateName(series$, "Series.measureFormatterFn");
  var measureLowerBoundFn$ = dart.privateName(series$, "Series.measureLowerBoundFn");
  var measureUpperBoundFn$ = dart.privateName(series$, "Series.measureUpperBoundFn");
  var measureOffsetFn$ = dart.privateName(series$, "Series.measureOffsetFn");
  var areaColorFn$ = dart.privateName(series$, "Series.areaColorFn");
  var colorFn$ = dart.privateName(series$, "Series.colorFn");
  var dashPatternFn$ = dart.privateName(series$, "Series.dashPatternFn");
  var fillColorFn$ = dart.privateName(series$, "Series.fillColorFn");
  var patternColorFn$ = dart.privateName(series$, "Series.patternColorFn");
  var fillPatternFn$ = dart.privateName(series$, "Series.fillPatternFn");
  var radiusPxFn$ = dart.privateName(series$, "Series.radiusPxFn");
  var strokeWidthPxFn$ = dart.privateName(series$, "Series.strokeWidthPxFn");
  var labelAccessorFn$ = dart.privateName(series$, "Series.labelAccessorFn");
  var insideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.insideLabelStyleAccessorFn");
  var outsideLabelStyleAccessorFn$0 = dart.privateName(series$, "Series.outsideLabelStyleAccessorFn");
  var attributes = dart.privateName(series$, "Series.attributes");
  const _is_Series_default = Symbol('_is_Series_default');
  series$.Series$ = dart.generic((T, D) => {
    class Series extends core.Object {
      get id() {
        return this[id$];
      }
      set id(value) {
        super.id = value;
      }
      get displayName() {
        return this[displayName$];
      }
      set displayName(value) {
        super.displayName = value;
      }
      get overlaySeries() {
        return this[overlaySeries$];
      }
      set overlaySeries(value) {
        super.overlaySeries = value;
      }
      get seriesCategory() {
        return this[seriesCategory$];
      }
      set seriesCategory(value) {
        super.seriesCategory = value;
      }
      get seriesColor() {
        return this[seriesColor$];
      }
      set seriesColor(value) {
        super.seriesColor = value;
      }
      get data() {
        return this[data$];
      }
      set data(value) {
        super.data = value;
      }
      get keyFn() {
        return this[keyFn$0];
      }
      set keyFn(value) {
        super.keyFn = value;
      }
      get domainFn() {
        return this[domainFn$];
      }
      set domainFn(value) {
        super.domainFn = value;
      }
      get domainFormatterFn() {
        return this[domainFormatterFn$];
      }
      set domainFormatterFn(value) {
        super.domainFormatterFn = value;
      }
      get domainLowerBoundFn() {
        return this[domainLowerBoundFn$];
      }
      set domainLowerBoundFn(value) {
        super.domainLowerBoundFn = value;
      }
      get domainUpperBoundFn() {
        return this[domainUpperBoundFn$];
      }
      set domainUpperBoundFn(value) {
        super.domainUpperBoundFn = value;
      }
      get measureFn() {
        return this[measureFn$];
      }
      set measureFn(value) {
        super.measureFn = value;
      }
      get measureFormatterFn() {
        return this[measureFormatterFn$];
      }
      set measureFormatterFn(value) {
        super.measureFormatterFn = value;
      }
      get measureLowerBoundFn() {
        return this[measureLowerBoundFn$];
      }
      set measureLowerBoundFn(value) {
        super.measureLowerBoundFn = value;
      }
      get measureUpperBoundFn() {
        return this[measureUpperBoundFn$];
      }
      set measureUpperBoundFn(value) {
        super.measureUpperBoundFn = value;
      }
      get measureOffsetFn() {
        return this[measureOffsetFn$];
      }
      set measureOffsetFn(value) {
        super.measureOffsetFn = value;
      }
      get areaColorFn() {
        return this[areaColorFn$];
      }
      set areaColorFn(value) {
        super.areaColorFn = value;
      }
      get colorFn() {
        return this[colorFn$];
      }
      set colorFn(value) {
        super.colorFn = value;
      }
      get dashPatternFn() {
        return this[dashPatternFn$];
      }
      set dashPatternFn(value) {
        super.dashPatternFn = value;
      }
      get fillColorFn() {
        return this[fillColorFn$];
      }
      set fillColorFn(value) {
        super.fillColorFn = value;
      }
      get patternColorFn() {
        return this[patternColorFn$];
      }
      set patternColorFn(value) {
        super.patternColorFn = value;
      }
      get fillPatternFn() {
        return this[fillPatternFn$];
      }
      set fillPatternFn(value) {
        super.fillPatternFn = value;
      }
      get radiusPxFn() {
        return this[radiusPxFn$];
      }
      set radiusPxFn(value) {
        super.radiusPxFn = value;
      }
      get strokeWidthPxFn() {
        return this[strokeWidthPxFn$];
      }
      set strokeWidthPxFn(value) {
        super.strokeWidthPxFn = value;
      }
      get labelAccessorFn() {
        return this[labelAccessorFn$];
      }
      set labelAccessorFn(value) {
        super.labelAccessorFn = value;
      }
      get insideLabelStyleAccessorFn() {
        return this[insideLabelStyleAccessorFn$0];
      }
      set insideLabelStyleAccessorFn(value) {
        super.insideLabelStyleAccessorFn = value;
      }
      get outsideLabelStyleAccessorFn() {
        return this[outsideLabelStyleAccessorFn$0];
      }
      set outsideLabelStyleAccessorFn(value) {
        super.outsideLabelStyleAccessorFn = value;
      }
      get attributes() {
        return this[attributes];
      }
      set attributes(value) {
        super.attributes = value;
      }
      static new(opts) {
        let id = opts && 'id' in opts ? opts.id : null;
        let data = opts && 'data' in opts ? opts.data : null;
        let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
        let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
        let displayName = opts && 'displayName' in opts ? opts.displayName : null;
        let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
        let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
        let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
        let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
        let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
        let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
        let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
        let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
        let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
        let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
        let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
        let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
        let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
        let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
        let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
        let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
        let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
        let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
        let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
        let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
        let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
        let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
        let _domainFn = dart.fn(index => domainFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _measureFn = dart.fn(index => measureFn(data[$_get](index), index), T$.intLTonumL());
        let _areaColorFn = areaColorFn == null ? null : dart.fn(index => areaColorFn(data[$_get](index), index), T$.intLToColorL());
        let _colorFn = colorFn == null ? null : dart.fn(index => colorFn(data[$_get](index), index), T$.intLToColorL());
        let _dashPatternFn = dashPatternFn == null ? null : dart.fn(index => dashPatternFn(data[$_get](index), index), T$.intLToListLOfintL());
        let _domainFormatterFn = domainFormatterFn == null ? null : dart.fn(index => domainFormatterFn(data[$_get](index), index), dart.fnType(dart.legacy(dart.fnType(T$.StringL(), [dart.legacy(D)])), [T$.intL()]));
        let _domainLowerBoundFn = domainLowerBoundFn == null ? null : dart.fn(index => domainLowerBoundFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _domainUpperBoundFn = domainUpperBoundFn == null ? null : dart.fn(index => domainUpperBoundFn(data[$_get](index), index), dart.fnType(dart.legacy(D), [T$.intL()]));
        let _fillColorFn = fillColorFn == null ? null : dart.fn(index => fillColorFn(data[$_get](index), index), T$.intLToColorL());
        let _patternColorFn = patternColorFn == null ? null : dart.fn(index => patternColorFn(data[$_get](index), index), T$.intLToColorL());
        let _fillPatternFn = fillPatternFn == null ? null : dart.fn(index => fillPatternFn(data[$_get](index), index), T$.intLToFillPatternTypeL());
        let _labelAccessorFn = labelAccessorFn == null ? null : dart.fn(index => labelAccessorFn(data[$_get](index), index), T$.intLToStringL());
        let _insideLabelStyleAccessorFn = insideLabelStyleAccessorFn == null ? null : dart.fn(index => insideLabelStyleAccessorFn(data[$_get](index), index), T$.intLToTextStyleSpecL());
        let _outsideLabelStyleAccessorFn = outsideLabelStyleAccessorFn == null ? null : dart.fn(index => outsideLabelStyleAccessorFn(data[$_get](index), index), T$.intLToTextStyleSpecL());
        let _measureFormatterFn = measureFormatterFn == null ? null : dart.fn(index => measureFormatterFn(data[$_get](index), index), T$.intLToFn());
        let _measureLowerBoundFn = measureLowerBoundFn == null ? null : dart.fn(index => measureLowerBoundFn(data[$_get](index), index), T$.intLTonumL());
        let _measureUpperBoundFn = measureUpperBoundFn == null ? null : dart.fn(index => measureUpperBoundFn(data[$_get](index), index), T$.intLTonumL());
        let _measureOffsetFn = measureOffsetFn == null ? null : dart.fn(index => measureOffsetFn(data[$_get](index), index), T$.intLTonumL());
        let _radiusPxFn = radiusPxFn == null ? null : dart.fn(index => radiusPxFn(data[$_get](index), index), T$.intLTonumL());
        let _strokeWidthPxFn = strokeWidthPxFn == null ? null : dart.fn(index => strokeWidthPxFn(data[$_get](index), index), T$.intLTonumL());
        return new (series$.Series$(dart.legacy(T), dart.legacy(D)))._internal({id: id, data: data, domainFn: _domainFn, measureFn: _measureFn, displayName: displayName, areaColorFn: _areaColorFn, colorFn: _colorFn, dashPatternFn: _dashPatternFn, domainFormatterFn: _domainFormatterFn, domainLowerBoundFn: _domainLowerBoundFn, domainUpperBoundFn: _domainUpperBoundFn, fillColorFn: _fillColorFn, fillPatternFn: _fillPatternFn, patternColorFn: _patternColorFn, labelAccessorFn: _labelAccessorFn, insideLabelStyleAccessorFn: _insideLabelStyleAccessorFn, outsideLabelStyleAccessorFn: _outsideLabelStyleAccessorFn, measureFormatterFn: _measureFormatterFn, measureLowerBoundFn: _measureLowerBoundFn, measureUpperBoundFn: _measureUpperBoundFn, measureOffsetFn: _measureOffsetFn, overlaySeries: overlaySeries, radiusPxFn: _radiusPxFn, seriesCategory: seriesCategory, seriesColor: seriesColor, strokeWidthPxFn: _strokeWidthPxFn});
      }
      setAttribute(R, key, value) {
        this.attributes.setAttr(dart.legacy(R), key, value);
      }
      getAttribute(R, key) {
        return this.attributes.getAttr(dart.legacy(R), key);
      }
    }
    (Series._internal = function(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let data = opts && 'data' in opts ? opts.data : null;
      let domainFn = opts && 'domainFn' in opts ? opts.domainFn : null;
      let measureFn = opts && 'measureFn' in opts ? opts.measureFn : null;
      let displayName = opts && 'displayName' in opts ? opts.displayName : null;
      let areaColorFn = opts && 'areaColorFn' in opts ? opts.areaColorFn : null;
      let colorFn = opts && 'colorFn' in opts ? opts.colorFn : null;
      let dashPatternFn = opts && 'dashPatternFn' in opts ? opts.dashPatternFn : null;
      let domainFormatterFn = opts && 'domainFormatterFn' in opts ? opts.domainFormatterFn : null;
      let domainLowerBoundFn = opts && 'domainLowerBoundFn' in opts ? opts.domainLowerBoundFn : null;
      let domainUpperBoundFn = opts && 'domainUpperBoundFn' in opts ? opts.domainUpperBoundFn : null;
      let fillColorFn = opts && 'fillColorFn' in opts ? opts.fillColorFn : null;
      let fillPatternFn = opts && 'fillPatternFn' in opts ? opts.fillPatternFn : null;
      let patternColorFn = opts && 'patternColorFn' in opts ? opts.patternColorFn : null;
      let keyFn = opts && 'keyFn' in opts ? opts.keyFn : null;
      let labelAccessorFn = opts && 'labelAccessorFn' in opts ? opts.labelAccessorFn : null;
      let insideLabelStyleAccessorFn = opts && 'insideLabelStyleAccessorFn' in opts ? opts.insideLabelStyleAccessorFn : null;
      let outsideLabelStyleAccessorFn = opts && 'outsideLabelStyleAccessorFn' in opts ? opts.outsideLabelStyleAccessorFn : null;
      let measureFormatterFn = opts && 'measureFormatterFn' in opts ? opts.measureFormatterFn : null;
      let measureLowerBoundFn = opts && 'measureLowerBoundFn' in opts ? opts.measureLowerBoundFn : null;
      let measureUpperBoundFn = opts && 'measureUpperBoundFn' in opts ? opts.measureUpperBoundFn : null;
      let measureOffsetFn = opts && 'measureOffsetFn' in opts ? opts.measureOffsetFn : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : false;
      let radiusPxFn = opts && 'radiusPxFn' in opts ? opts.radiusPxFn : null;
      let seriesCategory = opts && 'seriesCategory' in opts ? opts.seriesCategory : null;
      let seriesColor = opts && 'seriesColor' in opts ? opts.seriesColor : null;
      let strokeWidthPxFn = opts && 'strokeWidthPxFn' in opts ? opts.strokeWidthPxFn : null;
      this[attributes] = new series$.SeriesAttributes.new();
      this[id$] = id;
      this[data$] = data;
      this[domainFn$] = domainFn;
      this[measureFn$] = measureFn;
      this[displayName$] = displayName;
      this[areaColorFn$] = areaColorFn;
      this[colorFn$] = colorFn;
      this[dashPatternFn$] = dashPatternFn;
      this[domainFormatterFn$] = domainFormatterFn;
      this[domainLowerBoundFn$] = domainLowerBoundFn;
      this[domainUpperBoundFn$] = domainUpperBoundFn;
      this[fillColorFn$] = fillColorFn;
      this[fillPatternFn$] = fillPatternFn;
      this[patternColorFn$] = patternColorFn;
      this[keyFn$0] = keyFn;
      this[labelAccessorFn$] = labelAccessorFn;
      this[insideLabelStyleAccessorFn$0] = insideLabelStyleAccessorFn;
      this[outsideLabelStyleAccessorFn$0] = outsideLabelStyleAccessorFn;
      this[measureFormatterFn$] = measureFormatterFn;
      this[measureLowerBoundFn$] = measureLowerBoundFn;
      this[measureUpperBoundFn$] = measureUpperBoundFn;
      this[measureOffsetFn$] = measureOffsetFn;
      this[overlaySeries$] = overlaySeries;
      this[radiusPxFn$] = radiusPxFn;
      this[seriesCategory$] = seriesCategory;
      this[seriesColor$] = seriesColor;
      this[strokeWidthPxFn$] = strokeWidthPxFn;
      ;
    }).prototype = Series.prototype;
    dart.addTypeTests(Series);
    Series.prototype[_is_Series_default] = true;
    dart.addTypeCaches(Series);
    dart.setMethodSignature(Series, () => ({
      __proto__: dart.getMethods(Series.__proto__),
      setAttribute: dart.gFnType(R => [dart.void, [dart.legacy(series$.AttributeKey$(dart.legacy(R))), dart.legacy(R)]]),
      getAttribute: dart.gFnType(R => [dart.legacy(R), [dart.legacy(series$.AttributeKey$(dart.legacy(R)))]])
    }));
    dart.setLibraryUri(Series, I[30]);
    dart.setFieldSignature(Series, () => ({
      __proto__: dart.getFields(Series.__proto__),
      id: dart.finalFieldType(dart.legacy(core.String)),
      displayName: dart.finalFieldType(dart.legacy(core.String)),
      overlaySeries: dart.finalFieldType(dart.legacy(core.bool)),
      seriesCategory: dart.finalFieldType(dart.legacy(core.String)),
      seriesColor: dart.finalFieldType(dart.legacy(color.Color)),
      data: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(T)))),
      keyFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      domainFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainFormatterFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(D)])), [dart.legacy(core.int)]))),
      domainLowerBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      domainUpperBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(D), [dart.legacy(core.int)]))),
      measureFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureFormatterFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)])), [dart.legacy(core.int)]))),
      measureLowerBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureUpperBoundFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      measureOffsetFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      areaColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      colorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      dashPatternFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.int)]))),
      fillColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      patternColorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(color.Color), [dart.legacy(core.int)]))),
      fillPatternFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(chart_canvas.FillPatternType), [dart.legacy(core.int)]))),
      radiusPxFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      strokeWidthPxFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.num), [dart.legacy(core.int)]))),
      labelAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.int)]))),
      insideLabelStyleAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      outsideLabelStyleAccessorFn: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(axis_spec.TextStyleSpec), [dart.legacy(core.int)]))),
      attributes: dart.finalFieldType(dart.legacy(series$.SeriesAttributes))
    }));
    return Series;
  });
  series$.Series = series$.Series$();
  dart.addTypeTests(series$.Series, _is_Series_default);
  const _is_AttributeKey_default = Symbol('_is_AttributeKey_default');
  series$.AttributeKey$ = dart.generic(R => {
    class AttributeKey extends typed_registry.TypedKey$(dart.legacy(R)) {}
    (AttributeKey.new = function(uniqueKey) {
      AttributeKey.__proto__.new.call(this, uniqueKey);
      ;
    }).prototype = AttributeKey.prototype;
    dart.addTypeTests(AttributeKey);
    AttributeKey.prototype[_is_AttributeKey_default] = true;
    dart.addTypeCaches(AttributeKey);
    dart.setLibraryUri(AttributeKey, I[30]);
    return AttributeKey;
  });
  series$.AttributeKey = series$.AttributeKey$();
  dart.addTypeTests(series$.AttributeKey, _is_AttributeKey_default);
  series$.SeriesAttributes = class SeriesAttributes extends typed_registry.TypedRegistry {};
  (series$.SeriesAttributes.new = function() {
    series$.SeriesAttributes.__proto__.new.call(this);
    ;
  }).prototype = series$.SeriesAttributes.prototype;
  dart.addTypeTests(series$.SeriesAttributes);
  dart.addTypeCaches(series$.SeriesAttributes);
  dart.setLibraryUri(series$.SeriesAttributes, I[30]);
  axis.AxisOrientation = class AxisOrientation extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (axis.AxisOrientation.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = axis.AxisOrientation.prototype;
  dart.addTypeTests(axis.AxisOrientation);
  dart.addTypeCaches(axis.AxisOrientation);
  dart.setMethodSignature(axis.AxisOrientation, () => ({
    __proto__: dart.getMethods(axis.AxisOrientation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(axis.AxisOrientation, I[31]);
  dart.setFieldSignature(axis.AxisOrientation, () => ({
    __proto__: dart.getFields(axis.AxisOrientation.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$0]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(axis.AxisOrientation, ['toString']);
  axis.AxisOrientation.top = C[18] || CT.C18;
  axis.AxisOrientation.right = C[20] || CT.C20;
  axis.AxisOrientation.bottom = C[19] || CT.C19;
  axis.AxisOrientation.left = C[21] || CT.C21;
  axis.AxisOrientation.values = C[37] || CT.C37;
  const _is_ImmutableAxis_default = Symbol('_is_ImmutableAxis_default');
  axis.ImmutableAxis$ = dart.generic(D => {
    class ImmutableAxis extends core.Object {}
    (ImmutableAxis.new = function() {
      ;
    }).prototype = ImmutableAxis.prototype;
    dart.addTypeTests(ImmutableAxis);
    ImmutableAxis.prototype[_is_ImmutableAxis_default] = true;
    dart.addTypeCaches(ImmutableAxis);
    dart.setLibraryUri(ImmutableAxis, I[31]);
    return ImmutableAxis;
  });
  axis.ImmutableAxis = axis.ImmutableAxis$();
  dart.addTypeTests(axis.ImmutableAxis, _is_ImmutableAxis_default);
  var tickDrawStrategy = dart.privateName(axis, "Axis.tickDrawStrategy");
  var axisOrientation = dart.privateName(axis, "Axis.axisOrientation");
  var context = dart.privateName(axis, "Axis.context");
  var reverseOutputRange = dart.privateName(axis, "Axis.reverseOutputRange");
  var forceDrawAxisLine = dart.privateName(axis, "Axis.forceDrawAxisLine");
  var lockAxis = dart.privateName(axis, "Axis.lockAxis");
  var layoutPaintOrder = dart.privateName(axis, "Axis.layoutPaintOrder");
  var _previousScale = dart.privateName(axis, "_previousScale");
  var _formatterValueCache = dart.privateName(axis, "_formatterValueCache");
  var _autoViewport = dart.privateName(axis, "_autoViewport");
  var _providedTicks = dart.privateName(axis, "_providedTicks");
  var _axisTicks = dart.privateName(axis, "_axisTicks");
  var _componentBounds = dart.privateName(axis, "_componentBounds");
  var _drawAreaBounds = dart.privateName(axis, "_drawAreaBounds");
  var _graphicsFactory = dart.privateName(axis, "_graphicsFactory");
  var _scale = dart.privateName(axis, "_scale");
  var _tickProvider = dart.privateName(axis, "_tickProvider");
  var _tickFormatter = dart.privateName(axis, "_tickFormatter");
  var _updateProvidedTicks = dart.privateName(axis, "_updateProvidedTicks");
  var _updateAxisTicks = dart.privateName(axis, "_updateAxisTicks");
  var _clampTranslatePx = dart.privateName(axis, "_clampTranslatePx");
  var _layoutPosition = dart.privateName(axis, "_layoutPosition");
  var _measureVerticalAxis = dart.privateName(axis, "_measureVerticalAxis");
  var _measureHorizontalAxis = dart.privateName(axis, "_measureHorizontalAxis");
  const _is_Axis_default = Symbol('_is_Axis_default');
  axis.Axis$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var LinkedMapOfDL$StringL = () => (LinkedMapOfDL$StringL = dart.constFn(_js_helper.LinkedMap$(DL(), T$.StringL())))();
    var AxisTicksOfDL = () => (AxisTicksOfDL = dart.constFn(axis_tick.AxisTicks$(DL())))();
    var AxisTicksLOfDL = () => (AxisTicksLOfDL = dart.constFn(dart.legacy(AxisTicksOfDL())))();
    var JSArrayOfAxisTicksLOfDL = () => (JSArrayOfAxisTicksLOfDL = dart.constFn(_interceptors.JSArray$(AxisTicksLOfDL())))();
    var TickDrawStrategyOfDL = () => (TickDrawStrategyOfDL = dart.constFn(tick_draw_strategy.TickDrawStrategy$(DL())))();
    var TickDrawStrategyLOfDL = () => (TickDrawStrategyLOfDL = dart.constFn(dart.legacy(TickDrawStrategyOfDL())))();
    var MutableScaleOfDL = () => (MutableScaleOfDL = dart.constFn(scale.MutableScale$(DL())))();
    var MutableScaleLOfDL = () => (MutableScaleLOfDL = dart.constFn(dart.legacy(MutableScaleOfDL())))();
    var TickProviderOfDL = () => (TickProviderOfDL = dart.constFn(tick_provider.TickProvider$(DL())))();
    var TickProviderLOfDL = () => (TickProviderLOfDL = dart.constFn(dart.legacy(TickProviderOfDL())))();
    var TickFormatterOfDL = () => (TickFormatterOfDL = dart.constFn(tick_formatter.TickFormatter$(DL())))();
    var TickFormatterLOfDL = () => (TickFormatterLOfDL = dart.constFn(dart.legacy(TickFormatterOfDL())))();
    var TickOfDL = () => (TickOfDL = dart.constFn(tick.Tick$(DL())))();
    var TickLOfDL = () => (TickLOfDL = dart.constFn(dart.legacy(TickOfDL())))();
    var ListOfTickLOfDL = () => (ListOfTickLOfDL = dart.constFn(core.List$(TickLOfDL())))();
    var ListLOfTickLOfDL = () => (ListLOfTickLOfDL = dart.constFn(dart.legacy(ListOfTickLOfDL())))();
    var AxisTicksLOfDLToboolL = () => (AxisTicksLOfDLToboolL = dart.constFn(dart.fnType(T$.boolL(), [AxisTicksLOfDL()])))();
    class Axis extends axis.ImmutableAxis$(dart.legacy(D)) {
      get tickDrawStrategy() {
        return this[tickDrawStrategy];
      }
      set tickDrawStrategy(value) {
        this[tickDrawStrategy] = TickDrawStrategyLOfDL().as(value);
      }
      get axisOrientation() {
        return this[axisOrientation];
      }
      set axisOrientation(value) {
        this[axisOrientation] = value;
      }
      get context() {
        return this[context];
      }
      set context(value) {
        this[context] = value;
      }
      get reverseOutputRange() {
        return this[reverseOutputRange];
      }
      set reverseOutputRange(value) {
        this[reverseOutputRange] = value;
      }
      get forceDrawAxisLine() {
        return this[forceDrawAxisLine];
      }
      set forceDrawAxisLine(value) {
        this[forceDrawAxisLine] = value;
      }
      get lockAxis() {
        return this[lockAxis];
      }
      set lockAxis(value) {
        this[lockAxis] = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder];
      }
      set layoutPaintOrder(value) {
        this[layoutPaintOrder] = value;
      }
      get scale() {
        return this[_scale];
      }
      set scale(scale) {
        MutableScaleLOfDL().as(scale);
        this[_scale] = scale;
      }
      get tickProvider() {
        return this[_tickProvider];
      }
      set tickProvider(tickProvider) {
        TickProviderLOfDL().as(tickProvider);
        this[_tickProvider] = tickProvider;
      }
      set tickFormatter(formatter) {
        TickFormatterLOfDL().as(formatter);
        if (!dart.equals(this[_tickFormatter], formatter)) {
          this[_tickFormatter] = formatter;
          this[_formatterValueCache][$clear]();
        }
      }
      get tickFormatter() {
        return this[_tickFormatter];
      }
      get mutableScale() {
        return this[_scale];
      }
      get rangeBand() {
        return this[_scale].rangeBand;
      }
      get stepSize() {
        return this[_scale].stepSize;
      }
      get range() {
        return this[_scale].range;
      }
      set autoViewport(autoViewport) {
        this[_autoViewport] = autoViewport;
      }
      get autoViewport() {
        return this[_autoViewport];
      }
      setRangeBandConfig(rangeBandConfig) {
        this.mutableScale.rangeBandConfig = rangeBandConfig;
      }
      get hasValidBarChartRangeBandConfig() {
        let t1, t1$, t1$0;
        return (t1$0 = (t1$ = (t1 = this.mutableScale, t1 == null ? null : t1.rangeBandConfig), t1$ == null ? null : t1$.type), t1$0 == null ? scale.RangeBandType.none : t1$0) != scale.RangeBandType.none;
      }
      addDomainValue(domain) {
        DL().as(domain);
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_scale].addDomain(domain);
      }
      resetDomains() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_formatterValueCache][$clear]();
        this[_scale].resetDomain();
        this.reverseOutputRange = false;
        if (dart.test(this[_autoViewport])) {
          this[_scale].resetViewportSettings();
        }
      }
      getLocation(domain) {
        DL().as(domain);
        return domain != null ? this[_scale]._get(domain) : null;
      }
      getDomain(location) {
        return this[_scale].reverse(location);
      }
      compareDomainValueToViewport(domain) {
        DL().as(domain);
        return this[_scale].compareDomainValueToViewport(domain);
      }
      setOutputRange(start, end) {
        this[_scale].range = new scale.ScaleOutputExtent.new(start, end);
      }
      updateTicks() {
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      [_updateProvidedTicks]() {
        if (dart.test(this.lockAxis)) {
          return;
        }
        this[_providedTicks] = this.tickProvider.getTicks({context: this.context, graphicsFactory: this.graphicsFactory, scale: this[_scale], formatter: this.tickFormatter, formatterValueCache: this[_formatterValueCache], tickDrawStrategy: this.tickDrawStrategy, orientation: this.axisOrientation, viewportExtensionEnabled: this[_autoViewport]});
      }
      [_updateAxisTicks]() {
        let t1, t1$, t1$0;
        if (dart.test(this.lockAxis)) {
          return;
        }
        let providedTicks = core.List.from((t1 = this[_providedTicks], t1 == null ? [] : t1));
        for (let animatedTick of this[_axisTicks]) {
          let tick = (t1$ = providedTicks, t1$ == null ? null : t1$[$firstWhere](dart.fn(t => dart.equals(dart.dload(t, 'value'), animatedTick.value), T$.dynamicToboolL()), {orElse: dart.fn(() => null, T$.VoidToNull())}));
          if (tick != null) {
            if (!dart.test(text_element.TextElement.elementSettingsSame(animatedTick.textElement, T$.TextElementL().as(dart.dload(tick, 'textElement'))))) {
              animatedTick.textElement = T$.TextElementL().as(dart.dload(tick, 'textElement'));
            }
            animatedTick.setNewTarget(this[_scale]._get(DL().as(dart.dload(tick, 'value'))));
            providedTicks[$remove](tick);
          } else {
            animatedTick.animateOut(this[_scale]._get(animatedTick.value)[$toDouble]());
          }
        }
        t1$0 = providedTicks;
        t1$0 == null ? null : t1$0[$forEach](dart.fn(tick => {
          let animatedTick = new (AxisTicksOfDL()).new(TickLOfDL().as(tick));
          if (this[_previousScale] != null) {
            animatedTick.animateInFrom(this[_previousScale]._get(DL().as(dart.dload(tick, 'value')))[$toDouble]());
          }
          this[_axisTicks][$add](animatedTick);
        }, T$.dynamicToNull()));
        this[_axisTicks][$sort]();
        this[_previousScale] = this[_scale].copy();
      }
      setViewportSettings(viewportScale, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        viewportTranslatePx = this[_clampTranslatePx](viewportScale, viewportTranslatePx, {drawAreaWidth: drawAreaWidth});
        this[_scale].setViewportSettings(viewportScale, viewportTranslatePx);
      }
      get viewportScalingFactor() {
        return this[_scale].viewportScalingFactor;
      }
      get viewportTranslatePx() {
        let t1;
        t1 = this[_scale];
        return t1 == null ? null : t1.viewportTranslatePx;
      }
      [_clampTranslatePx](viewportScalingFactor, viewportTranslatePx, opts) {
        let drawAreaWidth = opts && 'drawAreaWidth' in opts ? opts.drawAreaWidth : null;
        if (drawAreaWidth == null) {
          return viewportTranslatePx;
        }
        let maxNegativeTranslate = -1.0 * (dart.notNull(drawAreaWidth) * dart.notNull(viewportScalingFactor) - dart.notNull(drawAreaWidth));
        viewportTranslatePx = math.min(T$.doubleL(), math.max(T$.doubleL(), viewportTranslatePx, maxNegativeTranslate), 0.0);
        return viewportTranslatePx;
      }
      get graphicsFactory() {
        return this[_graphicsFactory];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory] = value;
      }
      get layoutConfig() {
        return new layout_view.LayoutViewConfig.new({paintOrder: this.layoutPaintOrder, position: this[_layoutPosition], positionOrder: 20});
      }
      get [_layoutPosition]() {
        let position = null;
        switch (this.axisOrientation) {
          case C[18] || CT.C18:
          {
            position = layout_view.LayoutPosition.Top;
            break;
          }
          case C[20] || CT.C20:
          {
            position = layout_view.LayoutPosition.Right;
            break;
          }
          case C[19] || CT.C19:
          {
            position = layout_view.LayoutPosition.Bottom;
            break;
          }
          case C[21] || CT.C21:
          {
            position = layout_view.LayoutPosition.Left;
            break;
          }
        }
        return position;
      }
      get isVertical() {
        return this.axisOrientation == axis.AxisOrientation.left || this.axisOrientation == axis.AxisOrientation.right;
      }
      measure(maxWidth, maxHeight) {
        return dart.test(this.isVertical) ? this[_measureVerticalAxis](maxWidth, maxHeight) : this[_measureHorizontalAxis](maxWidth, maxHeight);
      }
      [_measureVerticalAxis](maxWidth, maxHeight) {
        this.setOutputRange(maxHeight, 0);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureVerticallyDrawnTicks(ListLOfTickLOfDL().as(this[_providedTicks]), maxWidth, maxHeight);
      }
      [_measureHorizontalAxis](maxWidth, maxHeight) {
        this.setOutputRange(0, maxWidth);
        this[_updateProvidedTicks]();
        return this.tickDrawStrategy.measureHorizontallyDrawnTicks(ListLOfTickLOfDL().as(this[_providedTicks]), maxWidth, maxHeight);
      }
      layout(componentBounds, drawAreaBounds) {
        this[_componentBounds] = componentBounds;
        this[_drawAreaBounds] = drawAreaBounds;
        let outputStart = dart.test(this.isVertical) ? this[_componentBounds][$bottom] : this[_componentBounds][$left];
        let outputEnd = dart.test(this.isVertical) ? this[_componentBounds][$top] : this[_componentBounds][$right];
        let outputRange = dart.test(this.reverseOutputRange) ? new scale.ScaleOutputExtent.new(outputEnd, outputStart) : new scale.ScaleOutputExtent.new(outputStart, outputEnd);
        if (!dart.equals(this[_scale].range, outputRange)) {
          this[_scale].range = outputRange;
        }
        this[_updateProvidedTicks]();
        this[_updateAxisTicks]();
      }
      get isSeriesRenderer() {
        return false;
      }
      get componentBounds() {
        return this[_componentBounds];
      }
      get drawAxisLine() {
        if (this.forceDrawAxisLine != null) {
          return this.forceDrawAxisLine;
        }
        return T$.SmallTickDrawStrategyL().is(this.tickDrawStrategy);
      }
      paint(canvas, animationPercent) {
        let t1;
        if (animationPercent === 1.0) {
          this[_axisTicks][$removeWhere](dart.fn(t => t.markedForRemoval, AxisTicksLOfDLToboolL()));
        }
        for (let i = 0; i < dart.notNull(this[_axisTicks][$length]); i = i + 1) {
          let animatedTick = this[_axisTicks][$_get](i);
          this.tickDrawStrategy.draw(canvas, (t1 = animatedTick, (() => {
            t1.setCurrentTick(animationPercent);
            return t1;
          })()), {orientation: this.axisOrientation, axisBounds: this[_componentBounds], drawAreaBounds: this[_drawAreaBounds], isFirst: i === 0, isLast: i === dart.notNull(this[_axisTicks][$length]) - 1});
        }
        if (dart.test(this.drawAxisLine)) {
          this.tickDrawStrategy.drawAxisLine(canvas, this.axisOrientation, this[_componentBounds]);
        }
      }
    }
    (Axis.new = function(opts) {
      let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
      let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      this[_previousScale] = null;
      this[_formatterValueCache] = new (LinkedMapOfDL$StringL()).new();
      this[tickDrawStrategy] = null;
      this[axisOrientation] = null;
      this[context] = null;
      this[reverseOutputRange] = false;
      this[_autoViewport] = true;
      this[forceDrawAxisLine] = null;
      this[lockAxis] = false;
      this[_providedTicks] = null;
      this[_axisTicks] = JSArrayOfAxisTicksLOfDL().of([]);
      this[_componentBounds] = null;
      this[_drawAreaBounds] = null;
      this[_graphicsFactory] = null;
      this[layoutPaintOrder] = 0;
      this[_scale] = scale;
      this[_tickProvider] = tickProvider;
      this[_tickFormatter] = tickFormatter;
      ;
    }).prototype = Axis.prototype;
    dart.addTypeTests(Axis);
    Axis.prototype[_is_Axis_default] = true;
    dart.addTypeCaches(Axis);
    Axis[dart.implements] = () => [layout_view.LayoutView];
    dart.setMethodSignature(Axis, () => ({
      __proto__: dart.getMethods(Axis.__proto__),
      setRangeBandConfig: dart.fnType(dart.void, [dart.legacy(scale.RangeBandConfig)]),
      addDomainValue: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      resetDomains: dart.fnType(dart.void, []),
      getLocation: dart.fnType(dart.legacy(core.double), [dart.legacy(core.Object)]),
      getDomain: dart.fnType(dart.legacy(D), [dart.legacy(core.double)]),
      compareDomainValueToViewport: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      setOutputRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      updateTicks: dart.fnType(dart.void, []),
      [_updateProvidedTicks]: dart.fnType(dart.void, []),
      [_updateAxisTicks]: dart.fnType(dart.void, []),
      setViewportSettings: dart.fnType(dart.void, [dart.legacy(core.double), dart.legacy(core.double)], {drawAreaWidth: dart.legacy(core.int)}, {}),
      [_clampTranslatePx]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double)], {drawAreaWidth: dart.legacy(core.int)}, {}),
      measure: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      [_measureVerticalAxis]: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      [_measureHorizontalAxis]: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      layout: dart.fnType(dart.void, [dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.double)])
    }));
    dart.setGetterSignature(Axis, () => ({
      __proto__: dart.getGetters(Axis.__proto__),
      scale: dart.legacy(scale.MutableScale$(dart.legacy(D))),
      tickProvider: dart.legacy(tick_provider.TickProvider$(dart.legacy(D))),
      tickFormatter: dart.legacy(tick_formatter.TickFormatter$(dart.legacy(D))),
      mutableScale: dart.legacy(scale.MutableScale$(dart.legacy(D))),
      rangeBand: dart.legacy(core.double),
      stepSize: dart.legacy(core.double),
      range: dart.legacy(scale.ScaleOutputExtent),
      autoViewport: dart.legacy(core.bool),
      hasValidBarChartRangeBandConfig: dart.legacy(core.bool),
      viewportScalingFactor: dart.legacy(core.double),
      viewportTranslatePx: dart.legacy(core.double),
      graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory),
      layoutConfig: dart.legacy(layout_view.LayoutViewConfig),
      [_layoutPosition]: dart.legacy(layout_view.LayoutPosition),
      isVertical: dart.legacy(core.bool),
      isSeriesRenderer: dart.legacy(core.bool),
      componentBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      drawAxisLine: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(Axis, () => ({
      __proto__: dart.getSetters(Axis.__proto__),
      scale: dart.legacy(core.Object),
      tickProvider: dart.legacy(core.Object),
      tickFormatter: dart.legacy(core.Object),
      autoViewport: dart.legacy(core.bool),
      graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory)
    }));
    dart.setLibraryUri(Axis, I[31]);
    dart.setFieldSignature(Axis, () => ({
      __proto__: dart.getFields(Axis.__proto__),
      [_scale]: dart.fieldType(dart.legacy(scale.MutableScale$(dart.legacy(D)))),
      [_previousScale]: dart.fieldType(dart.legacy(scale.MutableScale$(dart.legacy(D)))),
      [_tickProvider]: dart.fieldType(dart.legacy(tick_provider.TickProvider$(dart.legacy(D)))),
      [_tickFormatter]: dart.fieldType(dart.legacy(tick_formatter.TickFormatter$(dart.legacy(D)))),
      [_formatterValueCache]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(D), dart.legacy(core.String)))),
      tickDrawStrategy: dart.fieldType(dart.legacy(tick_draw_strategy.TickDrawStrategy$(dart.legacy(D)))),
      axisOrientation: dart.fieldType(dart.legacy(axis.AxisOrientation)),
      context: dart.fieldType(dart.legacy(chart_context.ChartContext)),
      reverseOutputRange: dart.fieldType(dart.legacy(core.bool)),
      [_autoViewport]: dart.fieldType(dart.legacy(core.bool)),
      forceDrawAxisLine: dart.fieldType(dart.legacy(core.bool)),
      lockAxis: dart.fieldType(dart.legacy(core.bool)),
      [_providedTicks]: dart.fieldType(dart.legacy(core.List$(dart.legacy(tick.Tick)))),
      [_axisTicks]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(axis_tick.AxisTicks$(dart.legacy(D)))))),
      [_componentBounds]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      [_drawAreaBounds]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      [_graphicsFactory]: dart.fieldType(dart.legacy(graphics_factory.GraphicsFactory)),
      layoutPaintOrder: dart.fieldType(dart.legacy(core.int))
    }));
    return Axis;
  });
  axis.Axis = axis.Axis$();
  dart.defineLazy(axis.Axis, {
    /*axis.Axis.primaryMeasureAxisId*/get primaryMeasureAxisId() {
      return "primaryMeasureAxisId";
    },
    /*axis.Axis.secondaryMeasureAxisId*/get secondaryMeasureAxisId() {
      return "secondaryMeasureAxisId";
    }
  }, true);
  dart.addTypeTests(axis.Axis, _is_Axis_default);
  axis.NumericAxis = class NumericAxis extends axis.Axis$(dart.legacy(core.num)) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      T$.NumericScaleL().as(this[_scale]).viewportDomain = viewport;
    }
  };
  (axis.NumericAxis.new = function(opts) {
    let t1;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    axis.NumericAxis.__proto__.new.call(this, {tickProvider: (t1 = tickProvider, t1 == null ? new numeric_tick_provider.NumericTickProvider.new() : t1), tickFormatter: tick_formatter.NumericTickFormatter.new(), scale: new linear_scale.LinearScale.new()});
    ;
  }).prototype = axis.NumericAxis.prototype;
  dart.addTypeTests(axis.NumericAxis);
  dart.addTypeCaches(axis.NumericAxis);
  dart.setMethodSignature(axis.NumericAxis, () => ({
    __proto__: dart.getMethods(axis.NumericAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [dart.legacy(numeric_extents.NumericExtents)])
  }));
  dart.setLibraryUri(axis.NumericAxis, I[31]);
  axis.OrdinalAxis = class OrdinalAxis extends axis.Axis$(dart.legacy(core.String)) {
    setScaleViewport(viewport) {
      this.autoViewport = false;
      T$.OrdinalScaleL().as(this[_scale]).setViewport(viewport.dataSize, viewport.startingDomain);
    }
    layout(componentBounds, drawAreaBounds) {
      super.layout(componentBounds, drawAreaBounds);
      T$.OrdinalScaleL().as(this[_scale]).setViewport(null, null);
    }
  };
  (axis.OrdinalAxis.new = function(opts) {
    let t1, t1$;
    let tickDrawStrategy = opts && 'tickDrawStrategy' in opts ? opts.tickDrawStrategy : null;
    let tickProvider = opts && 'tickProvider' in opts ? opts.tickProvider : null;
    let tickFormatter = opts && 'tickFormatter' in opts ? opts.tickFormatter : null;
    axis.OrdinalAxis.__proto__.new.call(this, {tickProvider: T$.TickProviderLOfStringL().as((t1 = tickProvider, t1 == null ? C[38] || CT.C38 : t1)), tickFormatter: T$.TickFormatterLOfStringL().as((t1$ = tickFormatter, t1$ == null ? C[39] || CT.C39 : t1$)), scale: new simple_ordinal_scale.SimpleOrdinalScale.new()});
    ;
  }).prototype = axis.OrdinalAxis.prototype;
  dart.addTypeTests(axis.OrdinalAxis);
  dart.addTypeCaches(axis.OrdinalAxis);
  dart.setMethodSignature(axis.OrdinalAxis, () => ({
    __proto__: dart.getMethods(axis.OrdinalAxis.__proto__),
    setScaleViewport: dart.fnType(dart.void, [dart.legacy(axis.OrdinalViewport)])
  }));
  dart.setLibraryUri(axis.OrdinalAxis, I[31]);
  var startingDomain$ = dart.privateName(axis, "OrdinalViewport.startingDomain");
  var dataSize$ = dart.privateName(axis, "OrdinalViewport.dataSize");
  axis.OrdinalViewport = class OrdinalViewport extends core.Object {
    get startingDomain() {
      return this[startingDomain$];
    }
    set startingDomain(value) {
      super.startingDomain = value;
    }
    get dataSize() {
      return this[dataSize$];
    }
    set dataSize(value) {
      super.dataSize = value;
    }
    _equals(other) {
      if (other == null) return false;
      return T$.OrdinalViewportL().is(other) && this.startingDomain == other.startingDomain && this.dataSize == other.dataSize;
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.startingDomain);
      hashcode = hashcode * 37 + dart.notNull(this.dataSize);
      return hashcode;
    }
  };
  (axis.OrdinalViewport.new = function(startingDomain, dataSize) {
    this[startingDomain$] = startingDomain;
    this[dataSize$] = dataSize;
    ;
  }).prototype = axis.OrdinalViewport.prototype;
  dart.addTypeTests(axis.OrdinalViewport);
  dart.addTypeCaches(axis.OrdinalViewport);
  dart.setMethodSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getMethods(axis.OrdinalViewport.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getGetters(axis.OrdinalViewport.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(axis.OrdinalViewport, I[31]);
  dart.setFieldSignature(axis.OrdinalViewport, () => ({
    __proto__: dart.getFields(axis.OrdinalViewport.__proto__),
    startingDomain: dart.finalFieldType(dart.legacy(core.String)),
    dataSize: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(axis.OrdinalViewport, ['_equals']);
  dart.defineExtensionAccessors(axis.OrdinalViewport, ['hashCode']);
  var _axis$ = dart.privateName(axis, "_axis");
  const _is_AxisTester_default = Symbol('_is_AxisTester_default');
  axis.AxisTester$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var AxisTicksOfDL = () => (AxisTicksOfDL = dart.constFn(axis_tick.AxisTicks$(DL())))();
    var AxisTicksLOfDL = () => (AxisTicksLOfDL = dart.constFn(dart.legacy(AxisTicksOfDL())))();
    var AxisTicksLOfDLToDL = () => (AxisTicksLOfDLToDL = dart.constFn(dart.fnType(DL(), [AxisTicksLOfDL()])))();
    class AxisTester extends core.Object {
      get axisTicks() {
        return this[_axis$][_axisTicks];
      }
      get scale() {
        return this[_axis$][_scale];
      }
      get axisValues() {
        return this.axisTicks[$map](DL(), dart.fn(t => t.value, AxisTicksLOfDLToDL()))[$toList]();
      }
    }
    (AxisTester.new = function(_axis) {
      this[_axis$] = _axis;
      ;
    }).prototype = AxisTester.prototype;
    dart.addTypeTests(AxisTester);
    AxisTester.prototype[_is_AxisTester_default] = true;
    dart.addTypeCaches(AxisTester);
    dart.setGetterSignature(AxisTester, () => ({
      __proto__: dart.getGetters(AxisTester.__proto__),
      axisTicks: dart.legacy(core.List$(dart.legacy(axis_tick.AxisTicks$(dart.legacy(D))))),
      scale: dart.legacy(scale.MutableScale$(dart.legacy(D))),
      axisValues: dart.legacy(core.List$(dart.legacy(D)))
    }));
    dart.setLibraryUri(AxisTester, I[31]);
    dart.setFieldSignature(AxisTester, () => ({
      __proto__: dart.getFields(AxisTester.__proto__),
      [_axis$]: dart.finalFieldType(dart.legacy(axis.Axis$(dart.legacy(D))))
    }));
    return AxisTester;
  });
  axis.AxisTester = axis.AxisTester$();
  dart.addTypeTests(axis.AxisTester, _is_AxisTester_default);
  var TypedKey_uniqueKey = dart.privateName(typed_registry, "TypedKey.uniqueKey");
  dart.defineLazy(axis, {
    /*axis.measureAxisIdKey*/get measureAxisIdKey() {
      return C[40] || CT.C40;
    },
    /*axis.measureAxisKey*/get measureAxisKey() {
      return C[41] || CT.C41;
    },
    /*axis.domainAxisKey*/get domainAxisKey() {
      return C[42] || CT.C42;
    }
  }, true);
  dart.trackLibraries("packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart", {
    "package:charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart": simple_ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_extents.dart": ordinal_extents,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale_domain_info.dart": ordinal_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/ordinal_scale.dart": ordinal_scale,
    "package:charts_common/src/chart/cartesian/axis/ordinal_tick_provider.dart": ordinal_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/numeric_tick_provider.dart": numeric_tick_provider,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_viewport.dart": linear_scale_viewport,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_function.dart": linear_scale_function,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale_domain_info.dart": linear_scale_domain_info,
    "package:charts_common/src/chart/cartesian/axis/numeric_scale.dart": numeric_scale,
    "package:charts_common/src/chart/cartesian/axis/numeric_extents.dart": numeric_extents,
    "package:charts_common/src/chart/cartesian/axis/linear/linear_scale.dart": linear_scale,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/base_tick_draw_strategy.dart": base_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/small_tick_draw_strategy.dart": small_tick_draw_strategy,
    "package:charts_common/src/chart/cartesian/axis/tick_provider.dart": tick_provider,
    "package:charts_common/src/chart/common/processed_series.dart": processed_series,
    "package:charts_common/src/common/symbol_renderer.dart": symbol_renderer,
    "package:charts_common/src/chart/common/datum_details.dart": datum_details,
    "package:charts_common/src/chart/cartesian/axis/tick_formatter.dart": tick_formatter,
    "package:charts_common/src/chart/cartesian/axis/draw_strategy/tick_draw_strategy.dart": tick_draw_strategy,
    "package:charts_common/src/common/style/style.dart": style,
    "package:charts_common/src/common/style/material_style.dart": material_style,
    "package:charts_common/src/common/style/style_factory.dart": style_factory,
    "package:charts_common/src/chart/cartesian/axis/scale.dart": scale,
    "package:charts_common/src/chart/cartesian/axis/spec/axis_spec.dart": axis_spec,
    "package:charts_common/src/data/series.dart": series$,
    "package:charts_common/src/chart/cartesian/axis/axis.dart": axis
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["simple_ordinal_scale.dart","scale.dart","ordinal_extents.dart","ordinal_scale_domain_info.dart","ordinal_scale.dart","tick_provider.dart","ordinal_tick_provider.dart","numeric_tick_provider.dart","linear/linear_scale_viewport.dart","linear/linear_scale_function.dart","linear/linear_scale_domain_info.dart","numeric_scale.dart","numeric_extents.dart","linear/linear_scale.dart","draw_strategy/base_tick_draw_strategy.dart","draw_strategy/small_tick_draw_strategy.dart","../../common/processed_series.dart","../../../common/symbol_renderer.dart","../../common/datum_details.dart","tick_formatter.dart","draw_strategy/tick_draw_strategy.dart","../../../common/style/style.dart","../../../common/style/material_style.dart","../../../common/style/style_factory.dart","spec/axis_spec.dart","../../../data/series.dart","axis.dart"],"names":[],"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","file":"../../../../../../../../../../../../D:/packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart.lib.js"}');
  // Exports:
  return {
    src__chart__cartesian__axis__simple_ordinal_scale: simple_ordinal_scale,
    src__chart__cartesian__axis__ordinal_extents: ordinal_extents,
    src__chart__cartesian__axis__ordinal_scale_domain_info: ordinal_scale_domain_info,
    src__chart__cartesian__axis__ordinal_scale: ordinal_scale,
    src__chart__cartesian__axis__ordinal_tick_provider: ordinal_tick_provider,
    src__chart__cartesian__axis__numeric_tick_provider: numeric_tick_provider,
    src__chart__cartesian__axis__linear__linear_scale_viewport: linear_scale_viewport,
    src__chart__cartesian__axis__linear__linear_scale_function: linear_scale_function,
    src__chart__cartesian__axis__linear__linear_scale_domain_info: linear_scale_domain_info,
    src__chart__cartesian__axis__numeric_scale: numeric_scale,
    src__chart__cartesian__axis__numeric_extents: numeric_extents,
    src__chart__cartesian__axis__linear__linear_scale: linear_scale,
    src__chart__cartesian__axis__draw_strategy__base_tick_draw_strategy: base_tick_draw_strategy,
    src__chart__cartesian__axis__draw_strategy__small_tick_draw_strategy: small_tick_draw_strategy,
    src__chart__cartesian__axis__tick_provider: tick_provider,
    src__chart__common__processed_series: processed_series,
    src__common__symbol_renderer: symbol_renderer,
    src__chart__common__datum_details: datum_details,
    src__chart__cartesian__axis__tick_formatter: tick_formatter,
    src__chart__cartesian__axis__draw_strategy__tick_draw_strategy: tick_draw_strategy,
    src__common__style__style: style,
    src__common__style__material_style: material_style,
    src__common__style__style_factory: style_factory,
    src__chart__cartesian__axis__scale: scale,
    src__chart__cartesian__axis__spec__axis_spec: axis_spec,
    src__data__series: series$,
    src__chart__cartesian__axis__axis: axis
  };
}));

//# sourceMappingURL=simple_ordinal_scale.dart.lib.js.map
