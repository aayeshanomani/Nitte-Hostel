define(['dart_sdk', 'packages/http/http.dart', 'packages/test_one/admin/utils/config.dart', 'packages/test_one/admin/utils/models.dart', 'packages/http/src/multipart_request.dart', 'packages/http/src/byte_stream.dart', 'packages/async/src/delegate/stream.dart', 'packages/http/src/multipart_file_stub.dart', 'packages/path/src/path_set.dart'], (function load__packages__test_one__admin__utils__api_dart(dart_sdk, packages__http__http$46dart, packages__test_one__admin__utils__config$46dart, packages__test_one__admin__utils__models$46dart, packages__http__src__multipart_request$46dart, packages__http__src__byte_stream$46dart, packages__async__src__delegate__stream$46dart, packages__http__src__multipart_file_stub$46dart, packages__path__src__path_set$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const http = packages__http__http$46dart.http;
  const config = packages__test_one__admin__utils__config$46dart.admin__utils__config;
  const models = packages__test_one__admin__utils__models$46dart.admin__utils__models;
  const multipart_request = packages__http__src__multipart_request$46dart.src__multipart_request;
  const byte_stream = packages__http__src__byte_stream$46dart.src__byte_stream;
  const stream$ = packages__async__src__delegate__stream$46dart.src__delegate__stream;
  const multipart_file = packages__http__src__multipart_file_stub$46dart.src__multipart_file;
  const path = packages__path__src__path_set$46dart.path;
  var api = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    AdminsL: () => (T.AdminsL = dart.constFn(dart.legacy(models.Admins)))(),
    BillsL: () => (T.BillsL = dart.constFn(dart.legacy(models.Bills)))(),
    DashboardsL: () => (T.DashboardsL = dart.constFn(dart.legacy(models.Dashboards)))(),
    EmployeesL: () => (T.EmployeesL = dart.constFn(dart.legacy(models.Employees)))(),
    FoodsL: () => (T.FoodsL = dart.constFn(dart.legacy(models.Foods)))(),
    InvoicesL: () => (T.InvoicesL = dart.constFn(dart.legacy(models.Invoices)))(),
    IssuesL: () => (T.IssuesL = dart.constFn(dart.legacy(models.Issues)))(),
    LogsL: () => (T.LogsL = dart.constFn(dart.legacy(models.Logs)))(),
    NotesL: () => (T.NotesL = dart.constFn(dart.legacy(models.Notes)))(),
    NoticesL: () => (T.NoticesL = dart.constFn(dart.legacy(models.Notices)))(),
    ChartsL: () => (T.ChartsL = dart.constFn(dart.legacy(models.Charts)))(),
    RoomsL: () => (T.RoomsL = dart.constFn(dart.legacy(models.Rooms)))(),
    UsersL: () => (T.UsersL = dart.constFn(dart.legacy(models.Users)))(),
    HostelsL: () => (T.HostelsL = dart.constFn(dart.legacy(models.Hostels)))(),
    LinkedHashSetOfStringL: () => (T.LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(T.StringL())))(),
    SetOfStringL: () => (T.SetOfStringL = dart.constFn(core.Set$(T.StringL())))(),
    SetLOfStringL: () => (T.SetLOfStringL = dart.constFn(dart.legacy(T.SetOfStringL())))(),
    StringLAndStringLToSetLOfStringL: () => (T.StringLAndStringLToSetLOfStringL = dart.constFn(dart.fnType(T.SetLOfStringL(), [T.StringL(), T.StringL()])))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    FutureOrOfStringL: () => (T.FutureOrOfStringL = dart.constFn(async.FutureOr$(T.StringL())))(),
    FutureOrLOfStringL: () => (T.FutureOrLOfStringL = dart.constFn(dart.legacy(T.FutureOrOfStringL())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  api.getAdmins = function getAdmins(query) {
    return async.async(T.AdminsL(), function* getAdmins() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/admin", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Admins.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getBills = function getBills(query) {
    return async.async(T.BillsL(), function* getBills() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/bill", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Bills.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getDashboards = function getDashboards(query) {
    return async.async(T.DashboardsL(), function* getDashboards() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/dashboard", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Dashboards.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getEmployees = function getEmployees(query) {
    return async.async(T.EmployeesL(), function* getEmployees() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/employee", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Employees.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getFoods = function getFoods(query) {
    return async.async(T.FoodsL(), function* getFoods() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/food", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Foods.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getInvoices = function getInvoices(query) {
    return async.async(T.InvoicesL(), function* getInvoices() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/invoice", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Invoices.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getIssues = function getIssues(query) {
    return async.async(T.IssuesL(), function* getIssues() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/issue", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Issues.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getLogs = function getLogs(query) {
    return async.async(T.LogsL(), function* getLogs() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/log", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Logs.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getNotes = function getNotes(query) {
    return async.async(T.NotesL(), function* getNotes() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/note", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Notes.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getNotices = function getNotices(query) {
    return async.async(T.NoticesL(), function* getNotices() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/notice", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Notices.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getReports = function getReports(query) {
    return async.async(T.ChartsL(), function* getReports() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/report", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Charts.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getRooms = function getRooms(query) {
    return async.async(T.RoomsL(), function* getRooms() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/room", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Rooms.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getUsers = function getUsers(query) {
    return async.async(T.UsersL(), function* getUsers() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/user", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Users.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getHostels = function getHostels(query) {
    return async.async(T.HostelsL(), function* getHostels() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/hostel", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Hostels.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.getStatus = function getStatus(query) {
    return async.async(T.AdminsL(), function* getStatus() {
      try {
        let response = (yield http.get(core._Uri.https(config.API.URL, "prod/status", query), {headers: config.headers}).timeout(new core.Duration.new({seconds: 10})));
        return models.Admins.fromJson(T.MapLOfStringL$dynamic().as(convert.json.decode(response.body)));
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.add = function add(endpoint, body) {
    return async.async(T.boolL(), function* add() {
      if (body[$_get]("status") != null) {
        body[$_set]("status", "1");
      }
      let request = new multipart_request.MultipartRequest.new("POST", core._Uri.https(config.API.URL, endpoint));
      request.headers[$addAll](config.headers);
      request.fields[$_set]("admin_name", config.adminName);
      body[$forEach](dart.fn((k, v) => {
        let t17, t16, t15;
        return T.LinkedHashSetOfStringL().from([(t15 = request.fields, t16 = k, t17 = v, t15[$_set](t16, t17), t17)]);
      }, T.StringLAndStringLToSetLOfStringL()));
      try {
        let response = (yield request.send());
        if (response.statusCode === 200) {
          return true;
        }
        return false;
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.update = function update(endpoint, body, query) {
    return async.async(T.boolL(), function* update() {
      let request = new multipart_request.MultipartRequest.new("PUT", core._Uri.https(config.API.URL, endpoint, query));
      request.headers[$addAll](config.headers);
      request.fields[$_set]("admin_name", config.adminName);
      body[$forEach](dart.fn((k, v) => {
        let t18, t17, t16;
        return T.LinkedHashSetOfStringL().from([(t16 = request.fields, t17 = k, t18 = v, t16[$_set](t17, t18), t18)]);
      }, T.StringLAndStringLToSetLOfStringL()));
      try {
        let response = (yield request.send());
        if (response.statusCode === 200) {
          return true;
        }
        return false;
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.delete = function $delete(endpoint, query) {
    return async.async(T.boolL(), function* $delete() {
      let request = new multipart_request.MultipartRequest.new("DELETE", core._Uri.https(config.API.URL, endpoint, query));
      request.fields[$_set]("admin_name", config.adminName);
      request.headers[$addAll](config.headers);
      try {
        let response = (yield request.send());
        if (response.statusCode === 200) {
          return true;
        }
        return false;
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  api.upload = function upload(file) {
    return async.async(T.StringL(), function* upload() {
      let request = new multipart_request.MultipartRequest.new("POST", core._Uri.https(config.API.URL, "prod/upload"));
      request.headers[$addAll](config.headers);
      request.fields[$_set]("admin_name", config.adminName);
      let stream = new byte_stream.ByteStream.new(stream$.DelegatingStream.typed(T.ListLOfintL(), file.openRead()));
      let length = (yield file.length());
      let multipartFile = new multipart_file.MultipartFile.new("photo", stream, length, {filename: path.basename(file.path)});
      request.files[$add](multipartFile);
      try {
        let response = (yield request.send());
        if (response.statusCode === 200) {
          let responseData = (yield response.stream.transform(T.StringL(), convert.utf8.decoder).join());
          let data = T.MapL().as(convert.json.decode(responseData));
          if (data[$_get]("data") != null) {
            return T.FutureOrLOfStringL().as(dart.dsend(dart.dsend(data[$_get]("data"), '_get', [0]), '_get', ["image"]));
          }
        }
        return "";
      } catch (e$) {
        let e = dart.getThrown(e$);
        return null;
      }
    });
  };
  dart.trackLibraries("packages/test_one/admin/utils/api.dart", {
    "package:test_one/admin/utils/api.dart": api
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["api.dart"],"names":[],"mappings":"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","file":"../../../../packages/test_one/admin/utils/api.dart.lib.js"}');
  // Exports:
  return {
    admin__utils__api: api
  };
}));

//# sourceMappingURL=api.dart.lib.js.map
