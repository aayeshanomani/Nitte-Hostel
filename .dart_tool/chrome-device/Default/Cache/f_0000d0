define(['dart_sdk', 'packages/charts_common/src/chart/common/selection_model/selection_model.dart', 'packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart', 'packages/charts_common/src/chart/common/behavior/chart_behavior.dart', 'packages/charts_common/src/chart/cartesian/cartesian_chart.dart', 'packages/charts_common/src/chart/layout/layout_view.dart', 'packages/charts_common/src/common/graphics_factory.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart', 'packages/charts_common/src/common/color.dart'], (function load__packages__charts_common__src__chart__common__behavior__line_point_highlighter_dart(dart_sdk, packages__charts_common__src__chart__common__selection_model__selection_model$46dart, packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart, packages__charts_common__src__chart__common__behavior__chart_behavior$46dart, packages__charts_common__src__chart__cartesian__cartesian_chart$46dart, packages__charts_common__src__chart__layout__layout_view$46dart, packages__charts_common__src__common__graphics_factory$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart, packages__charts_common__src__common__color$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const selection_model = packages__charts_common__src__chart__common__selection_model__selection_model$46dart.src__chart__common__selection_model__selection_model;
  const symbol_renderer = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__common__symbol_renderer;
  const axis = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__axis;
  const style_factory = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__common__style__style_factory;
  const processed_series = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__common__processed_series;
  const base_chart = packages__charts_common__src__chart__common__behavior__chart_behavior$46dart.src__chart__common__base_chart;
  const chart_behavior = packages__charts_common__src__chart__common__behavior__chart_behavior$46dart.src__chart__common__behavior__chart_behavior;
  const cartesian_chart = packages__charts_common__src__chart__cartesian__cartesian_chart$46dart.src__chart__cartesian__cartesian_chart;
  const layout_view = packages__charts_common__src__chart__layout__layout_view$46dart.src__chart__layout__layout_view;
  const graphics_factory = packages__charts_common__src__common__graphics_factory$46dart.src__common__graphics_factory;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  const color = packages__charts_common__src__common__color$46dart.src__common__color;
  var line_point_highlighter = Object.create(dart.library);
  var $clear = dartx.clear;
  var $toDouble = dartx.toDouble;
  var $containsKey = dartx.containsKey;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $contains = dartx.contains;
  var $forEach = dartx.forEach;
  var $remove = dartx.remove;
  var $round = dartx.round;
  var $left = dartx.left;
  var $width = dartx.width;
  var $top = dartx.top;
  var $height = dartx.height;
  var $roundToDouble = dartx.roundToDouble;
  var $toString = dartx.toString;
  var $length = dartx.length;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    CartesianChartL: () => (T.CartesianChartL = dart.constFn(dart.legacy(cartesian_chart.CartesianChart)))(),
    BaseChartL: () => (T.BaseChartL = dart.constFn(dart.legacy(base_chart.BaseChart)))(),
    AxisL: () => (T.AxisL = dart.constFn(dart.legacy(axis.Axis)))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    ImmutableAxisOfnumL: () => (T.ImmutableAxisOfnumL = dart.constFn(axis.ImmutableAxis$(T.numL())))(),
    ImmutableAxisLOfnumL: () => (T.ImmutableAxisLOfnumL = dart.constFn(dart.legacy(T.ImmutableAxisOfnumL())))(),
    IdentityMapOfintL$intL: () => (T.IdentityMapOfintL$intL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.intL())))(),
    JSArrayOfnumL: () => (T.JSArrayOfnumL = dart.constFn(_interceptors.JSArray$(T.numL())))(),
    PointOfnumL: () => (T.PointOfnumL = dart.constFn(math.Point$(T.numL())))(),
    PointLOfnumL: () => (T.PointLOfnumL = dart.constFn(dart.legacy(T.PointOfnumL())))(),
    JSArrayOfPointLOfnumL: () => (T.JSArrayOfPointLOfnumL = dart.constFn(_interceptors.JSArray$(T.PointLOfnumL())))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    RectangleOfdoubleL: () => (T.RectangleOfdoubleL = dart.constFn(math.Rectangle$(T.doubleL())))(),
    LinePointHighlighterFollowLineTypeL: () => (T.LinePointHighlighterFollowLineTypeL = dart.constFn(dart.legacy(line_point_highlighter.LinePointHighlighterFollowLineType)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$]: "LinePointHighlighterFollowLineType.nearest",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$]: "LinePointHighlighterFollowLineType.none",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: line_point_highlighter.LinePointHighlighterFollowLineType.prototype,
        [_name$]: "LinePointHighlighterFollowLineType.all",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.LinePointHighlighterFollowLineTypeL());
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///C:/src/flutter/.pub-cache/hosted/pub.dartlang.org/charts_common-0.8.1/lib/src/chart/common/behavior/line_point_highlighter.dart",
    "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart"
  ];
  var selectionModelType$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.selectionModelType");
  var defaultRadiusPx$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.defaultRadiusPx");
  var radiusPaddingPx$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.radiusPaddingPx");
  var showHorizontalFollowLine$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.showHorizontalFollowLine");
  var showVerticalFollowLine$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.showVerticalFollowLine");
  var dashPattern$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.dashPattern");
  var drawFollowLinesAcrossChart$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.drawFollowLinesAcrossChart");
  var symbolRenderer$ = dart.privateName(line_point_highlighter, "LinePointHighlighter.symbolRenderer");
  var _chart = dart.privateName(line_point_highlighter, "_chart");
  var _view = dart.privateName(line_point_highlighter, "_view");
  var _lifecycleListener = dart.privateName(line_point_highlighter, "_lifecycleListener");
  var _seriesPointMap = dart.privateName(line_point_highlighter, "_seriesPointMap");
  var _currentKeys = dart.privateName(line_point_highlighter, "_currentKeys");
  var _updateViewData = dart.privateName(line_point_highlighter, "_updateViewData");
  var _selectionChanged = dart.privateName(line_point_highlighter, "_selectionChanged");
  const _is_LinePointHighlighter_default = Symbol('_is_LinePointHighlighter_default');
  line_point_highlighter.LinePointHighlighter$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var _AnimatedPointOfDL = () => (_AnimatedPointOfDL = dart.constFn(line_point_highlighter._AnimatedPoint$(DL())))();
    var _AnimatedPointLOfDL = () => (_AnimatedPointLOfDL = dart.constFn(dart.legacy(_AnimatedPointOfDL())))();
    var IdentityMapOfStringL$_AnimatedPointLOfDL = () => (IdentityMapOfStringL$_AnimatedPointLOfDL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), _AnimatedPointLOfDL())))();
    var LifecycleListenerOfDL = () => (LifecycleListenerOfDL = dart.constFn(base_chart.LifecycleListener$(DL())))();
    var BaseChartOfDL = () => (BaseChartOfDL = dart.constFn(base_chart.BaseChart$(DL())))();
    var BaseChartLOfDL = () => (BaseChartLOfDL = dart.constFn(dart.legacy(BaseChartOfDL())))();
    var _LinePointLayoutViewOfDL = () => (_LinePointLayoutViewOfDL = dart.constFn(line_point_highlighter._LinePointLayoutView$(DL())))();
    var ImmutableAxisOfDL = () => (ImmutableAxisOfDL = dart.constFn(axis.ImmutableAxis$(DL())))();
    var ImmutableAxisLOfDL = () => (ImmutableAxisLOfDL = dart.constFn(dart.legacy(ImmutableAxisOfDL())))();
    var _DatumPointOfDL = () => (_DatumPointOfDL = dart.constFn(line_point_highlighter._DatumPoint$(DL())))();
    var _PointRendererElementOfDL = () => (_PointRendererElementOfDL = dart.constFn(line_point_highlighter._PointRendererElement$(DL())))();
    var StringLAnd_AnimatedPointLOfDLToNull = () => (StringLAnd_AnimatedPointLOfDLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), _AnimatedPointLOfDL()])))();
    var LinkedHashMapOfStringL$_AnimatedPointLOfDL = () => (LinkedHashMapOfStringL$_AnimatedPointLOfDL = dart.constFn(collection.LinkedHashMap$(T.StringL(), _AnimatedPointLOfDL())))();
    var LinkedHashMapLOfStringL$_AnimatedPointLOfDL = () => (LinkedHashMapLOfStringL$_AnimatedPointLOfDL = dart.constFn(dart.legacy(LinkedHashMapOfStringL$_AnimatedPointLOfDL())))();
    class LinePointHighlighter extends core.Object {
      get selectionModelType() {
        return this[selectionModelType$];
      }
      set selectionModelType(value) {
        super.selectionModelType = value;
      }
      get defaultRadiusPx() {
        return this[defaultRadiusPx$];
      }
      set defaultRadiusPx(value) {
        super.defaultRadiusPx = value;
      }
      get radiusPaddingPx() {
        return this[radiusPaddingPx$];
      }
      set radiusPaddingPx(value) {
        super.radiusPaddingPx = value;
      }
      get showHorizontalFollowLine() {
        return this[showHorizontalFollowLine$];
      }
      set showHorizontalFollowLine(value) {
        super.showHorizontalFollowLine = value;
      }
      get showVerticalFollowLine() {
        return this[showVerticalFollowLine$];
      }
      set showVerticalFollowLine(value) {
        super.showVerticalFollowLine = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get drawFollowLinesAcrossChart() {
        return this[drawFollowLinesAcrossChart$];
      }
      set drawFollowLinesAcrossChart(value) {
        super.drawFollowLinesAcrossChart = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      attachTo(chart) {
        BaseChartLOfDL().as(chart);
        this[_chart] = chart;
        this[_view] = new (_LinePointLayoutViewOfDL()).new({chart: chart, layoutPaintOrder: 110, showHorizontalFollowLine: this.showHorizontalFollowLine, showVerticalFollowLine: this.showVerticalFollowLine, dashPattern: this.dashPattern, drawFollowLinesAcrossChart: this.drawFollowLinesAcrossChart, symbolRenderer: this.symbolRenderer});
        if (T.CartesianChartL().is(chart)) {
          if (!dart.test(T.CartesianChartL().as(chart).vertical)) dart.assertFailed(null, I[0], 156, 14, "(chart as CartesianChart).vertical");
        }
        chart.addView(this[_view]);
        chart.addLifecycleListener(this[_lifecycleListener]);
        chart.getSelectionModel(this.selectionModelType).addSelectionChangedListener(dart.bind(this, _selectionChanged));
      }
      removeFrom(chart) {
        T.BaseChartL().as(chart);
        chart.removeView(this[_view]);
        chart.getSelectionModel(this.selectionModelType).removeSelectionChangedListener(dart.bind(this, _selectionChanged));
        chart.removeLifecycleListener(this[_lifecycleListener]);
      }
      [_selectionChanged](selectionModel) {
        this[_chart].redraw({skipLayout: true, skipAnimation: true});
      }
      [_updateViewData]() {
        let t1, t0, t0$;
        this[_currentKeys][$clear]();
        let selectedDatumDetails = this[_chart].getSelectedDatumDetails(this.selectionModelType);
        let newSeriesMap = new (IdentityMapOfStringL$_AnimatedPointLOfDL()).new();
        for (let detail of selectedDatumDetails) {
          if (detail == null) {
            continue;
          }
          let series = detail.series;
          let datum = detail.datum;
          let domainAxis = ImmutableAxisLOfDL().as(series.getAttr(T.AxisL(), axis.domainAxisKey));
          let measureAxis = T.ImmutableAxisLOfnumL().as(series.getAttr(T.AxisL(), axis.measureAxisKey));
          let lineKey = series.id;
          let radiusPx = detail.radiusPx != null ? detail.radiusPx[$toDouble]() + dart.notNull(this.radiusPaddingPx) : this.defaultRadiusPx;
          let pointKey = dart.str(lineKey) + "::" + dart.str(detail.domain);
          let animatingPoint = null;
          if (dart.test(this[_seriesPointMap][$containsKey](pointKey))) {
            animatingPoint = this[_seriesPointMap][$_get](pointKey);
          } else {
            let point = new (_DatumPointOfDL()).new({datum: datum, domain: detail.domain, series: series, x: domainAxis.getLocation(detail.domain), y: measureAxis.getLocation(0.0)});
            animatingPoint = (t0 = new (_AnimatedPointOfDL()).new({key: pointKey, overlaySeries: series.overlaySeries}), (() => {
              t0.setNewTarget((t1 = new (_PointRendererElementOfDL()).new(), (() => {
                t1.point = point;
                t1.color = detail.color;
                t1.fillColor = detail.fillColor;
                t1.radiusPx = radiusPx;
                t1.measureAxisPosition = measureAxis.getLocation(0.0);
                t1.strokeWidthPx = detail.strokeWidthPx;
                t1.symbolRenderer = detail.symbolRenderer;
                return t1;
              })()));
              return t0;
            })());
          }
          newSeriesMap[$_set](pointKey, animatingPoint);
          let point = new (_DatumPointOfDL()).new({datum: datum, domain: detail.domain, series: series, x: detail.chartPosition.x, y: detail.chartPosition.y});
          this[_currentKeys][$add](pointKey);
          let pointElement = (t0$ = new (_PointRendererElementOfDL()).new(), (() => {
            t0$.point = point;
            t0$.color = detail.color;
            t0$.fillColor = detail.fillColor;
            t0$.radiusPx = radiusPx;
            t0$.measureAxisPosition = measureAxis.getLocation(0.0);
            t0$.strokeWidthPx = detail.strokeWidthPx;
            t0$.symbolRenderer = detail.symbolRenderer;
            return t0$;
          })());
          animatingPoint.setNewTarget(pointElement);
        }
        this[_seriesPointMap][$forEach](dart.fn((key, point) => {
          if (this[_currentKeys][$contains](point.key) !== true) {
            point.animateOut();
            newSeriesMap[$_set](point.key, point);
          }
        }, StringLAnd_AnimatedPointLOfDLToNull()));
        this[_seriesPointMap] = LinkedHashMapLOfStringL$_AnimatedPointLOfDL().as(newSeriesMap);
        this[_view].seriesPointMap = this[_seriesPointMap];
      }
      get role() {
        return "LinePointHighlighter-" + dart.str(dart.toString(this.selectionModelType));
      }
    }
    (LinePointHighlighter.new = function(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5;
      let selectionModelType = opts && 'selectionModelType' in opts ? opts.selectionModelType : null;
      let defaultRadiusPx = opts && 'defaultRadiusPx' in opts ? opts.defaultRadiusPx : null;
      let radiusPaddingPx = opts && 'radiusPaddingPx' in opts ? opts.radiusPaddingPx : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      this[_chart] = null;
      this[_view] = null;
      this[_lifecycleListener] = null;
      this[_seriesPointMap] = new (IdentityMapOfStringL$_AnimatedPointLOfDL()).new();
      this[_currentKeys] = T.JSArrayOfStringL().of([]);
      this[selectionModelType$] = (t0 = selectionModelType, t0 == null ? selection_model.SelectionModelType.info : t0);
      this[defaultRadiusPx$] = (t0$ = defaultRadiusPx, t0$ == null ? 4.0 : t0$);
      this[radiusPaddingPx$] = (t0$0 = radiusPaddingPx, t0$0 == null ? 2.0 : t0$0);
      this[showHorizontalFollowLine$] = (t0$1 = showHorizontalFollowLine, t0$1 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.none : t0$1);
      this[showVerticalFollowLine$] = (t0$2 = showVerticalFollowLine, t0$2 == null ? line_point_highlighter.LinePointHighlighterFollowLineType.nearest : t0$2);
      this[dashPattern$] = (t0$3 = dashPattern, t0$3 == null ? T.JSArrayOfintL().of([1, 3]) : t0$3);
      this[drawFollowLinesAcrossChart$] = (t0$4 = drawFollowLinesAcrossChart, t0$4 == null ? true : t0$4);
      this[symbolRenderer$] = (t0$5 = symbolRenderer, t0$5 == null ? new symbol_renderer.CircleSymbolRenderer.new() : t0$5);
      this[_lifecycleListener] = new (LifecycleListenerOfDL()).new({onAxisConfigured: dart.bind(this, _updateViewData)});
    }).prototype = LinePointHighlighter.prototype;
    dart.addTypeTests(LinePointHighlighter);
    LinePointHighlighter.prototype[_is_LinePointHighlighter_default] = true;
    dart.addTypeCaches(LinePointHighlighter);
    LinePointHighlighter[dart.implements] = () => [chart_behavior.ChartBehavior$(dart.legacy(D))];
    dart.setMethodSignature(LinePointHighlighter, () => ({
      __proto__: dart.getMethods(LinePointHighlighter.__proto__),
      attachTo: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      removeFrom: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [_selectionChanged]: dart.fnType(dart.void, [dart.legacy(selection_model.SelectionModel)]),
      [_updateViewData]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(LinePointHighlighter, () => ({
      __proto__: dart.getGetters(LinePointHighlighter.__proto__),
      role: dart.legacy(core.String)
    }));
    dart.setLibraryUri(LinePointHighlighter, I[1]);
    dart.setFieldSignature(LinePointHighlighter, () => ({
      __proto__: dart.getFields(LinePointHighlighter.__proto__),
      selectionModelType: dart.finalFieldType(dart.legacy(selection_model.SelectionModelType)),
      defaultRadiusPx: dart.finalFieldType(dart.legacy(core.double)),
      radiusPaddingPx: dart.finalFieldType(dart.legacy(core.double)),
      showHorizontalFollowLine: dart.finalFieldType(dart.legacy(line_point_highlighter.LinePointHighlighterFollowLineType)),
      showVerticalFollowLine: dart.finalFieldType(dart.legacy(line_point_highlighter.LinePointHighlighterFollowLineType)),
      dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      drawFollowLinesAcrossChart: dart.finalFieldType(dart.legacy(core.bool)),
      symbolRenderer: dart.finalFieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      [_chart]: dart.fieldType(dart.legacy(base_chart.BaseChart$(dart.legacy(D)))),
      [_view]: dart.fieldType(dart.legacy(line_point_highlighter._LinePointLayoutView)),
      [_lifecycleListener]: dart.fieldType(dart.legacy(base_chart.LifecycleListener$(dart.legacy(D)))),
      [_seriesPointMap]: dart.fieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(core.String), dart.legacy(line_point_highlighter._AnimatedPoint$(dart.legacy(D)))))),
      [_currentKeys]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
    }));
    return LinePointHighlighter;
  });
  line_point_highlighter.LinePointHighlighter = line_point_highlighter.LinePointHighlighter$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighter, _is_LinePointHighlighter_default);
  var layoutConfig = dart.privateName(line_point_highlighter, "_LinePointLayoutView.layoutConfig");
  var _drawAreaBounds = dart.privateName(line_point_highlighter, "_drawAreaBounds");
  var _graphicsFactory = dart.privateName(line_point_highlighter, "_graphicsFactory");
  const _is__LinePointLayoutView_default = Symbol('_is__LinePointLayoutView_default');
  line_point_highlighter._LinePointLayoutView$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var _AnimatedPointOfDL = () => (_AnimatedPointOfDL = dart.constFn(line_point_highlighter._AnimatedPoint$(DL())))();
    var _AnimatedPointLOfDL = () => (_AnimatedPointLOfDL = dart.constFn(dart.legacy(_AnimatedPointOfDL())))();
    var LinkedHashMapOfStringL$_AnimatedPointLOfDL = () => (LinkedHashMapOfStringL$_AnimatedPointLOfDL = dart.constFn(collection.LinkedHashMap$(T.StringL(), _AnimatedPointLOfDL())))();
    var LinkedHashMapLOfStringL$_AnimatedPointLOfDL = () => (LinkedHashMapLOfStringL$_AnimatedPointLOfDL = dart.constFn(dart.legacy(LinkedHashMapOfStringL$_AnimatedPointLOfDL())))();
    var StringLAnd_AnimatedPointLOfDLToNull = () => (StringLAnd_AnimatedPointLOfDLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), _AnimatedPointLOfDL()])))();
    var StringLTo_AnimatedPointLOfDL = () => (StringLTo_AnimatedPointLOfDL = dart.constFn(dart.fnType(_AnimatedPointLOfDL(), [T.StringL()])))();
    var _PointRendererElementOfDL = () => (_PointRendererElementOfDL = dart.constFn(line_point_highlighter._PointRendererElement$(DL())))();
    var _PointRendererElementLOfDL = () => (_PointRendererElementLOfDL = dart.constFn(dart.legacy(_PointRendererElementOfDL())))();
    var JSArrayOf_PointRendererElementLOfDL = () => (JSArrayOf_PointRendererElementLOfDL = dart.constFn(_interceptors.JSArray$(_PointRendererElementLOfDL())))();
    class _LinePointLayoutView extends layout_view.LayoutView {
      get layoutConfig() {
        return this[layoutConfig];
      }
      set layoutConfig(value) {
        super.layoutConfig = value;
      }
      get drawBounds() {
        return this[_drawAreaBounds];
      }
      set seriesPointMap(value) {
        LinkedHashMapLOfStringL$_AnimatedPointLOfDL().as(value);
        this[_seriesPointMap] = value;
      }
      get graphicsFactory() {
        return this[_graphicsFactory];
      }
      set graphicsFactory(value) {
        this[_graphicsFactory] = value;
      }
      measure(maxWidth, maxHeight) {
        return null;
      }
      layout(componentBounds, drawAreaBounds) {
        this[_drawAreaBounds] = drawAreaBounds;
      }
      paint(canvas, animationPercent) {
        let t0;
        if (this[_seriesPointMap] == null) {
          return;
        }
        if (animationPercent === 1.0) {
          let keysToRemove = T.JSArrayOfStringL().of([]);
          this[_seriesPointMap][$forEach](dart.fn((key, point) => {
            if (dart.test(point.animatingOut)) {
              keysToRemove[$add](key);
            }
          }, StringLAnd_AnimatedPointLOfDLToNull()));
          keysToRemove[$forEach](dart.fn(key => this[_seriesPointMap][$remove](key), StringLTo_AnimatedPointLOfDL()));
        }
        let points = JSArrayOf_PointRendererElementLOfDL().of([]);
        this[_seriesPointMap][$forEach](dart.fn((key, point) => {
          points[$add](point.getCurrentPoint(animationPercent));
        }, StringLAnd_AnimatedPointLOfDLToNull()));
        let endPointPerValueVertical = new (T.IdentityMapOfintL$intL()).new();
        let endPointPerValueHorizontal = new (T.IdentityMapOfintL$intL()).new();
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let roundedX = pointElement.point.x[$round]();
          let roundedY = pointElement.point.y[$round]();
          if (endPointPerValueVertical[$_get](roundedX) == null) {
            endPointPerValueVertical[$_set](roundedX, roundedY);
          } else {
            if (this.showVerticalFollowLine != line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              endPointPerValueVertical[$_set](roundedX, math.min(T.intL(), endPointPerValueVertical[$_get](roundedX), roundedY));
            }
          }
          if (endPointPerValueHorizontal[$_get](roundedY) == null) {
            endPointPerValueHorizontal[$_set](roundedY, roundedX);
          } else {
            if (this.showHorizontalFollowLine != line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              endPointPerValueHorizontal[$_set](roundedY, math.max(T.intL(), endPointPerValueHorizontal[$_get](roundedY), roundedX));
            }
          }
        }
        let shouldShowHorizontalFollowLine = this.showHorizontalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.all || this.showHorizontalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.nearest;
        let shouldShowVerticalFollowLine = this.showVerticalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.all || this.showVerticalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.nearest;
        let paintedHorizontalLinePositions = T.JSArrayOfnumL().of([]);
        let paintedVerticalLinePositions = T.JSArrayOfnumL().of([]);
        let drawBounds = this.chart.drawableLayoutAreaBounds;
        let rtl = this.chart.context.isRtl;
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let roundedX = pointElement.point.x[$round]();
          let roundedY = pointElement.point.y[$round]();
          if (shouldShowHorizontalFollowLine && !dart.test(paintedHorizontalLinePositions[$contains](roundedY))) {
            let leftBound = null;
            let rightBound = null;
            if (dart.test(this.drawFollowLinesAcrossChart)) {
              leftBound = drawBounds[$left];
              rightBound = dart.notNull(drawBounds[$left]) + dart.notNull(drawBounds[$width]);
            } else {
              let x = endPointPerValueHorizontal[$_get](roundedY);
              leftBound = dart.test(rtl) ? x : drawBounds[$left];
              rightBound = dart.test(rtl) ? dart.notNull(drawBounds[$left]) + dart.notNull(drawBounds[$width]) : x;
            }
            canvas.drawLine({points: T.JSArrayOfPointLOfnumL().of([new (T.PointOfnumL()).new(leftBound, pointElement.point.y), new (T.PointOfnumL()).new(rightBound, pointElement.point.y)]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (this.showHorizontalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              shouldShowHorizontalFollowLine = false;
            }
            paintedHorizontalLinePositions[$add](roundedY);
          }
          if (shouldShowVerticalFollowLine && !dart.test(paintedVerticalLinePositions[$contains](roundedX))) {
            let topBound = dart.test(this.drawFollowLinesAcrossChart) ? drawBounds[$top] : endPointPerValueVertical[$_get](roundedX);
            canvas.drawLine({points: T.JSArrayOfPointLOfnumL().of([new (T.PointOfnumL()).new(pointElement.point.x, topBound), new (T.PointOfnumL()).new(pointElement.point.x, dart.notNull(drawBounds[$top]) + dart.notNull(drawBounds[$height]))]), stroke: style_factory.StyleFactory.style.linePointHighlighterColor, strokeWidthPx: 1.0, dashPattern: this.dashPattern});
            if (this.showVerticalFollowLine == line_point_highlighter.LinePointHighlighterFollowLineType.nearest) {
              shouldShowVerticalFollowLine = false;
            }
            paintedVerticalLinePositions[$add](roundedX);
          }
          if (!shouldShowHorizontalFollowLine && !shouldShowVerticalFollowLine) {
            break;
          }
        }
        for (let pointElement of points) {
          if (pointElement.point.x == null || pointElement.point.y == null) {
            continue;
          }
          let bounds = new (T.RectangleOfdoubleL()).new(dart.notNull(pointElement.point.x) - dart.notNull(pointElement.radiusPx), dart.notNull(pointElement.point.y) - dart.notNull(pointElement.radiusPx), dart.notNull(pointElement.radiusPx) * 2, dart.notNull(pointElement.radiusPx) * 2);
          (t0 = pointElement.symbolRenderer, t0 == null ? this.symbolRenderer : t0).paint(canvas, bounds, {fillColor: pointElement.fillColor, strokeColor: pointElement.color, strokeWidthPx: pointElement.strokeWidthPx});
        }
      }
      get componentBounds() {
        return this[_drawAreaBounds];
      }
      get isSeriesRenderer() {
        return false;
      }
    }
    (_LinePointLayoutView.new = function(opts) {
      let chart = opts && 'chart' in opts ? opts.chart : null;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let showHorizontalFollowLine = opts && 'showHorizontalFollowLine' in opts ? opts.showHorizontalFollowLine : null;
      let showVerticalFollowLine = opts && 'showVerticalFollowLine' in opts ? opts.showVerticalFollowLine : null;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let drawFollowLinesAcrossChart = opts && 'drawFollowLinesAcrossChart' in opts ? opts.drawFollowLinesAcrossChart : null;
      this[_drawAreaBounds] = null;
      this[_graphicsFactory] = null;
      this[_seriesPointMap] = null;
      this.chart = chart;
      this.showHorizontalFollowLine = showHorizontalFollowLine;
      this.showVerticalFollowLine = showVerticalFollowLine;
      this.symbolRenderer = symbolRenderer;
      this.dashPattern = dashPattern;
      this.drawFollowLinesAcrossChart = drawFollowLinesAcrossChart;
      this[layoutConfig] = new layout_view.LayoutViewConfig.new({paintOrder: 110, position: layout_view.LayoutPosition.DrawArea, positionOrder: layoutPaintOrder});
      ;
    }).prototype = _LinePointLayoutView.prototype;
    dart.addTypeTests(_LinePointLayoutView);
    _LinePointLayoutView.prototype[_is__LinePointLayoutView_default] = true;
    dart.addTypeCaches(_LinePointLayoutView);
    dart.setMethodSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getMethods(_LinePointLayoutView.__proto__),
      measure: dart.fnType(dart.legacy(layout_view.ViewMeasuredSizes), [dart.legacy(core.int), dart.legacy(core.int)]),
      layout: dart.fnType(dart.void, [dart.legacy(math.Rectangle$(dart.legacy(core.int))), dart.legacy(math.Rectangle$(dart.legacy(core.int)))]),
      paint: dart.fnType(dart.void, [dart.legacy(chart_canvas.ChartCanvas), dart.legacy(core.double)])
    }));
    dart.setGetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getGetters(_LinePointLayoutView.__proto__),
      drawBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory),
      componentBounds: dart.legacy(math.Rectangle$(dart.legacy(core.int))),
      isSeriesRenderer: dart.legacy(core.bool)
    }));
    dart.setSetterSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getSetters(_LinePointLayoutView.__proto__),
      seriesPointMap: dart.legacy(core.Object),
      graphicsFactory: dart.legacy(graphics_factory.GraphicsFactory)
    }));
    dart.setLibraryUri(_LinePointLayoutView, I[1]);
    dart.setFieldSignature(_LinePointLayoutView, () => ({
      __proto__: dart.getFields(_LinePointLayoutView.__proto__),
      layoutConfig: dart.finalFieldType(dart.legacy(layout_view.LayoutViewConfig)),
      showHorizontalFollowLine: dart.finalFieldType(dart.legacy(line_point_highlighter.LinePointHighlighterFollowLineType)),
      showVerticalFollowLine: dart.finalFieldType(dart.legacy(line_point_highlighter.LinePointHighlighterFollowLineType)),
      chart: dart.finalFieldType(dart.legacy(base_chart.BaseChart$(dart.legacy(D)))),
      dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      [_drawAreaBounds]: dart.fieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
      drawFollowLinesAcrossChart: dart.finalFieldType(dart.legacy(core.bool)),
      symbolRenderer: dart.finalFieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      [_graphicsFactory]: dart.fieldType(dart.legacy(graphics_factory.GraphicsFactory)),
      [_seriesPointMap]: dart.fieldType(dart.legacy(collection.LinkedHashMap$(dart.legacy(core.String), dart.legacy(line_point_highlighter._AnimatedPoint$(dart.legacy(D))))))
    }));
    return _LinePointLayoutView;
  });
  line_point_highlighter._LinePointLayoutView = line_point_highlighter._LinePointLayoutView$();
  dart.addTypeTests(line_point_highlighter._LinePointLayoutView, _is__LinePointLayoutView_default);
  const _is__DatumPoint_default = Symbol('_is__DatumPoint_default');
  line_point_highlighter._DatumPoint$ = dart.generic(D => {
    class _DatumPoint extends math.Point$(dart.legacy(core.double)) {
      static from(other, x = null, y = null) {
        let t0, t0$;
        return new (line_point_highlighter._DatumPoint$(dart.legacy(D))).new({datum: other.datum, domain: other.domain, series: other.series, x: (t0 = x, t0 == null ? other.x : t0), y: (t0$ = y, t0$ == null ? other.y : t0$)});
      }
    }
    (_DatumPoint.new = function(opts) {
      let datum = opts && 'datum' in opts ? opts.datum : null;
      let domain = opts && 'domain' in opts ? opts.domain : null;
      let series = opts && 'series' in opts ? opts.series : null;
      let x = opts && 'x' in opts ? opts.x : null;
      let y = opts && 'y' in opts ? opts.y : null;
      this.datum = datum;
      this.domain = domain;
      this.series = series;
      _DatumPoint.__proto__.new.call(this, x, y);
      ;
    }).prototype = _DatumPoint.prototype;
    dart.addTypeTests(_DatumPoint);
    _DatumPoint.prototype[_is__DatumPoint_default] = true;
    dart.addTypeCaches(_DatumPoint);
    dart.setLibraryUri(_DatumPoint, I[1]);
    dart.setFieldSignature(_DatumPoint, () => ({
      __proto__: dart.getFields(_DatumPoint.__proto__),
      datum: dart.finalFieldType(dart.dynamic),
      domain: dart.finalFieldType(dart.legacy(D)),
      series: dart.finalFieldType(dart.legacy(processed_series.ImmutableSeries$(dart.legacy(D))))
    }));
    return _DatumPoint;
  });
  line_point_highlighter._DatumPoint = line_point_highlighter._DatumPoint$();
  dart.addTypeTests(line_point_highlighter._DatumPoint, _is__DatumPoint_default);
  var point = dart.privateName(line_point_highlighter, "_PointRendererElement.point");
  var _lerpDouble = dart.privateName(line_point_highlighter, "_lerpDouble");
  const _is__PointRendererElement_default = Symbol('_is__PointRendererElement_default');
  line_point_highlighter._PointRendererElement$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var _DatumPointOfDL = () => (_DatumPointOfDL = dart.constFn(line_point_highlighter._DatumPoint$(DL())))();
    var _DatumPointLOfDL = () => (_DatumPointLOfDL = dart.constFn(dart.legacy(_DatumPointOfDL())))();
    var _PointRendererElementOfDL = () => (_PointRendererElementOfDL = dart.constFn(line_point_highlighter._PointRendererElement$(DL())))();
    class _PointRendererElement extends core.Object {
      get point() {
        return this[point];
      }
      set point(value) {
        this[point] = _DatumPointLOfDL().as(value);
      }
      clone() {
        let t0;
        t0 = new (_PointRendererElementOfDL()).new();
        return (() => {
          t0.point = this.point;
          t0.color = this.color;
          t0.fillColor = this.fillColor;
          t0.measureAxisPosition = this.measureAxisPosition;
          t0.radiusPx = this.radiusPx;
          t0.strokeWidthPx = this.strokeWidthPx;
          t0.symbolRenderer = this.symbolRenderer;
          return t0;
        })();
      }
      updateAnimationPercent(previous, target, animationPercent) {
        let targetPoint = target.point;
        let previousPoint = previous.point;
        let x = this[_lerpDouble](previousPoint.x, targetPoint.x, animationPercent);
        let y = this[_lerpDouble](previousPoint.y, targetPoint.y, animationPercent);
        this.point = _DatumPointOfDL().from(_DatumPointLOfDL().as(targetPoint), x, y);
        this.color = chart_canvas.getAnimatedColor(previous.color, target.color, animationPercent);
        this.fillColor = chart_canvas.getAnimatedColor(previous.fillColor, target.fillColor, animationPercent);
        this.radiusPx = this[_lerpDouble](previous.radiusPx, target.radiusPx, animationPercent);
        if (target.strokeWidthPx != null && previous.strokeWidthPx != null) {
          this.strokeWidthPx = (dart.notNull(target.strokeWidthPx) - dart.notNull(previous.strokeWidthPx)) * dart.notNull(animationPercent) + dart.notNull(previous.strokeWidthPx);
        } else {
          this.strokeWidthPx = null;
        }
      }
      [_lerpDouble](a, b, t) {
        if (a == null || b == null) return null;
        return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
      }
    }
    (_PointRendererElement.new = function() {
      this[point] = null;
      this.color = null;
      this.fillColor = null;
      this.radiusPx = null;
      this.measureAxisPosition = null;
      this.strokeWidthPx = null;
      this.symbolRenderer = null;
      ;
    }).prototype = _PointRendererElement.prototype;
    dart.addTypeTests(_PointRendererElement);
    _PointRendererElement.prototype[_is__PointRendererElement_default] = true;
    dart.addTypeCaches(_PointRendererElement);
    dart.setMethodSignature(_PointRendererElement, () => ({
      __proto__: dart.getMethods(_PointRendererElement.__proto__),
      clone: dart.fnType(dart.legacy(line_point_highlighter._PointRendererElement$(dart.legacy(D))), []),
      updateAnimationPercent: dart.fnType(dart.void, [dart.legacy(line_point_highlighter._PointRendererElement), dart.legacy(line_point_highlighter._PointRendererElement), dart.legacy(core.double)]),
      [_lerpDouble]: dart.fnType(dart.legacy(core.double), [dart.legacy(core.double), dart.legacy(core.double), dart.legacy(core.double)])
    }));
    dart.setLibraryUri(_PointRendererElement, I[1]);
    dart.setFieldSignature(_PointRendererElement, () => ({
      __proto__: dart.getFields(_PointRendererElement.__proto__),
      point: dart.fieldType(dart.legacy(line_point_highlighter._DatumPoint$(dart.legacy(D)))),
      color: dart.fieldType(dart.legacy(color.Color)),
      fillColor: dart.fieldType(dart.legacy(color.Color)),
      radiusPx: dart.fieldType(dart.legacy(core.double)),
      measureAxisPosition: dart.fieldType(dart.legacy(core.double)),
      strokeWidthPx: dart.fieldType(dart.legacy(core.double)),
      symbolRenderer: dart.fieldType(dart.legacy(symbol_renderer.SymbolRenderer))
    }));
    return _PointRendererElement;
  });
  line_point_highlighter._PointRendererElement = line_point_highlighter._PointRendererElement$();
  dart.addTypeTests(line_point_highlighter._PointRendererElement, _is__PointRendererElement_default);
  var _previousPoint = dart.privateName(line_point_highlighter, "_previousPoint");
  var _targetPoint = dart.privateName(line_point_highlighter, "_targetPoint");
  var _currentPoint = dart.privateName(line_point_highlighter, "_currentPoint");
  const _is__AnimatedPoint_default = Symbol('_is__AnimatedPoint_default');
  line_point_highlighter._AnimatedPoint$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var _DatumPointOfDL = () => (_DatumPointOfDL = dart.constFn(line_point_highlighter._DatumPoint$(DL())))();
    var _PointRendererElementOfDL = () => (_PointRendererElementOfDL = dart.constFn(line_point_highlighter._PointRendererElement$(DL())))();
    var _PointRendererElementLOfDL = () => (_PointRendererElementLOfDL = dart.constFn(dart.legacy(_PointRendererElementOfDL())))();
    class _AnimatedPoint extends core.Object {
      animateOut() {
        let newTarget = this[_currentPoint].clone();
        let targetPoint = newTarget.point;
        let newPoint = _DatumPointOfDL().from(targetPoint, targetPoint.x, newTarget.measureAxisPosition[$roundToDouble]());
        newTarget.point = newPoint;
        newTarget.radiusPx = 0.0;
        this.setNewTarget(newTarget);
        this.animatingOut = true;
      }
      setNewTarget(newTarget) {
        _PointRendererElementLOfDL().as(newTarget);
        this.animatingOut = false;
        this[_currentPoint] == null ? this[_currentPoint] = newTarget.clone() : null;
        this[_previousPoint] = this[_currentPoint].clone();
        this[_targetPoint] = newTarget;
      }
      getCurrentPoint(animationPercent) {
        if (animationPercent === 1.0 || this[_previousPoint] == null) {
          this[_currentPoint] = this[_targetPoint];
          this[_previousPoint] = this[_targetPoint];
          return this[_currentPoint];
        }
        this[_currentPoint].updateAnimationPercent(this[_previousPoint], this[_targetPoint], animationPercent);
        return this[_currentPoint];
      }
    }
    (_AnimatedPoint.new = function(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let overlaySeries = opts && 'overlaySeries' in opts ? opts.overlaySeries : null;
      this[_previousPoint] = null;
      this[_targetPoint] = null;
      this[_currentPoint] = null;
      this.animatingOut = false;
      this.key = key;
      this.overlaySeries = overlaySeries;
      ;
    }).prototype = _AnimatedPoint.prototype;
    dart.addTypeTests(_AnimatedPoint);
    _AnimatedPoint.prototype[_is__AnimatedPoint_default] = true;
    dart.addTypeCaches(_AnimatedPoint);
    dart.setMethodSignature(_AnimatedPoint, () => ({
      __proto__: dart.getMethods(_AnimatedPoint.__proto__),
      animateOut: dart.fnType(dart.void, []),
      setNewTarget: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      getCurrentPoint: dart.fnType(dart.legacy(line_point_highlighter._PointRendererElement$(dart.legacy(D))), [dart.legacy(core.double)])
    }));
    dart.setLibraryUri(_AnimatedPoint, I[1]);
    dart.setFieldSignature(_AnimatedPoint, () => ({
      __proto__: dart.getFields(_AnimatedPoint.__proto__),
      key: dart.finalFieldType(dart.legacy(core.String)),
      overlaySeries: dart.finalFieldType(dart.legacy(core.bool)),
      [_previousPoint]: dart.fieldType(dart.legacy(line_point_highlighter._PointRendererElement$(dart.legacy(D)))),
      [_targetPoint]: dart.fieldType(dart.legacy(line_point_highlighter._PointRendererElement$(dart.legacy(D)))),
      [_currentPoint]: dart.fieldType(dart.legacy(line_point_highlighter._PointRendererElement$(dart.legacy(D)))),
      animatingOut: dart.fieldType(dart.legacy(core.bool))
    }));
    return _AnimatedPoint;
  });
  line_point_highlighter._AnimatedPoint = line_point_highlighter._AnimatedPoint$();
  dart.addTypeTests(line_point_highlighter._AnimatedPoint, _is__AnimatedPoint_default);
  var _name$ = dart.privateName(line_point_highlighter, "_name");
  line_point_highlighter.LinePointHighlighterFollowLineType = class LinePointHighlighterFollowLineType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (line_point_highlighter.LinePointHighlighterFollowLineType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = line_point_highlighter.LinePointHighlighterFollowLineType.prototype;
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterFollowLineType);
  dart.addTypeCaches(line_point_highlighter.LinePointHighlighterFollowLineType);
  dart.setMethodSignature(line_point_highlighter.LinePointHighlighterFollowLineType, () => ({
    __proto__: dart.getMethods(line_point_highlighter.LinePointHighlighterFollowLineType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(line_point_highlighter.LinePointHighlighterFollowLineType, I[1]);
  dart.setFieldSignature(line_point_highlighter.LinePointHighlighterFollowLineType, () => ({
    __proto__: dart.getFields(line_point_highlighter.LinePointHighlighterFollowLineType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(line_point_highlighter.LinePointHighlighterFollowLineType, ['toString']);
  line_point_highlighter.LinePointHighlighterFollowLineType.nearest = C[0] || CT.C0;
  line_point_highlighter.LinePointHighlighterFollowLineType.none = C[1] || CT.C1;
  line_point_highlighter.LinePointHighlighterFollowLineType.all = C[2] || CT.C2;
  line_point_highlighter.LinePointHighlighterFollowLineType.values = C[3] || CT.C3;
  var behavior$ = dart.privateName(line_point_highlighter, "LinePointHighlighterTester.behavior");
  const _is_LinePointHighlighterTester_default = Symbol('_is_LinePointHighlighterTester_default');
  line_point_highlighter.LinePointHighlighterTester$ = dart.generic(D => {
    var DL = () => (DL = dart.constFn(dart.legacy(D)))();
    var _AnimatedPointOfDL = () => (_AnimatedPointOfDL = dart.constFn(line_point_highlighter._AnimatedPoint$(DL())))();
    var _AnimatedPointLOfDL = () => (_AnimatedPointLOfDL = dart.constFn(dart.legacy(_AnimatedPointOfDL())))();
    var StringLAnd_AnimatedPointLOfDLToNull = () => (StringLAnd_AnimatedPointLOfDLToNull = dart.constFn(dart.fnType(core.Null, [T.StringL(), _AnimatedPointLOfDL()])))();
    class LinePointHighlighterTester extends core.Object {
      get behavior() {
        return this[behavior$];
      }
      set behavior(value) {
        super.behavior = value;
      }
      getSelectionLength() {
        return this.behavior[_seriesPointMap][$length];
      }
      isDatumSelected(datum) {
        DL().as(datum);
        let contains = false;
        this.behavior[_seriesPointMap][$forEach](dart.fn((key, point) => {
          if (dart.equals(point[_currentPoint].point.datum, datum)) {
            contains = true;
            return;
          }
        }, StringLAnd_AnimatedPointLOfDLToNull()));
        return contains;
      }
    }
    (LinePointHighlighterTester.new = function(behavior) {
      this[behavior$] = behavior;
      ;
    }).prototype = LinePointHighlighterTester.prototype;
    dart.addTypeTests(LinePointHighlighterTester);
    LinePointHighlighterTester.prototype[_is_LinePointHighlighterTester_default] = true;
    dart.addTypeCaches(LinePointHighlighterTester);
    dart.setMethodSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getMethods(LinePointHighlighterTester.__proto__),
      getSelectionLength: dart.fnType(dart.legacy(core.int), []),
      isDatumSelected: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(LinePointHighlighterTester, I[1]);
    dart.setFieldSignature(LinePointHighlighterTester, () => ({
      __proto__: dart.getFields(LinePointHighlighterTester.__proto__),
      behavior: dart.finalFieldType(dart.legacy(line_point_highlighter.LinePointHighlighter$(dart.legacy(D))))
    }));
    return LinePointHighlighterTester;
  });
  line_point_highlighter.LinePointHighlighterTester = line_point_highlighter.LinePointHighlighterTester$();
  dart.addTypeTests(line_point_highlighter.LinePointHighlighterTester, _is_LinePointHighlighterTester_default);
  dart.trackLibraries("packages/charts_common/src/chart/common/behavior/line_point_highlighter.dart", {
    "package:charts_common/src/chart/common/behavior/line_point_highlighter.dart": line_point_highlighter
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["line_point_highlighter.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../D:/packages/charts_common/src/chart/common/behavior/line_point_highlighter.dart.lib.js"}');
  // Exports:
  return {
    src__chart__common__behavior__line_point_highlighter: line_point_highlighter
  };
}));

//# sourceMappingURL=line_point_highlighter.dart.lib.js.map
