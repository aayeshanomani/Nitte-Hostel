define(['dart_sdk', 'packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart', 'packages/charts_common/src/chart/common/chart_context.dart', 'packages/charts_common/src/chart/cartesian/axis/end_points_tick_provider.dart', 'packages/charts_common/src/chart/cartesian/axis/static_tick_provider.dart', 'packages/charts_common/src/chart/cartesian/axis/spec/tick_spec.dart', 'packages/intl/src/intl_helpers.dart'], (function load__packages__charts_common__src__chart__cartesian__axis__spec__numeric_axis_spec_dart(dart_sdk, packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart, packages__charts_common__src__chart__common__chart_context$46dart, packages__charts_common__src__chart__cartesian__axis__end_points_tick_provider$46dart, packages__charts_common__src__chart__cartesian__axis__static_tick_provider$46dart, packages__charts_common__src__chart__cartesian__axis__spec__tick_spec$46dart, packages__intl__src__intl_helpers$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const axis = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__axis;
  const axis_spec = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__spec__axis_spec;
  const numeric_extents = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__numeric_extents;
  const numeric_tick_provider = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__numeric_tick_provider;
  const tick_formatter = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__chart__cartesian__axis__tick_formatter;
  const chart_context = packages__charts_common__src__chart__common__chart_context$46dart.src__chart__common__chart_context;
  const end_points_tick_provider = packages__charts_common__src__chart__cartesian__axis__end_points_tick_provider$46dart.src__chart__cartesian__axis__end_points_tick_provider;
  const static_tick_provider = packages__charts_common__src__chart__cartesian__axis__static_tick_provider$46dart.src__chart__cartesian__axis__static_tick_provider;
  const tick_spec = packages__charts_common__src__chart__cartesian__axis__spec__tick_spec$46dart.src__chart__cartesian__axis__spec__tick_spec;
  const intl = packages__intl__src__intl_helpers$46dart.intl;
  var numeric_axis_spec = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    NumericTickProviderSpecL: () => (T.NumericTickProviderSpecL = dart.constFn(dart.legacy(numeric_axis_spec.NumericTickProviderSpec)))(),
    NumericTickFormatterSpecL: () => (T.NumericTickFormatterSpecL = dart.constFn(dart.legacy(numeric_axis_spec.NumericTickFormatterSpec)))(),
    numL: () => (T.numL = dart.constFn(dart.legacy(core.num)))(),
    AxisOfnumL: () => (T.AxisOfnumL = dart.constFn(axis.Axis$(T.numL())))(),
    AxisLOfnumL: () => (T.AxisLOfnumL = dart.constFn(dart.legacy(T.AxisOfnumL())))(),
    NumericAxisL: () => (T.NumericAxisL = dart.constFn(dart.legacy(axis.NumericAxis)))(),
    NumericAxisSpecL: () => (T.NumericAxisSpecL = dart.constFn(dart.legacy(numeric_axis_spec.NumericAxisSpec)))(),
    BasicNumericTickProviderSpecL: () => (T.BasicNumericTickProviderSpecL = dart.constFn(dart.legacy(numeric_axis_spec.BasicNumericTickProviderSpec)))(),
    EndPointsTickProviderOfnumL: () => (T.EndPointsTickProviderOfnumL = dart.constFn(end_points_tick_provider.EndPointsTickProvider$(T.numL())))(),
    NumericEndPointsTickProviderSpecL: () => (T.NumericEndPointsTickProviderSpecL = dart.constFn(dart.legacy(numeric_axis_spec.NumericEndPointsTickProviderSpec)))(),
    StaticTickProviderOfnumL: () => (T.StaticTickProviderOfnumL = dart.constFn(static_tick_provider.StaticTickProvider$(T.numL())))(),
    StaticNumericTickProviderSpecL: () => (T.StaticNumericTickProviderSpecL = dart.constFn(dart.legacy(numeric_axis_spec.StaticNumericTickProviderSpec)))(),
    BasicNumericTickFormatterSpecL: () => (T.BasicNumericTickFormatterSpecL = dart.constFn(dart.legacy(numeric_axis_spec.BasicNumericTickFormatterSpec)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = ["package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart"];
  var viewport$ = dart.privateName(numeric_axis_spec, "NumericAxisSpec.viewport");
  numeric_axis_spec.NumericAxisSpec = class NumericAxisSpec extends axis_spec.AxisSpec$(dart.legacy(core.num)) {
    get viewport() {
      return this[viewport$];
    }
    set viewport(value) {
      super.viewport = value;
    }
    static from(other, opts) {
      let t0, t0$, t0$0, t0$1, t0$2;
      let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
      let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
      let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
      let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
      let viewport = opts && 'viewport' in opts ? opts.viewport : null;
      return new numeric_axis_spec.NumericAxisSpec.new({renderSpec: (t0 = renderSpec, t0 == null ? other.renderSpec : t0), tickProviderSpec: T.NumericTickProviderSpecL().as((t0$ = tickProviderSpec, t0$ == null ? other.tickProviderSpec : t0$)), tickFormatterSpec: T.NumericTickFormatterSpecL().as((t0$0 = tickFormatterSpec, t0$0 == null ? other.tickFormatterSpec : t0$0)), showAxisLine: (t0$1 = showAxisLine, t0$1 == null ? other.showAxisLine : t0$1), viewport: (t0$2 = viewport, t0$2 == null ? other.viewport : t0$2)});
    }
    configure(axis, context, graphicsFactory) {
      T.AxisLOfnumL().as(axis);
      super.configure(axis, context, graphicsFactory);
      if (T.NumericAxisL().is(axis) && this.viewport != null) {
        axis.setScaleViewport(this.viewport);
      }
    }
    createAxis() {
      return new axis.NumericAxis.new();
    }
    _equals(other) {
      if (other == null) return false;
      return T.NumericAxisSpecL().is(other) && dart.equals(this.viewport, other.viewport) && super._equals(other);
    }
    get hashCode() {
      let hashcode = super.hashCode;
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(dart.hashCode(this.viewport));
      hashcode = dart.notNull(hashcode) * 37 + dart.notNull(super.hashCode);
      return hashcode;
    }
  };
  (numeric_axis_spec.NumericAxisSpec.new = function(opts) {
    let renderSpec = opts && 'renderSpec' in opts ? opts.renderSpec : null;
    let tickProviderSpec = opts && 'tickProviderSpec' in opts ? opts.tickProviderSpec : null;
    let tickFormatterSpec = opts && 'tickFormatterSpec' in opts ? opts.tickFormatterSpec : null;
    let showAxisLine = opts && 'showAxisLine' in opts ? opts.showAxisLine : null;
    let viewport = opts && 'viewport' in opts ? opts.viewport : null;
    this[viewport$] = viewport;
    numeric_axis_spec.NumericAxisSpec.__proto__.new.call(this, {renderSpec: renderSpec, tickProviderSpec: tickProviderSpec, tickFormatterSpec: tickFormatterSpec, showAxisLine: showAxisLine});
    ;
  }).prototype = numeric_axis_spec.NumericAxisSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericAxisSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericAxisSpec);
  dart.setMethodSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericAxisSpec.__proto__),
    createAxis: dart.fnType(dart.legacy(axis.NumericAxis), [])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericAxisSpec, I[0]);
  dart.setFieldSignature(numeric_axis_spec.NumericAxisSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.NumericAxisSpec.__proto__),
    viewport: dart.finalFieldType(dart.legacy(numeric_extents.NumericExtents))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.NumericAxisSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.NumericAxisSpec, ['hashCode']);
  numeric_axis_spec.NumericTickProviderSpec = class NumericTickProviderSpec extends axis_spec.TickProviderSpec$(dart.legacy(core.num)) {};
  (numeric_axis_spec.NumericTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericTickProviderSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickProviderSpec, I[0]);
  numeric_axis_spec.NumericTickFormatterSpec = class NumericTickFormatterSpec extends axis_spec.TickFormatterSpec$(dart.legacy(core.num)) {};
  (numeric_axis_spec.NumericTickFormatterSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericTickFormatterSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericTickFormatterSpec);
  dart.setLibraryUri(numeric_axis_spec.NumericTickFormatterSpec, I[0]);
  var zeroBound$ = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.zeroBound");
  var dataIsInWholeNumbers$ = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.dataIsInWholeNumbers");
  var desiredTickCount$ = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredTickCount");
  var desiredMinTickCount$ = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMinTickCount");
  var desiredMaxTickCount$ = dart.privateName(numeric_axis_spec, "BasicNumericTickProviderSpec.desiredMaxTickCount");
  numeric_axis_spec.BasicNumericTickProviderSpec = class BasicNumericTickProviderSpec extends core.Object {
    get zeroBound() {
      return this[zeroBound$];
    }
    set zeroBound(value) {
      super.zeroBound = value;
    }
    get dataIsInWholeNumbers() {
      return this[dataIsInWholeNumbers$];
    }
    set dataIsInWholeNumbers(value) {
      super.dataIsInWholeNumbers = value;
    }
    get desiredTickCount() {
      return this[desiredTickCount$];
    }
    set desiredTickCount(value) {
      super.desiredTickCount = value;
    }
    get desiredMinTickCount() {
      return this[desiredMinTickCount$];
    }
    set desiredMinTickCount(value) {
      super.desiredMinTickCount = value;
    }
    get desiredMaxTickCount() {
      return this[desiredMaxTickCount$];
    }
    set desiredMaxTickCount(value) {
      super.desiredMaxTickCount = value;
    }
    createTickProvider(context) {
      let t0, t0$, t0$0, t0$1;
      let provider = new numeric_tick_provider.NumericTickProvider.new();
      if (this.zeroBound != null) {
        provider.zeroBound = this.zeroBound;
      }
      if (this.dataIsInWholeNumbers != null) {
        provider.dataIsInWholeNumbers = this.dataIsInWholeNumbers;
      }
      if (this.desiredMinTickCount != null || this.desiredMaxTickCount != null || this.desiredTickCount != null) {
        provider.setTickCount((t0$ = (t0 = this.desiredMaxTickCount, t0 == null ? this.desiredTickCount : t0), t0$ == null ? 10 : t0$), (t0$1 = (t0$0 = this.desiredMinTickCount, t0$0 == null ? this.desiredTickCount : t0$0), t0$1 == null ? 2 : t0$1));
      }
      return provider;
    }
    _equals(other) {
      if (other == null) return false;
      return T.BasicNumericTickProviderSpecL().is(other) && this.zeroBound == other.zeroBound && this.dataIsInWholeNumbers == other.dataIsInWholeNumbers && this.desiredTickCount == other.desiredTickCount && this.desiredMinTickCount == other.desiredMinTickCount && this.desiredMaxTickCount == other.desiredMaxTickCount;
    }
    get hashCode() {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7;
      let hashcode = (t0$ = (t0 = this.zeroBound, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$);
      hashcode = (t0$1 = dart.notNull(hashcode) * 37 + dart.notNull((t0$0 = this.dataIsInWholeNumbers, t0$0 == null ? null : dart.hashCode(t0$0))), t0$1 === null ? 0 : t0$1);
      hashcode = (t0$3 = dart.notNull(hashcode) * 37 + dart.notNull((t0$2 = this.desiredTickCount, t0$2 == null ? null : dart.hashCode(t0$2))), t0$3 === null ? 0 : t0$3);
      hashcode = (t0$5 = dart.notNull(hashcode) * 37 + dart.notNull((t0$4 = this.desiredMinTickCount, t0$4 == null ? null : dart.hashCode(t0$4))), t0$5 === null ? 0 : t0$5);
      hashcode = (t0$7 = dart.notNull(hashcode) * 37 + dart.notNull((t0$6 = this.desiredMaxTickCount, t0$6 == null ? null : dart.hashCode(t0$6))), t0$7 === null ? 0 : t0$7);
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickProviderSpec.new = function(opts) {
    let zeroBound = opts && 'zeroBound' in opts ? opts.zeroBound : null;
    let dataIsInWholeNumbers = opts && 'dataIsInWholeNumbers' in opts ? opts.dataIsInWholeNumbers : null;
    let desiredTickCount = opts && 'desiredTickCount' in opts ? opts.desiredTickCount : null;
    let desiredMinTickCount = opts && 'desiredMinTickCount' in opts ? opts.desiredMinTickCount : null;
    let desiredMaxTickCount = opts && 'desiredMaxTickCount' in opts ? opts.desiredMaxTickCount : null;
    this[zeroBound$] = zeroBound;
    this[dataIsInWholeNumbers$] = dataIsInWholeNumbers;
    this[desiredTickCount$] = desiredTickCount;
    this[desiredMinTickCount$] = desiredMinTickCount;
    this[desiredMaxTickCount$] = desiredMaxTickCount;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.BasicNumericTickProviderSpec);
  numeric_axis_spec.BasicNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(dart.legacy(numeric_tick_provider.NumericTickProvider), [dart.legacy(chart_context.ChartContext)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getGetters(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickProviderSpec, I[0]);
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickProviderSpec.__proto__),
    zeroBound: dart.finalFieldType(dart.legacy(core.bool)),
    dataIsInWholeNumbers: dart.finalFieldType(dart.legacy(core.bool)),
    desiredTickCount: dart.finalFieldType(dart.legacy(core.int)),
    desiredMinTickCount: dart.finalFieldType(dart.legacy(core.int)),
    desiredMaxTickCount: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickProviderSpec, ['hashCode']);
  numeric_axis_spec.NumericEndPointsTickProviderSpec = class NumericEndPointsTickProviderSpec extends core.Object {
    createTickProvider(context) {
      return new (T.EndPointsTickProviderOfnumL()).new();
    }
    _equals(other) {
      if (other == null) return false;
      return T.NumericEndPointsTickProviderSpecL().is(other);
    }
  };
  (numeric_axis_spec.NumericEndPointsTickProviderSpec.new = function() {
    ;
  }).prototype = numeric_axis_spec.NumericEndPointsTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.NumericEndPointsTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.NumericEndPointsTickProviderSpec);
  numeric_axis_spec.NumericEndPointsTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.NumericEndPointsTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(dart.legacy(end_points_tick_provider.EndPointsTickProvider$(dart.legacy(core.num))), [dart.legacy(chart_context.ChartContext)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(numeric_axis_spec.NumericEndPointsTickProviderSpec, I[0]);
  dart.defineExtensionMethods(numeric_axis_spec.NumericEndPointsTickProviderSpec, ['_equals']);
  var tickSpecs$ = dart.privateName(numeric_axis_spec, "StaticNumericTickProviderSpec.tickSpecs");
  numeric_axis_spec.StaticNumericTickProviderSpec = class StaticNumericTickProviderSpec extends core.Object {
    get tickSpecs() {
      return this[tickSpecs$];
    }
    set tickSpecs(value) {
      super.tickSpecs = value;
    }
    createTickProvider(context) {
      return new (T.StaticTickProviderOfnumL()).new(this.tickSpecs);
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.StaticNumericTickProviderSpecL().is(other) && dart.equals(this.tickSpecs, other.tickSpecs);
    }
    get hashCode() {
      return dart.hashCode(this.tickSpecs);
    }
  };
  (numeric_axis_spec.StaticNumericTickProviderSpec.new = function(tickSpecs) {
    this[tickSpecs$] = tickSpecs;
    ;
  }).prototype = numeric_axis_spec.StaticNumericTickProviderSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.StaticNumericTickProviderSpec);
  dart.addTypeCaches(numeric_axis_spec.StaticNumericTickProviderSpec);
  numeric_axis_spec.StaticNumericTickProviderSpec[dart.implements] = () => [numeric_axis_spec.NumericTickProviderSpec];
  dart.setMethodSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    createTickProvider: dart.fnType(dart.legacy(static_tick_provider.StaticTickProvider$(dart.legacy(core.num))), [dart.legacy(chart_context.ChartContext)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getGetters(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(numeric_axis_spec.StaticNumericTickProviderSpec, I[0]);
  dart.setFieldSignature(numeric_axis_spec.StaticNumericTickProviderSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.StaticNumericTickProviderSpec.__proto__),
    tickSpecs: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(tick_spec.TickSpec$(dart.legacy(core.num))))))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.StaticNumericTickProviderSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.StaticNumericTickProviderSpec, ['hashCode']);
  var formatter$ = dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.formatter");
  var numberFormat$ = dart.privateName(numeric_axis_spec, "BasicNumericTickFormatterSpec.numberFormat");
  numeric_axis_spec.BasicNumericTickFormatterSpec = class BasicNumericTickFormatterSpec extends core.Object {
    get formatter() {
      return this[formatter$];
    }
    set formatter(value) {
      super.formatter = value;
    }
    get numberFormat() {
      return this[numberFormat$];
    }
    set numberFormat(value) {
      super.numberFormat = value;
    }
    createTickFormatter(context) {
      return this.numberFormat != null ? tick_formatter.NumericTickFormatter.fromNumberFormat(this.numberFormat) : tick_formatter.NumericTickFormatter.new({formatter: this.formatter});
    }
    _equals(other) {
      if (other == null) return false;
      return this === other || T.BasicNumericTickFormatterSpecL().is(other) && dart.equals(this.formatter, other.formatter) && dart.equals(this.numberFormat, other.numberFormat);
    }
    get hashCode() {
      let hashcode = dart.hashCode(this.formatter);
      hashcode = dart.notNull(hashcode) * 37 * dart.notNull(dart.hashCode(this.numberFormat));
      return hashcode;
    }
  };
  (numeric_axis_spec.BasicNumericTickFormatterSpec.new = function(formatter) {
    this[formatter$] = formatter;
    this[numberFormat$] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  (numeric_axis_spec.BasicNumericTickFormatterSpec.fromNumberFormat = function(numberFormat) {
    this[numberFormat$] = numberFormat;
    this[formatter$] = null;
    ;
  }).prototype = numeric_axis_spec.BasicNumericTickFormatterSpec.prototype;
  dart.addTypeTests(numeric_axis_spec.BasicNumericTickFormatterSpec);
  dart.addTypeCaches(numeric_axis_spec.BasicNumericTickFormatterSpec);
  numeric_axis_spec.BasicNumericTickFormatterSpec[dart.implements] = () => [numeric_axis_spec.NumericTickFormatterSpec];
  dart.setMethodSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getMethods(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    createTickFormatter: dart.fnType(dart.legacy(tick_formatter.NumericTickFormatter), [dart.legacy(chart_context.ChartContext)]),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getGetters(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(numeric_axis_spec.BasicNumericTickFormatterSpec, I[0]);
  dart.setFieldSignature(numeric_axis_spec.BasicNumericTickFormatterSpec, () => ({
    __proto__: dart.getFields(numeric_axis_spec.BasicNumericTickFormatterSpec.__proto__),
    formatter: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.String), [dart.legacy(core.num)]))),
    numberFormat: dart.finalFieldType(dart.legacy(intl.NumberFormat))
  }));
  dart.defineExtensionMethods(numeric_axis_spec.BasicNumericTickFormatterSpec, ['_equals']);
  dart.defineExtensionAccessors(numeric_axis_spec.BasicNumericTickFormatterSpec, ['hashCode']);
  dart.trackLibraries("packages/charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart", {
    "package:charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart": numeric_axis_spec
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["numeric_axis_spec.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../../D:/packages/charts_common/src/chart/cartesian/axis/spec/numeric_axis_spec.dart.lib.js"}');
  // Exports:
  return {
    src__chart__cartesian__axis__spec__numeric_axis_spec: numeric_axis_spec
  };
}));

//# sourceMappingURL=numeric_axis_spec.dart.lib.js.map
