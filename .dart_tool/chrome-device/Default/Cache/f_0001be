define(['dart_sdk', 'packages/charts_common/src/common/color.dart'], (function load__packages__charts_common__src__chart__common__canvas_shapes_dart(dart_sdk, packages__charts_common__src__common__color$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const color = packages__charts_common__src__common__color$46dart.src__common__color;
  var canvas_shapes = Object.create(dart.library);
  var chart_canvas = Object.create(dart.library);
  var $first = dartx.first;
  var $left = dartx.left;
  var $top = dartx.top;
  var $right = dartx.right;
  var $bottom = dartx.bottom;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $toString = dartx.toString;
  var $round = dartx.round;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    RectangleOfintL: () => (T.RectangleOfintL = dart.constFn(math.Rectangle$(T.intL())))(),
    FillPatternTypeL: () => (T.FillPatternTypeL = dart.constFn(dart.legacy(chart_canvas.FillPatternType)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: chart_canvas.FillPatternType.prototype,
        [_name$]: "FillPatternType.forwardHatch",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: chart_canvas.FillPatternType.prototype,
        [_name$]: "FillPatternType.solid",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.constList([C[0] || CT.C0, C[1] || CT.C1], T.FillPatternTypeL());
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:charts_common/src/chart/common/canvas_shapes.dart",
    "package:charts_common/src/chart/common/chart_canvas.dart"
  ];
  var bounds$ = dart.privateName(canvas_shapes, "CanvasRect.bounds");
  var dashPattern$ = dart.privateName(canvas_shapes, "CanvasRect.dashPattern");
  var fill$ = dart.privateName(canvas_shapes, "CanvasRect.fill");
  var pattern$ = dart.privateName(canvas_shapes, "CanvasRect.pattern");
  var stroke$ = dart.privateName(canvas_shapes, "CanvasRect.stroke");
  var strokeWidthPx$ = dart.privateName(canvas_shapes, "CanvasRect.strokeWidthPx");
  canvas_shapes.CanvasRect = class CanvasRect extends core.Object {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      super.bounds = value;
    }
    get dashPattern() {
      return this[dashPattern$];
    }
    set dashPattern(value) {
      super.dashPattern = value;
    }
    get fill() {
      return this[fill$];
    }
    set fill(value) {
      super.fill = value;
    }
    get pattern() {
      return this[pattern$];
    }
    set pattern(value) {
      super.pattern = value;
    }
    get stroke() {
      return this[stroke$];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx$];
    }
    set strokeWidthPx(value) {
      super.strokeWidthPx = value;
    }
  };
  (canvas_shapes.CanvasRect.new = function(bounds, opts) {
    let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
    let fill = opts && 'fill' in opts ? opts.fill : null;
    let pattern = opts && 'pattern' in opts ? opts.pattern : null;
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : null;
    this[bounds$] = bounds;
    this[dashPattern$] = dashPattern;
    this[fill$] = fill;
    this[pattern$] = pattern;
    this[stroke$] = stroke;
    this[strokeWidthPx$] = strokeWidthPx;
    ;
  }).prototype = canvas_shapes.CanvasRect.prototype;
  dart.addTypeTests(canvas_shapes.CanvasRect);
  dart.addTypeCaches(canvas_shapes.CanvasRect);
  dart.setLibraryUri(canvas_shapes.CanvasRect, I[0]);
  dart.setFieldSignature(canvas_shapes.CanvasRect, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasRect.__proto__),
    bounds: dart.finalFieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int)))),
    dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    fill: dart.finalFieldType(dart.legacy(color.Color)),
    pattern: dart.finalFieldType(dart.legacy(chart_canvas.FillPatternType)),
    stroke: dart.finalFieldType(dart.legacy(color.Color)),
    strokeWidthPx: dart.finalFieldType(dart.legacy(core.double))
  }));
  var segments$ = dart.privateName(canvas_shapes, "CanvasBarStack.segments");
  var radius$ = dart.privateName(canvas_shapes, "CanvasBarStack.radius");
  var stackedBarPadding$ = dart.privateName(canvas_shapes, "CanvasBarStack.stackedBarPadding");
  var roundTopLeft$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundTopLeft");
  var roundTopRight$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundTopRight");
  var roundBottomLeft$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundBottomLeft");
  var roundBottomRight$ = dart.privateName(canvas_shapes, "CanvasBarStack.roundBottomRight");
  var fullStackRect$ = dart.privateName(canvas_shapes, "CanvasBarStack.fullStackRect");
  canvas_shapes.CanvasBarStack = class CanvasBarStack extends core.Object {
    get segments() {
      return this[segments$];
    }
    set segments(value) {
      super.segments = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get stackedBarPadding() {
      return this[stackedBarPadding$];
    }
    set stackedBarPadding(value) {
      super.stackedBarPadding = value;
    }
    get roundTopLeft() {
      return this[roundTopLeft$];
    }
    set roundTopLeft(value) {
      super.roundTopLeft = value;
    }
    get roundTopRight() {
      return this[roundTopRight$];
    }
    set roundTopRight(value) {
      super.roundTopRight = value;
    }
    get roundBottomLeft() {
      return this[roundBottomLeft$];
    }
    set roundBottomLeft(value) {
      super.roundBottomLeft = value;
    }
    get roundBottomRight() {
      return this[roundBottomRight$];
    }
    set roundBottomRight(value) {
      super.roundBottomRight = value;
    }
    get fullStackRect() {
      return this[fullStackRect$];
    }
    set fullStackRect(value) {
      super.fullStackRect = value;
    }
    static new(segments, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let stackedBarPadding = opts && 'stackedBarPadding' in opts ? opts.stackedBarPadding : null;
      let roundTopLeft = opts && 'roundTopLeft' in opts ? opts.roundTopLeft : null;
      let roundTopRight = opts && 'roundTopRight' in opts ? opts.roundTopRight : null;
      let roundBottomLeft = opts && 'roundBottomLeft' in opts ? opts.roundBottomLeft : null;
      let roundBottomRight = opts && 'roundBottomRight' in opts ? opts.roundBottomRight : null;
      let firstBarBounds = segments[$first].bounds;
      let left = firstBarBounds[$left];
      let top = firstBarBounds[$top];
      let right = firstBarBounds[$right];
      let bottom = firstBarBounds[$bottom];
      for (let barIndex = 1; barIndex < dart.notNull(segments[$length]); barIndex = barIndex + 1) {
        let bounds = segments[$_get](barIndex).bounds;
        left = math.min(T.intL(), left, bounds[$left]);
        top = math.min(T.intL(), top, bounds[$top]);
        right = math.max(T.intL(), right, bounds[$right]);
        bottom = math.max(T.intL(), bottom, bounds[$bottom]);
      }
      let width = dart.notNull(right) - dart.notNull(left);
      let height = dart.notNull(bottom) - dart.notNull(top);
      let fullStackRect = new (T.RectangleOfintL()).new(left, top, width, height);
      return new canvas_shapes.CanvasBarStack._internal(segments, {radius: radius, stackedBarPadding: stackedBarPadding, roundTopLeft: roundTopLeft, roundTopRight: roundTopRight, roundBottomLeft: roundBottomLeft, roundBottomRight: roundBottomRight, fullStackRect: fullStackRect});
    }
  };
  (canvas_shapes.CanvasBarStack._internal = function(segments, opts) {
    let radius = opts && 'radius' in opts ? opts.radius : null;
    let stackedBarPadding = opts && 'stackedBarPadding' in opts ? opts.stackedBarPadding : 1;
    let roundTopLeft = opts && 'roundTopLeft' in opts ? opts.roundTopLeft : false;
    let roundTopRight = opts && 'roundTopRight' in opts ? opts.roundTopRight : false;
    let roundBottomLeft = opts && 'roundBottomLeft' in opts ? opts.roundBottomLeft : false;
    let roundBottomRight = opts && 'roundBottomRight' in opts ? opts.roundBottomRight : false;
    let fullStackRect = opts && 'fullStackRect' in opts ? opts.fullStackRect : null;
    this[segments$] = segments;
    this[radius$] = radius;
    this[stackedBarPadding$] = stackedBarPadding;
    this[roundTopLeft$] = roundTopLeft;
    this[roundTopRight$] = roundTopRight;
    this[roundBottomLeft$] = roundBottomLeft;
    this[roundBottomRight$] = roundBottomRight;
    this[fullStackRect$] = fullStackRect;
    ;
  }).prototype = canvas_shapes.CanvasBarStack.prototype;
  dart.addTypeTests(canvas_shapes.CanvasBarStack);
  dart.addTypeCaches(canvas_shapes.CanvasBarStack);
  dart.setLibraryUri(canvas_shapes.CanvasBarStack, I[0]);
  dart.setFieldSignature(canvas_shapes.CanvasBarStack, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasBarStack.__proto__),
    segments: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(canvas_shapes.CanvasRect)))),
    radius: dart.finalFieldType(dart.legacy(core.int)),
    stackedBarPadding: dart.finalFieldType(dart.legacy(core.int)),
    roundTopLeft: dart.finalFieldType(dart.legacy(core.bool)),
    roundTopRight: dart.finalFieldType(dart.legacy(core.bool)),
    roundBottomLeft: dart.finalFieldType(dart.legacy(core.bool)),
    roundBottomRight: dart.finalFieldType(dart.legacy(core.bool)),
    fullStackRect: dart.finalFieldType(dart.legacy(math.Rectangle$(dart.legacy(core.int))))
  }));
  var slices$ = dart.privateName(canvas_shapes, "CanvasPie.slices");
  var center$ = dart.privateName(canvas_shapes, "CanvasPie.center");
  var radius$0 = dart.privateName(canvas_shapes, "CanvasPie.radius");
  var innerRadius$ = dart.privateName(canvas_shapes, "CanvasPie.innerRadius");
  var stroke$0 = dart.privateName(canvas_shapes, "CanvasPie.stroke");
  var strokeWidthPx$0 = dart.privateName(canvas_shapes, "CanvasPie.strokeWidthPx");
  canvas_shapes.CanvasPie = class CanvasPie extends core.Object {
    get slices() {
      return this[slices$];
    }
    set slices(value) {
      super.slices = value;
    }
    get center() {
      return this[center$];
    }
    set center(value) {
      this[center$] = value;
    }
    get radius() {
      return this[radius$0];
    }
    set radius(value) {
      this[radius$0] = value;
    }
    get innerRadius() {
      return this[innerRadius$];
    }
    set innerRadius(value) {
      this[innerRadius$] = value;
    }
    get stroke() {
      return this[stroke$0];
    }
    set stroke(value) {
      super.stroke = value;
    }
    get strokeWidthPx() {
      return this[strokeWidthPx$0];
    }
    set strokeWidthPx(value) {
      this[strokeWidthPx$0] = value;
    }
  };
  (canvas_shapes.CanvasPie.new = function(slices, center, radius, innerRadius, opts) {
    let stroke = opts && 'stroke' in opts ? opts.stroke : null;
    let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
    this[slices$] = slices;
    this[center$] = center;
    this[radius$0] = radius;
    this[innerRadius$] = innerRadius;
    this[stroke$0] = stroke;
    this[strokeWidthPx$0] = strokeWidthPx;
    ;
  }).prototype = canvas_shapes.CanvasPie.prototype;
  dart.addTypeTests(canvas_shapes.CanvasPie);
  dart.addTypeCaches(canvas_shapes.CanvasPie);
  dart.setLibraryUri(canvas_shapes.CanvasPie, I[0]);
  dart.setFieldSignature(canvas_shapes.CanvasPie, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasPie.__proto__),
    slices: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(canvas_shapes.CanvasPieSlice)))),
    center: dart.fieldType(dart.legacy(math.Point$(core.num))),
    radius: dart.fieldType(dart.legacy(core.double)),
    innerRadius: dart.fieldType(dart.legacy(core.double)),
    stroke: dart.finalFieldType(dart.legacy(color.Color)),
    strokeWidthPx: dart.fieldType(dart.legacy(core.double))
  }));
  var startAngle$ = dart.privateName(canvas_shapes, "CanvasPieSlice.startAngle");
  var endAngle$ = dart.privateName(canvas_shapes, "CanvasPieSlice.endAngle");
  var fill$0 = dart.privateName(canvas_shapes, "CanvasPieSlice.fill");
  canvas_shapes.CanvasPieSlice = class CanvasPieSlice extends core.Object {
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      this[startAngle$] = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      this[endAngle$] = value;
    }
    get fill() {
      return this[fill$0];
    }
    set fill(value) {
      this[fill$0] = value;
    }
  };
  (canvas_shapes.CanvasPieSlice.new = function(startAngle, endAngle, opts) {
    let fill = opts && 'fill' in opts ? opts.fill : null;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[fill$0] = fill;
    ;
  }).prototype = canvas_shapes.CanvasPieSlice.prototype;
  dart.addTypeTests(canvas_shapes.CanvasPieSlice);
  dart.addTypeCaches(canvas_shapes.CanvasPieSlice);
  dart.setLibraryUri(canvas_shapes.CanvasPieSlice, I[0]);
  dart.setFieldSignature(canvas_shapes.CanvasPieSlice, () => ({
    __proto__: dart.getFields(canvas_shapes.CanvasPieSlice.__proto__),
    startAngle: dart.fieldType(dart.legacy(core.double)),
    endAngle: dart.fieldType(dart.legacy(core.double)),
    fill: dart.fieldType(dart.legacy(color.Color))
  }));
  chart_canvas.ChartCanvas = class ChartCanvas extends core.Object {};
  (chart_canvas.ChartCanvas.new = function() {
    ;
  }).prototype = chart_canvas.ChartCanvas.prototype;
  dart.addTypeTests(chart_canvas.ChartCanvas);
  dart.addTypeCaches(chart_canvas.ChartCanvas);
  dart.setLibraryUri(chart_canvas.ChartCanvas, I[1]);
  var _name$ = dart.privateName(chart_canvas, "_name");
  chart_canvas.FillPatternType = class FillPatternType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (chart_canvas.FillPatternType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = chart_canvas.FillPatternType.prototype;
  dart.addTypeTests(chart_canvas.FillPatternType);
  dart.addTypeCaches(chart_canvas.FillPatternType);
  dart.setMethodSignature(chart_canvas.FillPatternType, () => ({
    __proto__: dart.getMethods(chart_canvas.FillPatternType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(chart_canvas.FillPatternType, I[1]);
  dart.setFieldSignature(chart_canvas.FillPatternType, () => ({
    __proto__: dart.getFields(chart_canvas.FillPatternType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(chart_canvas.FillPatternType, ['toString']);
  chart_canvas.FillPatternType.forwardHatch = C[0] || CT.C0;
  chart_canvas.FillPatternType.solid = C[1] || CT.C1;
  chart_canvas.FillPatternType.values = C[2] || CT.C2;
  chart_canvas.getAnimatedColor = function getAnimatedColor(previous, target, animationPercent) {
    let r = ((dart.notNull(target.r) - dart.notNull(previous.r)) * dart.notNull(animationPercent) + dart.notNull(previous.r))[$round]();
    let g = ((dart.notNull(target.g) - dart.notNull(previous.g)) * dart.notNull(animationPercent) + dart.notNull(previous.g))[$round]();
    let b = ((dart.notNull(target.b) - dart.notNull(previous.b)) * dart.notNull(animationPercent) + dart.notNull(previous.b))[$round]();
    let a = ((dart.notNull(target.a) - dart.notNull(previous.a)) * dart.notNull(animationPercent) + dart.notNull(previous.a))[$round]();
    return new color.Color.new({a: a, r: r, g: g, b: b});
  };
  dart.trackLibraries("packages/charts_common/src/chart/common/canvas_shapes.dart", {
    "package:charts_common/src/chart/common/canvas_shapes.dart": canvas_shapes,
    "package:charts_common/src/chart/common/chart_canvas.dart": chart_canvas
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["canvas_shapes.dart","chart_canvas.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAsBuB;;;;;;IACL;;;;;;IACJ;;;;;;IACU;;;;;;IACV;;;;;;IACC;;;;;;;2CAEG;QACN;QACD;QACA;QACA;QACA;IALO;IACN;IACD;IACA;IACA;IACA;;EAAe;;;;;;;;;;;;;;;;;;;;;;IAKD;;;;;;IACb;;;;;;IACA;;;;;;IACC;;;;;;IACA;;;;;;IACA;;;;;;IACA;;;;;;IACU;;;;;;eAEmB;UAC/B;UACD;UACC;UACA;UACA;UACA;AACD,2BAAiB,AAAS,AAAM,QAAP;AAG3B,iBAAO,AAAe,cAAD;AACrB,gBAAM,AAAe,cAAD;AACpB,kBAAQ,AAAe,cAAD;AACtB,mBAAS,AAAe,cAAD;AAE3B,eAAS,WAAW,GAAG,AAAS,QAAD,gBAAG,AAAS,QAAD,YAAS,WAAA,AAAQ,QAAA;AACnD,qBAAS,AAAQ,AAAW,QAAX,QAAC,QAAQ;AAEH,QAA7B,OAAO,mBAAI,IAAI,EAAE,AAAO,MAAD;AACG,QAA1B,MAAM,mBAAI,GAAG,EAAE,AAAO,MAAD;AACW,QAAhC,QAAQ,mBAAI,KAAK,EAAE,AAAO,MAAD;AACU,QAAnC,SAAS,mBAAI,MAAM,EAAE,AAAO,MAAD;;AAGvB,kBAAc,aAAN,KAAK,iBAAG,IAAI;AACpB,mBAAgB,aAAP,MAAM,iBAAG,GAAG;AACrB,0BAAoB,8BAAU,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM;AAE5D,YAAW,4CACT,QAAQ,WACA,MAAM,qBACK,iBAAiB,gBACtB,YAAY,iBACX,aAAa,mBACX,eAAe,oBACd,gBAAgB,iBACnB,aAAa;IAEhC;;qDAGO;QACA;QACA;QACA;QACA;QACA;QACA;QACA;IAPA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;IAKyB;;;;;;IACrB;;;;;;IACC;;;;;;IACA;;;;;;IAGK;;;;;;IAGL;;;;;;;0CAEQ,QAAa,QAAa,QAAa;QAC5C;QAAa;IADR;IAAa;IAAa;IAAa;IAC5C;IAAa;;EAAqB;;;;;;;;;;;;;;;;;IAKrC;;;;;;IACA;;;;;;IACD;;;;;;;+CAEc,YAAiB;QAAgB;IAAjC;IAAiB;IAAgB;;EAAM;;;;;;;;;;;;;EC0B7D;;;;;;;;IAiB2C;;sDAAtC;;;;EAAsC;;;;;;;;;;;;;;;;;;4DAfd,UAAgB,QAAe;AACtD,YAAgE,CAAlC,AAAoB,CAAlC,aAAT,AAAO,MAAD,mBAAK,AAAS,QAAD,oBAAM,gBAAgB,iBAAI,AAAS,QAAD;AAC5D,YAAgE,CAAlC,AAAoB,CAAlC,aAAT,AAAO,MAAD,mBAAK,AAAS,QAAD,oBAAM,gBAAgB,iBAAI,AAAS,QAAD;AAC5D,YAAgE,CAAlC,AAAoB,CAAlC,aAAT,AAAO,MAAD,mBAAK,AAAS,QAAD,oBAAM,gBAAgB,iBAAI,AAAS,QAAD;AAC5D,YAAgE,CAAlC,AAAoB,CAAlC,aAAT,AAAO,MAAD,mBAAK,AAAS,QAAD,oBAAM,gBAAgB,iBAAI,AAAS,QAAD;AAEhE,UAAW,yBAAS,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;EACzC","file":"../../../../../../../../../../../D:/packages/charts_common/src/chart/common/canvas_shapes.dart.lib.js"}');
  // Exports:
  return {
    src__chart__common__canvas_shapes: canvas_shapes,
    src__chart__common__chart_canvas: chart_canvas
  };
}));

//# sourceMappingURL=canvas_shapes.dart.lib.js.map
