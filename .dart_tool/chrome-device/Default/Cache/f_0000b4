define(['dart_sdk', 'packages/charts_common/src/chart/common/series_renderer_config.dart', 'packages/charts_common/src/chart/cartesian/axis/simple_ordinal_scale.dart', 'packages/collection/src/equality.dart', 'packages/charts_common/src/chart/layout/layout_view.dart', 'packages/charts_common/src/chart/common/canvas_shapes.dart'], (function load__packages__charts_common__src__chart__bar__base_bar_renderer_config_dart(dart_sdk, packages__charts_common__src__chart__common__series_renderer_config$46dart, packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart, packages__collection__src__equality$46dart, packages__charts_common__src__chart__layout__layout_view$46dart, packages__charts_common__src__chart__common__canvas_shapes$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const series_renderer_config = packages__charts_common__src__chart__common__series_renderer_config$46dart.src__chart__common__series_renderer_config;
  const symbol_renderer = packages__charts_common__src__chart__cartesian__axis__simple_ordinal_scale$46dart.src__common__symbol_renderer;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const layout_view = packages__charts_common__src__chart__layout__layout_view$46dart.src__chart__layout__layout_view;
  const chart_canvas = packages__charts_common__src__chart__common__canvas_shapes$46dart.src__chart__common__chart_canvas;
  var base_bar_renderer_config = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $toString = dartx.toString;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    BaseBarRendererConfigL: () => (T.BaseBarRendererConfigL = dart.constFn(dart.legacy(base_bar_renderer_config.BaseBarRendererConfig)))(),
    ListL: () => (T.ListL = dart.constFn(dart.legacy(core.List)))(),
    BarGroupingTypeL: () => (T.BarGroupingTypeL = dart.constFn(dart.legacy(base_bar_renderer_config.BarGroupingType)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$]: "BarGroupingType.grouped",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$]: "BarGroupingType.groupedStacked",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: base_bar_renderer_config.BarGroupingType.prototype,
        [_name$]: "BarGroupingType.stacked",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.BarGroupingTypeL());
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = ["package:charts_common/src/chart/bar/base_bar_renderer_config.dart"];
  var customRendererId$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.customRendererId");
  var symbolRenderer$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.symbolRenderer");
  var dashPattern$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.dashPattern");
  var groupingType$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.groupingType");
  var layoutPaintOrder$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.layoutPaintOrder");
  var minBarLengthPx$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.minBarLengthPx");
  var fillPattern$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.fillPattern");
  var stackHorizontalSeparator$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.stackHorizontalSeparator");
  var strokeWidthPx$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.strokeWidthPx");
  var weightPattern$ = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.weightPattern");
  var rendererAttributes = dart.privateName(base_bar_renderer_config, "BaseBarRendererConfig.rendererAttributes");
  var _name$ = dart.privateName(base_bar_renderer_config, "_name");
  const _is_BaseBarRendererConfig_default = Symbol('_is_BaseBarRendererConfig_default');
  base_bar_renderer_config.BaseBarRendererConfig$ = dart.generic(D => {
    class BaseBarRendererConfig extends layout_view.LayoutViewConfig {
      get customRendererId() {
        return this[customRendererId$];
      }
      set customRendererId(value) {
        super.customRendererId = value;
      }
      get symbolRenderer() {
        return this[symbolRenderer$];
      }
      set symbolRenderer(value) {
        super.symbolRenderer = value;
      }
      get dashPattern() {
        return this[dashPattern$];
      }
      set dashPattern(value) {
        super.dashPattern = value;
      }
      get groupingType() {
        return this[groupingType$];
      }
      set groupingType(value) {
        super.groupingType = value;
      }
      get layoutPaintOrder() {
        return this[layoutPaintOrder$];
      }
      set layoutPaintOrder(value) {
        super.layoutPaintOrder = value;
      }
      get minBarLengthPx() {
        return this[minBarLengthPx$];
      }
      set minBarLengthPx(value) {
        super.minBarLengthPx = value;
      }
      get fillPattern() {
        return this[fillPattern$];
      }
      set fillPattern(value) {
        super.fillPattern = value;
      }
      get stackHorizontalSeparator() {
        return this[stackHorizontalSeparator$];
      }
      set stackHorizontalSeparator(value) {
        super.stackHorizontalSeparator = value;
      }
      get strokeWidthPx() {
        return this[strokeWidthPx$];
      }
      set strokeWidthPx(value) {
        super.strokeWidthPx = value;
      }
      get weightPattern() {
        return this[weightPattern$];
      }
      set weightPattern(value) {
        super.weightPattern = value;
      }
      get rendererAttributes() {
        return this[rendererAttributes];
      }
      set rendererAttributes(value) {
        super.rendererAttributes = value;
      }
      get grouped() {
        return this.groupingType == base_bar_renderer_config.BarGroupingType.grouped || this.groupingType == base_bar_renderer_config.BarGroupingType.groupedStacked;
      }
      get stacked() {
        return this.groupingType == base_bar_renderer_config.BarGroupingType.stacked || this.groupingType == base_bar_renderer_config.BarGroupingType.groupedStacked;
      }
      _equals(other) {
        if (other == null) return false;
        if (this === other) {
          return true;
        }
        if (!T.BaseBarRendererConfigL().is(other)) {
          return false;
        }
        return dart.equals(dart.dload(other, 'customRendererId'), this.customRendererId) && dart.equals(dart.dload(other, 'dashPattern'), this.dashPattern) && dart.equals(dart.dload(other, 'fillPattern'), this.fillPattern) && dart.equals(dart.dload(other, 'groupingType'), this.groupingType) && dart.equals(dart.dload(other, 'minBarLengthPx'), this.minBarLengthPx) && dart.equals(dart.dload(other, 'stackHorizontalSeparator'), this.stackHorizontalSeparator) && dart.equals(dart.dload(other, 'strokeWidthPx'), this.strokeWidthPx) && dart.equals(dart.dload(other, 'symbolRenderer'), this.symbolRenderer) && dart.test(new equality.ListEquality.new().equals(T.ListL().as(dart.dload(other, 'weightPattern')), this.weightPattern));
      }
      get hashcode() {
        let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4, t0$5, t0$6, t0$7, t0$8, t0$9, t0$10, t0$11, t0$12, t0$13, t0$14, t0$15;
        let hash = 1;
        hash = hash * 31 + dart.notNull((t0$ = (t0 = this.customRendererId, t0 == null ? null : dart.hashCode(t0)), t0$ == null ? 0 : t0$));
        hash = hash * 31 + dart.notNull((t0$1 = (t0$0 = this.dashPattern, t0$0 == null ? null : dart.hashCode(t0$0)), t0$1 == null ? 0 : t0$1));
        hash = hash * 31 + dart.notNull((t0$3 = (t0$2 = this.fillPattern, t0$2 == null ? null : dart.hashCode(t0$2)), t0$3 == null ? 0 : t0$3));
        hash = hash * 31 + dart.notNull((t0$5 = (t0$4 = this.groupingType, t0$4 == null ? null : dart.hashCode(t0$4)), t0$5 == null ? 0 : t0$5));
        hash = hash * 31 + dart.notNull((t0$7 = (t0$6 = this.minBarLengthPx, t0$6 == null ? null : dart.hashCode(t0$6)), t0$7 == null ? 0 : t0$7));
        hash = hash * 31 + dart.notNull((t0$9 = (t0$8 = this.stackHorizontalSeparator, t0$8 == null ? null : dart.hashCode(t0$8)), t0$9 == null ? 0 : t0$9));
        hash = hash * 31 + dart.notNull((t0$11 = (t0$10 = this.strokeWidthPx, t0$10 == null ? null : dart.hashCode(t0$10)), t0$11 == null ? 0 : t0$11));
        hash = hash * 31 + dart.notNull((t0$13 = (t0$12 = this.symbolRenderer, t0$12 == null ? null : dart.hashCode(t0$12)), t0$13 == null ? 0 : t0$13));
        hash = hash * 31 + dart.notNull((t0$15 = (t0$14 = this.weightPattern, t0$14 == null ? null : dart.hashCode(t0$14)), t0$15 == null ? 0 : t0$15));
        return hash;
      }
    }
    (BaseBarRendererConfig.new = function(opts) {
      let t0;
      let customRendererId = opts && 'customRendererId' in opts ? opts.customRendererId : null;
      let dashPattern = opts && 'dashPattern' in opts ? opts.dashPattern : null;
      let groupingType = opts && 'groupingType' in opts ? opts.groupingType : C[0] || CT.C0;
      let layoutPaintOrder = opts && 'layoutPaintOrder' in opts ? opts.layoutPaintOrder : null;
      let minBarLengthPx = opts && 'minBarLengthPx' in opts ? opts.minBarLengthPx : 0;
      let fillPattern = opts && 'fillPattern' in opts ? opts.fillPattern : null;
      let stackHorizontalSeparator = opts && 'stackHorizontalSeparator' in opts ? opts.stackHorizontalSeparator : null;
      let strokeWidthPx = opts && 'strokeWidthPx' in opts ? opts.strokeWidthPx : 0;
      let symbolRenderer = opts && 'symbolRenderer' in opts ? opts.symbolRenderer : null;
      let weightPattern = opts && 'weightPattern' in opts ? opts.weightPattern : null;
      this[rendererAttributes] = new series_renderer_config.RendererAttributes.new();
      this[customRendererId$] = customRendererId;
      this[dashPattern$] = dashPattern;
      this[groupingType$] = groupingType;
      this[layoutPaintOrder$] = layoutPaintOrder;
      this[minBarLengthPx$] = minBarLengthPx;
      this[fillPattern$] = fillPattern;
      this[stackHorizontalSeparator$] = stackHorizontalSeparator;
      this[strokeWidthPx$] = strokeWidthPx;
      this[weightPattern$] = weightPattern;
      this[symbolRenderer$] = (t0 = symbolRenderer, t0 == null ? new symbol_renderer.RoundedRectSymbolRenderer.new() : t0);
      BaseBarRendererConfig.__proto__.new.call(this);
      ;
    }).prototype = BaseBarRendererConfig.prototype;
    dart.addTypeTests(BaseBarRendererConfig);
    BaseBarRendererConfig.prototype[_is_BaseBarRendererConfig_default] = true;
    dart.addTypeCaches(BaseBarRendererConfig);
    BaseBarRendererConfig[dart.implements] = () => [series_renderer_config.SeriesRendererConfig$(dart.legacy(D))];
    dart.setMethodSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getMethods(BaseBarRendererConfig.__proto__),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
    }));
    dart.setGetterSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getGetters(BaseBarRendererConfig.__proto__),
      grouped: dart.legacy(core.bool),
      stacked: dart.legacy(core.bool),
      hashcode: dart.legacy(core.int)
    }));
    dart.setLibraryUri(BaseBarRendererConfig, I[0]);
    dart.setFieldSignature(BaseBarRendererConfig, () => ({
      __proto__: dart.getFields(BaseBarRendererConfig.__proto__),
      customRendererId: dart.finalFieldType(dart.legacy(core.String)),
      symbolRenderer: dart.finalFieldType(dart.legacy(symbol_renderer.SymbolRenderer)),
      dashPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      groupingType: dart.finalFieldType(dart.legacy(base_bar_renderer_config.BarGroupingType)),
      layoutPaintOrder: dart.finalFieldType(dart.legacy(core.int)),
      minBarLengthPx: dart.finalFieldType(dart.legacy(core.int)),
      fillPattern: dart.finalFieldType(dart.legacy(chart_canvas.FillPatternType)),
      stackHorizontalSeparator: dart.finalFieldType(dart.legacy(core.double)),
      strokeWidthPx: dart.finalFieldType(dart.legacy(core.double)),
      weightPattern: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
      rendererAttributes: dart.finalFieldType(dart.legacy(series_renderer_config.RendererAttributes))
    }));
    dart.defineExtensionMethods(BaseBarRendererConfig, ['_equals']);
    return BaseBarRendererConfig;
  });
  base_bar_renderer_config.BaseBarRendererConfig = base_bar_renderer_config.BaseBarRendererConfig$();
  dart.addTypeTests(base_bar_renderer_config.BaseBarRendererConfig, _is_BaseBarRendererConfig_default);
  base_bar_renderer_config.BarGroupingType = class BarGroupingType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (base_bar_renderer_config.BarGroupingType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = base_bar_renderer_config.BarGroupingType.prototype;
  dart.addTypeTests(base_bar_renderer_config.BarGroupingType);
  dart.addTypeCaches(base_bar_renderer_config.BarGroupingType);
  dart.setMethodSignature(base_bar_renderer_config.BarGroupingType, () => ({
    __proto__: dart.getMethods(base_bar_renderer_config.BarGroupingType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(base_bar_renderer_config.BarGroupingType, I[0]);
  dart.setFieldSignature(base_bar_renderer_config.BarGroupingType, () => ({
    __proto__: dart.getFields(base_bar_renderer_config.BarGroupingType.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(base_bar_renderer_config.BarGroupingType, ['toString']);
  base_bar_renderer_config.BarGroupingType.grouped = C[0] || CT.C0;
  base_bar_renderer_config.BarGroupingType.groupedStacked = C[1] || CT.C1;
  base_bar_renderer_config.BarGroupingType.stacked = C[2] || CT.C2;
  base_bar_renderer_config.BarGroupingType.values = C[3] || CT.C3;
  dart.trackLibraries("packages/charts_common/src/chart/bar/base_bar_renderer_config.dart", {
    "package:charts_common/src/chart/bar/base_bar_renderer_config.dart": base_bar_renderer_config
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["base_bar_renderer_config.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4Ce;;;;;;MAEQ;;;;;;MAGL;;;;;;MAGM;;;;;;MAGZ;;;;;;MAEA;;;;;;MAEY;;;;;;MAET;;;;;;MAGA;;;;;;MAkBG;;;;;;MAEV;;;;;;;AAiBF,cAAA,AAAa,AAA2B,sBAAR,oDAChC,AAAa,qBAAmB;MAAc;;AAI9C,cAAA,AAAa,AAA2B,sBAAR,oDAChC,AAAa,qBAAmB;MAAc;;YAGjC;AACf,YAAI,AAAU,SAAM,KAAK;AACvB,gBAAO;;AAET,aAAY,8BAAN,KAAK;AACT,gBAAO;;AAET,cAA8B,AAOa,aAP9B,WAAN,KAAK,uBAAqB,0BACX,YAAZ,WAAN,KAAK,kBAAgB,qBACH,YAAZ,WAAN,KAAK,kBAAgB,qBACF,YAAb,WAAN,KAAK,mBAAiB,sBACD,YAAf,WAAN,KAAK,qBAAmB,wBACO,YAAzB,WAAN,KAAK,+BAA6B,kCACd,YAAd,WAAN,KAAK,oBAAkB,uBACF,YAAf,WAAN,KAAK,qBAAmB,kCACpB,AAAe,oDAAa,WAAN,KAAK,qBAAgB;MACrD;;;AAGM,mBAAO;AACyC,QAApD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAAiC,gDAA3B,OAAkB,oBAAlB,cAA8B;AACH,QAA/C,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA4B,gDAAtB,OAAa,sBAAb,eAAyB;AACE,QAA/C,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA4B,gDAAtB,OAAa,sBAAb,eAAyB;AACG,QAAhD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA6B,iDAAvB,OAAc,sBAAd,eAA0B;AACI,QAAlD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA+B,mDAAzB,OAAgB,sBAAhB,eAA4B;AACY,QAA5D,OAAO,AAAK,AAAK,IAAN,GAAG,mBAAyC,6DAAnC,OAA0B,sBAA1B,eAAsC;AACT,QAAjD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA8B,qDAAxB,OAAe,uBAAf,gBAA2B;AACG,QAAlD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA+B,sDAAzB,OAAgB,uBAAhB,gBAA4B;AACC,QAAjD,OAAO,AAAK,AAAK,IAAN,GAAG,mBAA8B,qDAAxB,OAAe,uBAAf,gBAA2B;AAC/C,cAAO,KAAI;MACb;;;;UArDU;UACD;UACA;UACA;UACA;UACA;UACA;UACA;UACU;UACV;MAZH,2BAAyB;MAGrB;MACD;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACiB,yBAAiB,KAAf,cAAc,EAAd,aAAsB;AAXlD;;IAW6E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuDvB;;kEAAnD;;;;EAAmD","file":"../../../../../../../../../../../D:/packages/charts_common/src/chart/bar/base_bar_renderer_config.dart.lib.js"}');
  // Exports:
  return {
    src__chart__bar__base_bar_renderer_config: base_bar_renderer_config
  };
}));

//# sourceMappingURL=base_bar_renderer_config.dart.lib.js.map
